// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AppPKI is an auto generated low-level Go binding around an user-defined struct.
type AppPKI struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}

// DCAPEvent is an auto generated low-level Go binding around an user-defined struct.
type DCAPEvent struct {
	Index        uint32
	EventType    uint32
	EventPayload []byte
	Digest       [32]byte
}

// DCAPReport is an auto generated low-level Go binding around an user-defined struct.
type DCAPReport struct {
	MrTd          []byte
	RTMRs         [4][]byte
	MrOwner       []byte
	MrConfigId    []byte
	MrConfigOwner []byte
}

// MAAReport is an auto generated low-level Go binding around an user-defined struct.
type MAAReport struct {
	PCRs [24][32]byte
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DCAPIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAAIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_BYTES_SIZE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_INSTANCE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_METADATA\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_OPERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addArtifact\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"artifactHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allInstanceDomainNames\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allStorageBackends\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"app_pki\",\"inputs\":[],\"outputs\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"artifacts\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getArtifact\",\"inputs\":[{\"name\":\"artifactHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getConfigForIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPKI\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"identityConfigMap\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"instanceDomainNames\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerInstanceDomainName\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeConfigMapForIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForDCAP\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"eventLog\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForMAA\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPKI\",\"inputs\":[{\"name\":\"pki\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"storageBackends\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ArtifactAdded\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"adder\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"IdentityConfigSet\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InstanceDomainRegistered\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"registrar\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PKIUpdated\",\"inputs\":[{\"name\":\"updater\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pki\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendRemoved\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"remover\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendSet\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]}]",
	Bin: "0x608060405234801562000010575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000085575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007c9190620003be565b60405180910390fd5b62000096816200015360201b60201c565b506001600281905550620000b35f801b336200021660201b60201c565b50620000e67faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da7336200021660201b60201c565b50620001197f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e023336200021660201b60201c565b506200014c7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e07336200021660201b60201c565b50620003d9565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f6200022983836200031160201b60201c565b620003075760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620002a36200037460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506200030b565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620003a6826200037b565b9050919050565b620003b8816200039a565b82525050565b5f602082019050620003d35f830184620003ad565b92915050565b613d9580620003e75f395ff3fe608060405234801561000f575f80fd5b5060043610610204575f3560e01c80638da5cb5b11610118578063aa539d26116100ab578063d12847a61161007a578063d12847a614610612578063d4f72ac114610630578063d547741f14610660578063ed1fce631461067c578063f2fde38b1461069857610204565b8063aa539d2614610586578063aaae748e146105b6578063c2f38479146105d4578063c7d77a9d146105f457610204565b80639fe18d65116100e75780639fe18d65146104ec578063a217fddf14610508578063a275257b14610526578063a63e3a371461055657610204565b80638da5cb5b1461045057806391d148541461046e57806398a1b3971461049e5780639936b92b146104bc57610204565b80635a69887d1161019b57806373fe8cc41161016a57806373fe8cc4146103ae57806380be6875146103ca5780638404c1a3146103e65780638533d8b714610404578063863c43d41461042057610204565b80635a69887d146103285780636c3e695d14610358578063715018a61461037457806373c3f1361461037e57610204565b80632f2ff15d116101d75780632f2ff15d146102a257806336568abe146102be57806337668af5146102da57806353f24b6d1461030a57610204565b806301ffc9a71461020857806314b9443414610238578063248a9ca31461025657806327ae3ad914610286575b5f80fd5b610222600480360381019061021d91906120c7565b6106b4565b60405161022f919061210c565b60405180910390f35b61024061072d565b60405161024d919061220a565b60405180910390f35b610270600480360381019061026b919061225d565b6108f6565b60405161027d9190612297565b60405180910390f35b6102a0600480360381019061029b91906123dc565b610912565b005b6102bc60048036038101906102b7919061247d565b610988565b005b6102d860048036038101906102d3919061247d565b6109aa565b005b6102f460048036038101906102ef919061225d565b610a25565b6040516103019190612503565b60405180910390f35b610312610b25565b60405161031f9190612297565b60405180910390f35b610342600480360381019061033d9190612956565b610b49565b60405161034f9190612297565b60405180910390f35b610372600480360381019061036d9190612a81565b610e70565b005b61037c610fdd565b005b61039860048036038101906103939190612ac8565b610ff0565b6040516103a59190612297565b60405180910390f35b6103c860048036038101906103c391906123dc565b611110565b005b6103e460048036038101906103df9190612b0f565b6111a9565b005b6103ee6111de565b6040516103fb9190612297565b60405180910390f35b61041e6004803603810190610419919061225d565b611202565b005b61043a60048036038101906104359190612c7f565b611221565b6040516104479190612297565b60405180910390f35b6104586112a7565b6040516104659190612cba565b60405180910390f35b6104886004803603810190610483919061247d565b6112cf565b604051610495919061210c565b60405180910390f35b6104a6611332565b6040516104b39190612297565b60405180910390f35b6104d660048036038101906104d19190612d06565b611356565b6040516104e39190612d83565b60405180910390f35b610506600480360381019061050191906123dc565b6113fc565b005b610510611559565b60405161051d9190612297565b60405180910390f35b610540600480360381019061053b919061225d565b61155f565b60405161054d9190612297565b60405180910390f35b610570600480360381019061056b919061225d565b6115ce565b60405161057d9190612503565b60405180910390f35b6105a0600480360381019061059b9190612d06565b611669565b6040516105ad9190612d83565b60405180910390f35b6105be61170f565b6040516105cb9190612db2565b60405180910390f35b6105dc611715565b6040516105eb93929190612dcb565b60405180910390f35b6105fc6118be565b6040516106099190612f18565b60405180910390f35b61061a611992565b6040516106279190612f18565b60405180910390f35b61064a6004803603810190610645919061225d565b611a66565b6040516106579190612297565b60405180910390f35b61067a6004803603810190610675919061247d565b611a7b565b005b61069660048036038101906106919190612f38565b611a9d565b005b6106b260048036038101906106ad9190612f78565b611ad0565b005b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610726575061072582611b54565b5b9050919050565b610735611fe8565b60046040518060600160405290815f8201805461075190612fd0565b80601f016020809104026020016040519081016040528092919081815260200182805461077d90612fd0565b80156107c85780601f1061079f576101008083540402835291602001916107c8565b820191905f5260205f20905b8154815290600101906020018083116107ab57829003601f168201915b505050505081526020016001820180546107e190612fd0565b80601f016020809104026020016040519081016040528092919081815260200182805461080d90612fd0565b80156108585780601f1061082f57610100808354040283529160200191610858565b820191905f5260205f20905b81548152906001019060200180831161083b57829003601f168201915b5050505050815260200160028201805461087190612fd0565b80601f016020809104026020016040519081016040528092919081815260200182805461089d90612fd0565b80156108e85780601f106108bf576101008083540402835291602001916108e8565b820191905f5260205f20905b8154815290600101906020018083116108cb57829003601f168201915b505050505081525050905090565b5f805f8381526020019081526020015f20600101549050919050565b61091a611bbd565b600781908060018154018082558091505060019003905f5260205f20015f90919091909150908161094b919061319d565b507fd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da813360405161097d92919061326c565b60405180910390a150565b610991826108f6565b61099a81611c44565b6109a48383611c58565b50505050565b6109b2611d41565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a16576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a208282611d48565b505050565b60605f60085f8481526020019081526020015f208054610a4490612fd0565b905011610a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7d906132e4565b60405180910390fd5b60085f8381526020019081526020015f208054610aa290612fd0565b80601f0160208091040260200160405190810160405280929190818152602001828054610ace90612fd0565b8015610b195780601f10610af057610100808354040283529160200191610b19565b820191905f5260205f20905b815481529060010190602001808311610afc57829003601f168201915b50505050509050919050565b7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e0781565b5f6030835f01515114610b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b889061334c565b60405180910390fd5b603083602001515f60048110610baa57610ba961336a565b5b60200201515114610bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be7906133e1565b60405180910390fd5b60308360200151600160048110610c0a57610c0961336a565b5b60200201515114610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4790613449565b60405180910390fd5b60308360200151600260048110610c6a57610c6961336a565b5b60200201515114610cb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca7906134b1565b60405180910390fd5b60308360200151600360048110610cca57610cc961336a565b5b60200201515114610d10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0790613519565b60405180910390fd5b603083604001515114610d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4f90613581565b60405180910390fd5b603083606001515114610da0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d97906135e9565b60405180910390fd5b603083608001515114610de8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddf90613651565b60405180910390fd5b3083602001515f60048110610e0057610dff61336a565b5b60200201518460200151600160048110610e1d57610e1c61336a565b5b60200201518560200151600260048110610e3a57610e3961336a565b5b6020020151604051602001610e5294939291906136ee565b60405160208183030381529060405280519060200120905092915050565b610e78611bbd565b805f015161500081511115610ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb990613779565b60405180910390fd5b816020015161500081511115610f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0490613779565b60405180910390fd5b826040015161500081511115610f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4f90613779565b60405180910390fd5b8360045f820151815f019081610f6e91906137ef565b506020820151816001019081610f8491906137ef565b506040820151816002019081610f9a91906137ef565b509050507f284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb73385604051610fcf9291906138be565b60405180910390a150505050565b610fe5611bbd565b610fee5f611e31565b565b5f7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e02361101b81611c44565b8261500081511115611062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105990613779565b60405180910390fd5b60028460405161107291906138ec565b602060405180830381855afa15801561108d573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906110b09190613916565b92508360085f8581526020019081526020015f2090816110d091906137ef565b507e89f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d68333604051611101929190613941565b60405180910390a15050919050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da761113a81611c44565b600382908060018154018082558091505060019003905f5260205f20015f90919091909150908161116b919061319d565b507f1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa823360405161119d92919061326c565b60405180910390a15050565b6111b1611bbd565b6111b9611ef4565b5f6111c48484610b49565b90506111d08183611f38565b506111d9611f8d565b505050565b7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e02381565b61120a611bbd565b60095f8281526020019081526020015f205f905550565b5f30825f015160046018811061123a5761123961336a565b5b6020020151835f01516009601881106112565761125561336a565b5b6020020151845f0151600b601881106112725761127161336a565b5b602002015160405160200161128a9493929190613988565b604051602081830303815290604052805190602001209050919050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da781565b60038181548110611365575f80fd5b905f5260205f20015f91509050805461137d90612fd0565b80601f01602080910402602001604051908101604052809291908181526020018280546113a990612fd0565b80156113f45780601f106113cb576101008083540402835291602001916113f4565b820191905f5260205f20905b8154815290600101906020018083116113d757829003601f168201915b505050505081565b611404611bbd565b5f5b60078054905081101561151c57816040516020016114249190613a0f565b604051602081830303815290604052805190602001206007828154811061144e5761144d61336a565b5b905f5260205f20016040516020016114669190613aa5565b604051602081830303815290604052805190602001200361150957600760016007805490506114959190613ae8565b815481106114a6576114a561336a565b5b905f5260205f2001600782815481106114c2576114c161336a565b5b905f5260205f200190816114d69190613b42565b5060078054806114e9576114e8613c27565b5b600190038181905f5260205f20015f6115029190612009565b905561151c565b808061151490613c54565b915050611406565b507ff633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f813360405161154e92919061326c565b60405180910390a150565b5f801b81565b5f805f1b60095f8481526020019081526020015f2054036115b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ac90613ce5565b60405180910390fd5b60095f8381526020019081526020015f20549050919050565b6008602052805f5260405f205f9150905080546115ea90612fd0565b80601f016020809104026020016040519081016040528092919081815260200182805461161690612fd0565b80156116615780601f1061163857610100808354040283529160200191611661565b820191905f5260205f20905b81548152906001019060200180831161164457829003601f168201915b505050505081565b60078181548110611678575f80fd5b905f5260205f20015f91509050805461169090612fd0565b80601f01602080910402602001604051908101604052809291908181526020018280546116bc90612fd0565b80156117075780601f106116de57610100808354040283529160200191611707565b820191905f5260205f20905b8154815290600101906020018083116116ea57829003601f168201915b505050505081565b61500081565b6004805f01805461172590612fd0565b80601f016020809104026020016040519081016040528092919081815260200182805461175190612fd0565b801561179c5780601f106117735761010080835404028352916020019161179c565b820191905f5260205f20905b81548152906001019060200180831161177f57829003601f168201915b5050505050908060010180546117b190612fd0565b80601f01602080910402602001604051908101604052809291908181526020018280546117dd90612fd0565b80156118285780601f106117ff57610100808354040283529160200191611828565b820191905f5260205f20905b81548152906001019060200180831161180b57829003601f168201915b50505050509080600201805461183d90612fd0565b80601f016020809104026020016040519081016040528092919081815260200182805461186990612fd0565b80156118b45780601f1061188b576101008083540402835291602001916118b4565b820191905f5260205f20905b81548152906001019060200180831161189757829003601f168201915b5050505050905083565b60606007805480602002602001604051908101604052809291908181526020015f905b82821015611989578382905f5260205f200180546118fe90612fd0565b80601f016020809104026020016040519081016040528092919081815260200182805461192a90612fd0565b80156119755780601f1061194c57610100808354040283529160200191611975565b820191905f5260205f20905b81548152906001019060200180831161195857829003601f168201915b5050505050815260200190600101906118e1565b50505050905090565b60606003805480602002602001604051908101604052809291908181526020015f905b82821015611a5d578382905f5260205f200180546119d290612fd0565b80601f01602080910402602001604051908101604052809291908181526020018280546119fe90612fd0565b8015611a495780601f10611a2057610100808354040283529160200191611a49565b820191905f5260205f20905b815481529060010190602001808311611a2c57829003601f168201915b5050505050815260200190600101906119b5565b50505050905090565b6009602052805f5260405f205f915090505481565b611a84826108f6565b611a8d81611c44565b611a978383611d48565b50505050565b611aa5611bbd565b611aad611ef4565b5f611ab783611221565b9050611ac38183611f38565b50611acc611f8d565b5050565b611ad8611bbd565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b48575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611b3f9190612cba565b60405180910390fd5b611b5181611e31565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611bc5611d41565b73ffffffffffffffffffffffffffffffffffffffff16611be36112a7565b73ffffffffffffffffffffffffffffffffffffffff1614611c4257611c06611d41565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611c399190612cba565b60405180910390fd5b565b611c5581611c50611d41565b611f97565b50565b5f611c6383836112cf565b611d375760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611cd4611d41565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611d3b565b5f90505b92915050565b5f33905090565b5f611d5383836112cf565b15611e27575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611dc4611d41565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611e2b565b5f90505b92915050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002805403611f2f576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028081905550565b8060095f8481526020019081526020015f20819055507f612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe828233604051611f8193929190613d03565b60405180910390a15050565b6001600281905550565b611fa182826112cf565b611fe45780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611fdb929190613d38565b60405180910390fd5b5050565b60405180606001604052806060815260200160608152602001606081525090565b50805461201590612fd0565b5f825580601f106120265750612043565b601f0160209004905f5260205f20908101906120429190612046565b5b50565b5b8082111561205d575f815f905550600101612047565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120a681612072565b81146120b0575f80fd5b50565b5f813590506120c18161209d565b92915050565b5f602082840312156120dc576120db61206a565b5b5f6120e9848285016120b3565b91505092915050565b5f8115159050919050565b612106816120f2565b82525050565b5f60208201905061211f5f8301846120fd565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561215c578082015181840152602081019050612141565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61218182612125565b61218b818561212f565b935061219b81856020860161213f565b6121a481612167565b840191505092915050565b5f606083015f8301518482035f8601526121c98282612177565b915050602083015184820360208601526121e38282612177565b915050604083015184820360408601526121fd8282612177565b9150508091505092915050565b5f6020820190508181035f83015261222281846121af565b905092915050565b5f819050919050565b61223c8161222a565b8114612246575f80fd5b50565b5f8135905061225781612233565b92915050565b5f602082840312156122725761227161206a565b5b5f61227f84828501612249565b91505092915050565b6122918161222a565b82525050565b5f6020820190506122aa5f830184612288565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6122ee82612167565b810181811067ffffffffffffffff8211171561230d5761230c6122b8565b5b80604052505050565b5f61231f612061565b905061232b82826122e5565b919050565b5f67ffffffffffffffff82111561234a576123496122b8565b5b61235382612167565b9050602081019050919050565b828183375f83830152505050565b5f61238061237b84612330565b612316565b90508281526020810184848401111561239c5761239b6122b4565b5b6123a7848285612360565b509392505050565b5f82601f8301126123c3576123c26122b0565b5b81356123d384826020860161236e565b91505092915050565b5f602082840312156123f1576123f061206a565b5b5f82013567ffffffffffffffff81111561240e5761240d61206e565b5b61241a848285016123af565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61244c82612423565b9050919050565b61245c81612442565b8114612466575f80fd5b50565b5f8135905061247781612453565b92915050565b5f80604083850312156124935761249261206a565b5b5f6124a085828601612249565b92505060206124b185828601612469565b9150509250929050565b5f82825260208201905092915050565b5f6124d582612125565b6124df81856124bb565b93506124ef81856020860161213f565b6124f881612167565b840191505092915050565b5f6020820190508181035f83015261251b81846124cb565b905092915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff821115612545576125446122b8565b5b61254e82612167565b9050602081019050919050565b5f61256d6125688461252b565b612316565b905082815260208101848484011115612589576125886122b4565b5b612594848285612360565b509392505050565b5f82601f8301126125b0576125af6122b0565b5b81356125c084826020860161255b565b91505092915050565b5f67ffffffffffffffff8211156125e3576125e26122b8565b5b602082029050919050565b5f80fd5b5f6126046125ff846125c9565b612316565b9050806020840283018581111561261e5761261d6125ee565b5b835b8181101561266557803567ffffffffffffffff811115612643576126426122b0565b5b808601612650898261259c565b85526020850194505050602081019050612620565b5050509392505050565b5f82601f830112612683576126826122b0565b5b60046126908482856125f2565b91505092915050565b5f60a082840312156126ae576126ad612523565b5b6126b860a0612316565b90505f82013567ffffffffffffffff8111156126d7576126d6612527565b5b6126e38482850161259c565b5f83015250602082013567ffffffffffffffff81111561270657612705612527565b5b6127128482850161266f565b602083015250604082013567ffffffffffffffff81111561273657612735612527565b5b6127428482850161259c565b604083015250606082013567ffffffffffffffff81111561276657612765612527565b5b6127728482850161259c565b606083015250608082013567ffffffffffffffff81111561279657612795612527565b5b6127a28482850161259c565b60808301525092915050565b5f67ffffffffffffffff8211156127c8576127c76122b8565b5b602082029050602081019050919050565b5f63ffffffff82169050919050565b6127f1816127d9565b81146127fb575f80fd5b50565b5f8135905061280c816127e8565b92915050565b5f6080828403121561282757612826612523565b5b6128316080612316565b90505f612840848285016127fe565b5f830152506020612853848285016127fe565b602083015250604082013567ffffffffffffffff81111561287757612876612527565b5b6128838482850161259c565b604083015250606061289784828501612249565b60608301525092915050565b5f6128b56128b0846127ae565b612316565b905080838252602082019050602084028301858111156128d8576128d76125ee565b5b835b8181101561291f57803567ffffffffffffffff8111156128fd576128fc6122b0565b5b80860161290a8982612812565b855260208501945050506020810190506128da565b5050509392505050565b5f82601f83011261293d5761293c6122b0565b5b813561294d8482602086016128a3565b91505092915050565b5f806040838503121561296c5761296b61206a565b5b5f83013567ffffffffffffffff8111156129895761298861206e565b5b61299585828601612699565b925050602083013567ffffffffffffffff8111156129b6576129b561206e565b5b6129c285828601612929565b9150509250929050565b5f606082840312156129e1576129e0612523565b5b6129eb6060612316565b90505f82013567ffffffffffffffff811115612a0a57612a09612527565b5b612a168482850161259c565b5f83015250602082013567ffffffffffffffff811115612a3957612a38612527565b5b612a458482850161259c565b602083015250604082013567ffffffffffffffff811115612a6957612a68612527565b5b612a758482850161259c565b60408301525092915050565b5f60208284031215612a9657612a9561206a565b5b5f82013567ffffffffffffffff811115612ab357612ab261206e565b5b612abf848285016129cc565b91505092915050565b5f60208284031215612add57612adc61206a565b5b5f82013567ffffffffffffffff811115612afa57612af961206e565b5b612b068482850161259c565b91505092915050565b5f805f60608486031215612b2657612b2561206a565b5b5f84013567ffffffffffffffff811115612b4357612b4261206e565b5b612b4f86828701612699565b935050602084013567ffffffffffffffff811115612b7057612b6f61206e565b5b612b7c86828701612929565b9250506040612b8d86828701612249565b9150509250925092565b5f67ffffffffffffffff821115612bb157612bb06122b8565b5b602082029050919050565b5f612bce612bc984612b97565b612316565b90508060208402830185811115612be857612be76125ee565b5b835b81811015612c115780612bfd8882612249565b845260208401935050602081019050612bea565b5050509392505050565b5f82601f830112612c2f57612c2e6122b0565b5b6018612c3c848285612bbc565b91505092915050565b5f6103008284031215612c5b57612c5a612523565b5b612c656020612316565b90505f612c7484828501612c1b565b5f8301525092915050565b5f6103008284031215612c9557612c9461206a565b5b5f612ca284828501612c45565b91505092915050565b612cb481612442565b82525050565b5f602082019050612ccd5f830184612cab565b92915050565b5f819050919050565b612ce581612cd3565b8114612cef575f80fd5b50565b5f81359050612d0081612cdc565b92915050565b5f60208284031215612d1b57612d1a61206a565b5b5f612d2884828501612cf2565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f612d5582612d31565b612d5f8185612d3b565b9350612d6f81856020860161213f565b612d7881612167565b840191505092915050565b5f6020820190508181035f830152612d9b8184612d4b565b905092915050565b612dac81612cd3565b82525050565b5f602082019050612dc55f830184612da3565b92915050565b5f6060820190508181035f830152612de381866124cb565b90508181036020830152612df781856124cb565b90508181036040830152612e0b81846124cb565b9050949350505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f612e5882612d31565b612e628185612e3e565b9350612e7281856020860161213f565b612e7b81612167565b840191505092915050565b5f612e918383612e4e565b905092915050565b5f602082019050919050565b5f612eaf82612e15565b612eb98185612e1f565b935083602082028501612ecb85612e2f565b805f5b85811015612f065784840389528151612ee78582612e86565b9450612ef283612e99565b925060208a01995050600181019050612ece565b50829750879550505050505092915050565b5f6020820190508181035f830152612f308184612ea5565b905092915050565b5f806103208385031215612f4f57612f4e61206a565b5b5f612f5c85828601612c45565b925050610300612f6e85828601612249565b9150509250929050565b5f60208284031215612f8d57612f8c61206a565b5b5f612f9a84828501612469565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612fe757607f821691505b602082108103612ffa57612ff9612fa3565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261305c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613021565b6130668683613021565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6130a161309c61309784612cd3565b61307e565b612cd3565b9050919050565b5f819050919050565b6130ba83613087565b6130ce6130c6826130a8565b84845461302d565b825550505050565b5f90565b6130e26130d6565b6130ed8184846130b1565b505050565b5b81811015613110576131055f826130da565b6001810190506130f3565b5050565b601f8211156131555761312681613000565b61312f84613012565b8101602085101561313e578190505b61315261314a85613012565b8301826130f2565b50505b505050565b5f82821c905092915050565b5f6131755f198460080261315a565b1980831691505092915050565b5f61318d8383613166565b9150826002028217905092915050565b6131a682612d31565b67ffffffffffffffff8111156131bf576131be6122b8565b5b6131c98254612fd0565b6131d4828285613114565b5f60209050601f831160018114613205575f84156131f3578287015190505b6131fd8582613182565b865550613264565b601f19841661321386613000565b5f5b8281101561323a57848901518255600182019150602085019450602081019050613215565b868310156132575784890151613253601f891682613166565b8355505b6001600288020188555050505b505050505050565b5f6040820190508181035f8301526132848185612d4b565b90506132936020830184612cab565b9392505050565b7f417274696661637420646f6573206e6f742065786973740000000000000000005f82015250565b5f6132ce601783612d3b565b91506132d98261329a565b602082019050919050565b5f6020820190508181035f8301526132fb816132c2565b9050919050565b7f696e636f7272656374206d727464206c656e67746800000000000000000000005f82015250565b5f613336601583612d3b565b915061334182613302565b602082019050919050565b5f6020820190508181035f8301526133638161332a565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f696e636f72726563742052544d525b305d206c656e67746800000000000000005f82015250565b5f6133cb601883612d3b565b91506133d682613397565b602082019050919050565b5f6020820190508181035f8301526133f8816133bf565b9050919050565b7f696e636f72726563742052544d525b315d206c656e67746800000000000000005f82015250565b5f613433601883612d3b565b915061343e826133ff565b602082019050919050565b5f6020820190508181035f83015261346081613427565b9050919050565b7f696e636f72726563742052544d525b325d206c656e67746800000000000000005f82015250565b5f61349b601883612d3b565b91506134a682613467565b602082019050919050565b5f6020820190508181035f8301526134c88161348f565b9050919050565b7f696e636f72726563742052544d525b335d206c656e67746800000000000000005f82015250565b5f613503601883612d3b565b915061350e826134cf565b602082019050919050565b5f6020820190508181035f830152613530816134f7565b9050919050565b7f696e636f7272656374206d724f776e6572206c656e67746800000000000000005f82015250565b5f61356b601883612d3b565b915061357682613537565b602082019050919050565b5f6020820190508181035f8301526135988161355f565b9050919050565b7f696e636f7272656374206d72436f6e6669674964206c656e67746800000000005f82015250565b5f6135d3601b83612d3b565b91506135de8261359f565b602082019050919050565b5f6020820190508181035f830152613600816135c7565b9050919050565b7f696e636f7272656374206d72436f6e6669674f776e6572206c656e67746800005f82015250565b5f61363b601e83612d3b565b915061364682613607565b602082019050919050565b5f6020820190508181035f8301526136688161362f565b9050919050565b5f8160601b9050919050565b5f6136858261366f565b9050919050565b5f6136968261367b565b9050919050565b6136ae6136a982612442565b61368c565b82525050565b5f81905092915050565b5f6136c882612125565b6136d281856136b4565b93506136e281856020860161213f565b80840191505092915050565b5f6136f9828761369d565b60148201915061370982866136be565b915061371582856136be565b915061372182846136be565b915081905095945050505050565b7f446174612073697a652065786365656473206c696d69740000000000000000005f82015250565b5f613763601783612d3b565b915061376e8261372f565b602082019050919050565b5f6020820190508181035f83015261379081613757565b9050919050565b5f819050815f5260205f209050919050565b601f8211156137ea576137bb81613797565b6137c484613012565b810160208510156137d3578190505b6137e76137df85613012565b8301826130f2565b50505b505050565b6137f882612125565b67ffffffffffffffff811115613811576138106122b8565b5b61381b8254612fd0565b6138268282856137a9565b5f60209050601f831160018114613857575f8415613845578287015190505b61384f8582613182565b8655506138b6565b601f19841661386586613797565b5f5b8281101561388c57848901518255600182019150602085019450602081019050613867565b868310156138a957848901516138a5601f891682613166565b8355505b6001600288020188555050505b505050505050565b5f6040820190506138d15f830185612cab565b81810360208301526138e381846121af565b90509392505050565b5f6138f782846136be565b915081905092915050565b5f8151905061391081612233565b92915050565b5f6020828403121561392b5761392a61206a565b5b5f61393884828501613902565b91505092915050565b5f6040820190506139545f830185612288565b6139616020830184612cab565b9392505050565b5f819050919050565b61398261397d8261222a565b613968565b82525050565b5f613993828761369d565b6014820191506139a38286613971565b6020820191506139b38285613971565b6020820191506139c38284613971565b60208201915081905095945050505050565b5f81905092915050565b5f6139e982612d31565b6139f381856139d5565b9350613a0381856020860161213f565b80840191505092915050565b5f613a1a82846139df565b915081905092915050565b5f8154613a3181612fd0565b613a3b81866139d5565b9450600182165f8114613a555760018114613a6a57613a9c565b60ff1983168652811515820286019350613a9c565b613a7385613000565b5f5b83811015613a9457815481890152600182019150602081019050613a75565b838801955050505b50505092915050565b5f613ab08284613a25565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613af282612cd3565b9150613afd83612cd3565b9250828203905081811115613b1557613b14613abb565b5b92915050565b5f81549050613b2981612fd0565b9050919050565b5f819050815f5260205f209050919050565b818103613b50575050613c25565b613b5982613b1b565b67ffffffffffffffff811115613b7257613b716122b8565b5b613b7c8254612fd0565b613b87828285613114565b5f601f831160018114613bb4575f8415613ba2578287015490505b613bac8582613182565b865550613c1e565b601f198416613bc287613b30565b9650613bcd86613000565b5f5b82811015613bf457848901548255600182019150600185019450602081019050613bcf565b86831015613c115784890154613c0d601f891682613166565b8355505b6001600288020188555050505b5050505050505b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f613c5e82612cd3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c9057613c8f613abb565b5b600182019050919050565b7f436f6e666967206e6f74206d61707065640000000000000000000000000000005f82015250565b5f613ccf601183612d3b565b9150613cda82613c9b565b602082019050919050565b5f6020820190508181035f830152613cfc81613cc3565b9050919050565b5f606082019050613d165f830186612288565b613d236020830185612288565b613d306040830184612cab565b949350505050565b5f604082019050613d4b5f830185612cab565b613d586020830184612288565b939250505056fea26469706673582212207f60f74c0aa9ca03a541a0e1578c283f613dff1ac288e69d6fb0815ac3e9131f64736f6c63430008150033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCaller) DCAPIdentity(opts *bind.CallOpts, report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DCAPIdentity", report, arg1)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistrySession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistrySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCaller) MAAIdentity(opts *bind.CallOpts, report MAAReport) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAAIdentity", report)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistrySession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCaller) MAXBYTESSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAX_BYTES_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistrySession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCallerSession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEINSTANCE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_INSTANCE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistrySession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEMETADATA(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_METADATA")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistrySession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEOPERATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_OPERATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistrySession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistryCaller) AllInstanceDomainNames(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "allInstanceDomainNames")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistrySession) AllInstanceDomainNames() ([]string, error) {
	return _Registry.Contract.AllInstanceDomainNames(&_Registry.CallOpts)
}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistryCallerSession) AllInstanceDomainNames() ([]string, error) {
	return _Registry.Contract.AllInstanceDomainNames(&_Registry.CallOpts)
}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistryCaller) AllStorageBackends(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "allStorageBackends")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistrySession) AllStorageBackends() ([]string, error) {
	return _Registry.Contract.AllStorageBackends(&_Registry.CallOpts)
}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistryCallerSession) AllStorageBackends() ([]string, error) {
	return _Registry.Contract.AllStorageBackends(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCaller) AppPki(opts *bind.CallOpts) (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "app_pki")

	outstruct := new(struct {
		Ca          []byte
		Pubkey      []byte
		Attestation []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Ca = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Pubkey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Attestation = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistrySession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCallerSession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistryCaller) Artifacts(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "artifacts", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistrySession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Artifacts(&_Registry.CallOpts, arg0)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistryCallerSession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Artifacts(&_Registry.CallOpts, arg0)
}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistryCaller) GetArtifact(opts *bind.CallOpts, artifactHash [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getArtifact", artifactHash)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistrySession) GetArtifact(artifactHash [32]byte) ([]byte, error) {
	return _Registry.Contract.GetArtifact(&_Registry.CallOpts, artifactHash)
}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistryCallerSession) GetArtifact(artifactHash [32]byte) ([]byte, error) {
	return _Registry.Contract.GetArtifact(&_Registry.CallOpts, artifactHash)
}

// GetConfigForIdentity is a free data retrieval call binding the contract method 0xa275257b.
//
// Solidity: function getConfigForIdentity(bytes32 identity) view returns(bytes32)
func (_Registry *RegistryCaller) GetConfigForIdentity(opts *bind.CallOpts, identity [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getConfigForIdentity", identity)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetConfigForIdentity is a free data retrieval call binding the contract method 0xa275257b.
//
// Solidity: function getConfigForIdentity(bytes32 identity) view returns(bytes32)
func (_Registry *RegistrySession) GetConfigForIdentity(identity [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetConfigForIdentity(&_Registry.CallOpts, identity)
}

// GetConfigForIdentity is a free data retrieval call binding the contract method 0xa275257b.
//
// Solidity: function getConfigForIdentity(bytes32 identity) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetConfigForIdentity(identity [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetConfigForIdentity(&_Registry.CallOpts, identity)
}

// GetPKI is a free data retrieval call binding the contract method 0x14b94434.
//
// Solidity: function getPKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistryCaller) GetPKI(opts *bind.CallOpts) (AppPKI, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getPKI")

	if err != nil {
		return *new(AppPKI), err
	}

	out0 := *abi.ConvertType(out[0], new(AppPKI)).(*AppPKI)

	return out0, err

}

// GetPKI is a free data retrieval call binding the contract method 0x14b94434.
//
// Solidity: function getPKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistrySession) GetPKI() (AppPKI, error) {
	return _Registry.Contract.GetPKI(&_Registry.CallOpts)
}

// GetPKI is a free data retrieval call binding the contract method 0x14b94434.
//
// Solidity: function getPKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistryCallerSession) GetPKI() (AppPKI, error) {
	return _Registry.Contract.GetPKI(&_Registry.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistrySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistrySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCaller) IdentityConfigMap(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "identityConfigMap", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistrySession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCallerSession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCaller) InstanceDomainNames(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "instanceDomainNames", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistrySession) InstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts, arg0)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) InstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistrySession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCallerSession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCaller) StorageBackends(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "storageBackends", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistrySession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts, arg0)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistryTransactor) AddArtifact(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addArtifact", data)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistrySession) AddArtifact(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddArtifact(&_Registry.TransactOpts, data)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistryTransactorSession) AddArtifact(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddArtifact(&_Registry.TransactOpts, data)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactor) RegisterInstanceDomainName(opts *bind.TransactOpts, domain string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerInstanceDomainName", domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistrySession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactorSession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactor) RemoveConfigMapForIdentity(opts *bind.TransactOpts, identity [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeConfigMapForIdentity", identity)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistrySession) RemoveConfigMapForIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveConfigMapForIdentity(&_Registry.TransactOpts, identity)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactorSession) RemoveConfigMapForIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveConfigMapForIdentity(&_Registry.TransactOpts, identity)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) RemoveStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeStorageBackend", backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistrySession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0x80be6875.
//
// Solidity: function setConfigForDCAP((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForDCAP(opts *bind.TransactOpts, report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForDCAP", report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0x80be6875.
//
// Solidity: function setConfigForDCAP((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForDCAP(report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0x80be6875.
//
// Solidity: function setConfigForDCAP((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForDCAP(report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForMAA(opts *bind.TransactOpts, report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForMAA", report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForMAA(report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForMAA(report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactor) SetPKI(opts *bind.TransactOpts, pki AppPKI) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setPKI", pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistrySession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactorSession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) SetStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setStorageBackend", backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// RegistryArtifactAddedIterator is returned from FilterArtifactAdded and is used to iterate over the raw logs and unpacked data for ArtifactAdded events raised by the Registry contract.
type RegistryArtifactAddedIterator struct {
	Event *RegistryArtifactAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryArtifactAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryArtifactAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryArtifactAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryArtifactAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryArtifactAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryArtifactAdded represents a ArtifactAdded event raised by the Registry contract.
type RegistryArtifactAdded struct {
	ConfigHash [32]byte
	Adder      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterArtifactAdded is a free log retrieval operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) FilterArtifactAdded(opts *bind.FilterOpts) (*RegistryArtifactAddedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return &RegistryArtifactAddedIterator{contract: _Registry.contract, event: "ArtifactAdded", logs: logs, sub: sub}, nil
}

// WatchArtifactAdded is a free log subscription operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) WatchArtifactAdded(opts *bind.WatchOpts, sink chan<- *RegistryArtifactAdded) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryArtifactAdded)
				if err := _Registry.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseArtifactAdded is a log parse operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) ParseArtifactAdded(log types.Log) (*RegistryArtifactAdded, error) {
	event := new(RegistryArtifactAdded)
	if err := _Registry.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryIdentityConfigSetIterator is returned from FilterIdentityConfigSet and is used to iterate over the raw logs and unpacked data for IdentityConfigSet events raised by the Registry contract.
type RegistryIdentityConfigSetIterator struct {
	Event *RegistryIdentityConfigSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryIdentityConfigSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryIdentityConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryIdentityConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryIdentityConfigSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryIdentityConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryIdentityConfigSet represents a IdentityConfigSet event raised by the Registry contract.
type RegistryIdentityConfigSet struct {
	Identity   [32]byte
	ConfigHash [32]byte
	Setter     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterIdentityConfigSet is a free log retrieval operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) FilterIdentityConfigSet(opts *bind.FilterOpts) (*RegistryIdentityConfigSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return &RegistryIdentityConfigSetIterator{contract: _Registry.contract, event: "IdentityConfigSet", logs: logs, sub: sub}, nil
}

// WatchIdentityConfigSet is a free log subscription operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) WatchIdentityConfigSet(opts *bind.WatchOpts, sink chan<- *RegistryIdentityConfigSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryIdentityConfigSet)
				if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIdentityConfigSet is a log parse operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) ParseIdentityConfigSet(log types.Log) (*RegistryIdentityConfigSet, error) {
	event := new(RegistryIdentityConfigSet)
	if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryInstanceDomainRegisteredIterator is returned from FilterInstanceDomainRegistered and is used to iterate over the raw logs and unpacked data for InstanceDomainRegistered events raised by the Registry contract.
type RegistryInstanceDomainRegisteredIterator struct {
	Event *RegistryInstanceDomainRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryInstanceDomainRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryInstanceDomainRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryInstanceDomainRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryInstanceDomainRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryInstanceDomainRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryInstanceDomainRegistered represents a InstanceDomainRegistered event raised by the Registry contract.
type RegistryInstanceDomainRegistered struct {
	Domain    string
	Registrar common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInstanceDomainRegistered is a free log retrieval operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) FilterInstanceDomainRegistered(opts *bind.FilterOpts) (*RegistryInstanceDomainRegisteredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return &RegistryInstanceDomainRegisteredIterator{contract: _Registry.contract, event: "InstanceDomainRegistered", logs: logs, sub: sub}, nil
}

// WatchInstanceDomainRegistered is a free log subscription operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) WatchInstanceDomainRegistered(opts *bind.WatchOpts, sink chan<- *RegistryInstanceDomainRegistered) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryInstanceDomainRegistered)
				if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstanceDomainRegistered is a log parse operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) ParseInstanceDomainRegistered(log types.Log) (*RegistryInstanceDomainRegistered, error) {
	event := new(RegistryInstanceDomainRegistered)
	if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Registry contract.
type RegistryOwnershipTransferredIterator struct {
	Event *RegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipTransferred represents a OwnershipTransferred event raised by the Registry contract.
type RegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipTransferredIterator{contract: _Registry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipTransferred)
				if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) ParseOwnershipTransferred(log types.Log) (*RegistryOwnershipTransferred, error) {
	event := new(RegistryOwnershipTransferred)
	if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryPKIUpdatedIterator is returned from FilterPKIUpdated and is used to iterate over the raw logs and unpacked data for PKIUpdated events raised by the Registry contract.
type RegistryPKIUpdatedIterator struct {
	Event *RegistryPKIUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryPKIUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryPKIUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryPKIUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryPKIUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryPKIUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryPKIUpdated represents a PKIUpdated event raised by the Registry contract.
type RegistryPKIUpdated struct {
	Updater common.Address
	Pki     AppPKI
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPKIUpdated is a free log retrieval operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) FilterPKIUpdated(opts *bind.FilterOpts) (*RegistryPKIUpdatedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return &RegistryPKIUpdatedIterator{contract: _Registry.contract, event: "PKIUpdated", logs: logs, sub: sub}, nil
}

// WatchPKIUpdated is a free log subscription operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) WatchPKIUpdated(opts *bind.WatchOpts, sink chan<- *RegistryPKIUpdated) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryPKIUpdated)
				if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePKIUpdated is a log parse operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) ParsePKIUpdated(log types.Log) (*RegistryPKIUpdated, error) {
	event := new(RegistryPKIUpdated)
	if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Registry contract.
type RegistryRoleAdminChangedIterator struct {
	Event *RegistryRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleAdminChanged represents a RoleAdminChanged event raised by the Registry contract.
type RegistryRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*RegistryRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleAdminChangedIterator{contract: _Registry.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *RegistryRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleAdminChanged)
				if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) ParseRoleAdminChanged(log types.Log) (*RegistryRoleAdminChanged, error) {
	event := new(RegistryRoleAdminChanged)
	if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Registry contract.
type RegistryRoleGrantedIterator struct {
	Event *RegistryRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleGranted represents a RoleGranted event raised by the Registry contract.
type RegistryRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleGrantedIterator{contract: _Registry.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *RegistryRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleGranted)
				if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleGranted(log types.Log) (*RegistryRoleGranted, error) {
	event := new(RegistryRoleGranted)
	if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Registry contract.
type RegistryRoleRevokedIterator struct {
	Event *RegistryRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleRevoked represents a RoleRevoked event raised by the Registry contract.
type RegistryRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleRevokedIterator{contract: _Registry.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *RegistryRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleRevoked)
				if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleRevoked(log types.Log) (*RegistryRoleRevoked, error) {
	event := new(RegistryRoleRevoked)
	if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendRemovedIterator is returned from FilterStorageBackendRemoved and is used to iterate over the raw logs and unpacked data for StorageBackendRemoved events raised by the Registry contract.
type RegistryStorageBackendRemovedIterator struct {
	Event *RegistryStorageBackendRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendRemoved represents a StorageBackendRemoved event raised by the Registry contract.
type RegistryStorageBackendRemoved struct {
	Location string
	Remover  common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendRemoved is a free log retrieval operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) FilterStorageBackendRemoved(opts *bind.FilterOpts) (*RegistryStorageBackendRemovedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendRemovedIterator{contract: _Registry.contract, event: "StorageBackendRemoved", logs: logs, sub: sub}, nil
}

// WatchStorageBackendRemoved is a free log subscription operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) WatchStorageBackendRemoved(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendRemoved) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendRemoved)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendRemoved is a log parse operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) ParseStorageBackendRemoved(log types.Log) (*RegistryStorageBackendRemoved, error) {
	event := new(RegistryStorageBackendRemoved)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendSetIterator is returned from FilterStorageBackendSet and is used to iterate over the raw logs and unpacked data for StorageBackendSet events raised by the Registry contract.
type RegistryStorageBackendSetIterator struct {
	Event *RegistryStorageBackendSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendSet represents a StorageBackendSet event raised by the Registry contract.
type RegistryStorageBackendSet struct {
	Location string
	Setter   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendSet is a free log retrieval operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) FilterStorageBackendSet(opts *bind.FilterOpts) (*RegistryStorageBackendSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendSetIterator{contract: _Registry.contract, event: "StorageBackendSet", logs: logs, sub: sub}, nil
}

// WatchStorageBackendSet is a free log subscription operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) WatchStorageBackendSet(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendSet)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendSet is a log parse operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) ParseStorageBackendSet(log types.Log) (*RegistryStorageBackendSet, error) {
	event := new(RegistryStorageBackendSet)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
