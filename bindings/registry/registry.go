// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AppPKI is an auto generated low-level Go binding around an user-defined struct.
type AppPKI struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}

// DCAPEvent is an auto generated low-level Go binding around an user-defined struct.
type DCAPEvent struct {
	Index        uint32
	EventType    uint32
	EventPayload []byte
	Digest       [32]byte
}

// DCAPReport is an auto generated low-level Go binding around an user-defined struct.
type DCAPReport struct {
	MrTd          []byte
	RTMRs         [4][]byte
	MrOwner       []byte
	MrConfigId    []byte
	MrConfigOwner []byte
}

// MAAReport is an auto generated low-level Go binding around an user-defined struct.
type MAAReport struct {
	PCRs [24][32]byte
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ConfigForIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DCAPIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"IdentityAllowed\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"InstanceDomainNames\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAAIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_BYTES_SIZE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PKI\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_INSTANCE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_METADATA\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_OPERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"StorageBackends\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addArtifact\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"artifactHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"app_pki\",\"inputs\":[],\"outputs\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"artifacts\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getArtifact\",\"inputs\":[{\"name\":\"artifactHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"identityConfigMap\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"m_instanceDomainNames\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"m_storageBackends\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerInstanceDomainName\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeConfigMapForIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForDCAP\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"eventLog\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForMAA\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPKI\",\"inputs\":[{\"name\":\"pki\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ArtifactAdded\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"adder\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"IdentityConfigSet\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InstanceDomainRegistered\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"registrar\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PKIUpdated\",\"inputs\":[{\"name\":\"updater\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pki\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendRemoved\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"remover\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendSet\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]}]",
	Bin: "0x608060405234801562000010575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000085575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007c9190620003be565b60405180910390fd5b62000096816200015360201b60201c565b506001600281905550620000b35f801b336200021660201b60201c565b50620000e67faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da7336200021660201b60201c565b50620001197f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e023336200021660201b60201c565b506200014c7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e07336200021660201b60201c565b50620003d9565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f6200022983836200031160201b60201c565b620003075760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620002a36200037460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506200030b565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620003a6826200037b565b9050919050565b620003b8816200039a565b82525050565b5f602082019050620003d35f830184620003ad565b92915050565b613edd80620003e75f395ff3fe608060405234801561000f575f80fd5b506004361061021a575f3560e01c806380be687511610123578063a63e3a37116100ab578063d0ab83ac1161007a578063d0ab83ac14610674578063d4f72ac114610692578063d547741f146106c2578063ed1fce63146106de578063f2fde38b146106fa5761021a565b8063a63e3a37146105e8578063a9ac54e914610618578063aaae748e14610636578063c2f38479146106545761021a565b80638da5cb5b116100f25780638da5cb5b1461054257806391d148541461056057806398a1b397146105905780639fe18d65146105ae578063a217fddf146105ca5761021a565b806380be6875146104bc5780638404c1a3146104d85780638533d8b7146104f6578063863c43d4146105125761021a565b80634c01253d116101a65780636c3e695d116101755780636c3e695d1461042c57806370c608d614610448578063715018a61461046657806373c3f1361461047057806373fe8cc4146104a05761021a565b80634c01253d1461037e57806353f24b6d146103ae5780635a69887d146103cc5780636511dbe2146103fc5761021a565b806327ae3ad9116101ed57806327ae3ad9146102ca5780632f2ff15d146102e657806336568abe1461030257806337668af51461031e5780633f3cc1c61461034e5761021a565b806301ffc9a71461021e5780631619e3451461024e5780631b0ce1c11461027e578063248a9ca31461029a575b5f80fd5b610238600480360381019061023391906121b0565b610716565b60405161024591906121f5565b60405180910390f35b6102686004803603810190610263919061229b565b61078f565b60405161027591906121f5565b60405180910390f35b610298600480360381019061029391906122d9565b610818565b005b6102b460048036038101906102af9190612317565b610875565b6040516102c19190612351565b60405180910390f35b6102e460048036038101906102df91906124a6565b610891565b005b61030060048036038101906102fb919061229b565b610907565b005b61031c6004803603810190610317919061229b565b610929565b005b61033860048036038101906103339190612317565b6109a4565b6040516103459190612567565b60405180910390f35b610368600480360381019061036391906125ba565b610aa4565b6040516103759190612637565b60405180910390f35b6103986004803603810190610393919061229b565b610b4a565b6040516103a59190612351565b60405180910390f35b6103b6610c23565b6040516103c39190612351565b60405180910390f35b6103e660048036038101906103e19190612a8a565b610c47565b6040516103f39190612351565b60405180910390f35b610416600480360381019061041191906125ba565b610f6e565b6040516104239190612637565b60405180910390f35b61044660048036038101906104419190612bb5565b611014565b005b610450611181565b60405161045d9190612cff565b60405180910390f35b61046e611255565b005b61048a60048036038101906104859190612d1f565b611268565b6040516104979190612351565b60405180910390f35b6104ba60048036038101906104b591906124a6565b611388565b005b6104d660048036038101906104d19190612d66565b611421565b005b6104e0611446565b6040516104ed9190612351565b60405180910390f35b610510600480360381019061050b9190612317565b61146a565b005b61052c60048036038101906105279190612ed6565b611489565b6040516105399190612351565b60405180910390f35b61054a61150f565b6040516105579190612f11565b60405180910390f35b61057a6004803603810190610575919061229b565b611537565b60405161058791906121f5565b60405180910390f35b61059861159a565b6040516105a59190612351565b60405180910390f35b6105c860048036038101906105c391906124a6565b6115be565b005b6105d2611715565b6040516105df9190612351565b60405180910390f35b61060260048036038101906105fd9190612317565b61171b565b60405161060f9190612567565b60405180910390f35b6106206117b6565b60405161062d9190612fcd565b60405180910390f35b61063e61197f565b60405161064b9190612ffc565b60405180910390f35b61065c611985565b60405161066b93929190613015565b60405180910390f35b61067c611b2e565b6040516106899190612cff565b60405180910390f35b6106ac60048036038101906106a79190612317565b611c02565b6040516106b99190612351565b60405180910390f35b6106dc60048036038101906106d7919061229b565b611c17565b005b6106f860048036038101906106f3919061305f565b611c39565b005b610714600480360381019061070f919061309f565b611c5c565b005b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610788575061078782611ce0565b5b9050919050565b5f6107ba7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da783611537565b6107f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f090613114565b60405180910390fd5b5f801b60095f8581526020019081526020015f20541415905092915050565b610820611d49565b8060095f8481526020019081526020015f20819055507f612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe82823360405161086993929190613132565b60405180910390a15050565b5f805f8381526020019081526020015f20600101549050919050565b610899611d49565b600781908060018154018082558091505060019003905f5260205f20015f9091909190915090816108ca9190613361565b507fd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da81336040516108fc929190613430565b60405180910390a150565b61091082610875565b61091981611dd0565b6109238383611de4565b50505050565b610931611ecd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610995576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61099f8282611ed4565b505050565b60605f60085f8481526020019081526020015f2080546109c390613194565b905011610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc906134a8565b60405180910390fd5b60085f8381526020019081526020015f208054610a2190613194565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4d90613194565b8015610a985780601f10610a6f57610100808354040283529160200191610a98565b820191905f5260205f20905b815481529060010190602001808311610a7b57829003601f168201915b50505050509050919050565b60078181548110610ab3575f80fd5b905f5260205f20015f915090508054610acb90613194565b80601f0160208091040260200160405190810160405280929190818152602001828054610af790613194565b8015610b425780601f10610b1957610100808354040283529160200191610b42565b820191905f5260205f20905b815481529060010190602001808311610b2557829003601f168201915b505050505081565b5f610b757faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da783611537565b610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab90613114565b60405180910390fd5b5f801b60095f8581526020019081526020015f205403610c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0090613510565b60405180910390fd5b60095f8481526020019081526020015f2054905092915050565b7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e0781565b5f6030835f01515114610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8690613578565b60405180910390fd5b603083602001515f60048110610ca857610ca7613596565b5b60200201515114610cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce59061360d565b60405180910390fd5b60308360200151600160048110610d0857610d07613596565b5b60200201515114610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4590613675565b60405180910390fd5b60308360200151600260048110610d6857610d67613596565b5b60200201515114610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da5906136dd565b60405180910390fd5b60308360200151600360048110610dc857610dc7613596565b5b60200201515114610e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0590613745565b60405180910390fd5b603083604001515114610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d906137ad565b60405180910390fd5b603083606001515114610e9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9590613815565b60405180910390fd5b603083608001515114610ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edd9061387d565b60405180910390fd5b3083602001515f60048110610efe57610efd613596565b5b60200201518460200151600160048110610f1b57610f1a613596565b5b60200201518560200151600260048110610f3857610f37613596565b5b6020020151604051602001610f50949392919061391a565b60405160208183030381529060405280519060200120905092915050565b60038181548110610f7d575f80fd5b905f5260205f20015f915090508054610f9590613194565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc190613194565b801561100c5780601f10610fe35761010080835404028352916020019161100c565b820191905f5260205f20905b815481529060010190602001808311610fef57829003601f168201915b505050505081565b61101c611d49565b805f015161500081511115611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d906139a5565b60405180910390fd5b8160200151615000815111156110b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a8906139a5565b60405180910390fd5b8260400151615000815111156110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f3906139a5565b60405180910390fd5b8360045f820151815f0190816111129190613a1b565b5060208201518160010190816111289190613a1b565b50604082015181600201908161113e9190613a1b565b509050507f284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb73385604051611173929190613aea565b60405180910390a150505050565b60606003805480602002602001604051908101604052809291908181526020015f905b8282101561124c578382905f5260205f200180546111c190613194565b80601f01602080910402602001604051908101604052809291908181526020018280546111ed90613194565b80156112385780601f1061120f57610100808354040283529160200191611238565b820191905f5260205f20905b81548152906001019060200180831161121b57829003601f168201915b5050505050815260200190600101906111a4565b50505050905090565b61125d611d49565b6112665f611fbd565b565b5f7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e02361129381611dd0565b82615000815111156112da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d1906139a5565b60405180910390fd5b6002846040516112ea9190613b18565b602060405180830381855afa158015611305573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906113289190613b42565b92508360085f8581526020019081526020015f2090816113489190613a1b565b507e89f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d68333604051611379929190613b6d565b60405180910390a15050919050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da76113b281611dd0565b600382908060018154018082558091505060019003905f5260205f20015f9091909190915090816113e39190613361565b507f1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa8233604051611415929190613430565b60405180910390a15050565b611429611d49565b5f6114348484610c47565b90506114408183610818565b50505050565b7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e02381565b611472611d49565b60095f8281526020019081526020015f205f905550565b5f30825f01516004601881106114a2576114a1613596565b5b6020020151835f01516009601881106114be576114bd613596565b5b6020020151845f0151600b601881106114da576114d9613596565b5b60200201516040516020016114f29493929190613bb4565b604051602081830303815290604052805190602001209050919050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da781565b6115c6611d49565b5f5b6007805490508110156116d857816040516020016115e69190613c3b565b60405160208183030381529060405280519060200120600782815481106116105761160f613596565b5b905f5260205f20016040516020016116289190613cd1565b60405160208183030381529060405280519060200120036116cb57600760016007805490506116579190613d14565b8154811061166857611667613596565b5b905f5260205f20016007828154811061168457611683613596565b5b905f5260205f200190816116989190613d6e565b5060078054806116ab576116aa613e53565b5b600190038181905f5260205f20015f6116c491906120d1565b90556116d8565b80806001019150506115c8565b507ff633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f813360405161170a929190613430565b60405180910390a150565b5f801b81565b6008602052805f5260405f205f91509050805461173790613194565b80601f016020809104026020016040519081016040528092919081815260200182805461176390613194565b80156117ae5780601f10611785576101008083540402835291602001916117ae565b820191905f5260205f20905b81548152906001019060200180831161179157829003601f168201915b505050505081565b6117be61210e565b60046040518060600160405290815f820180546117da90613194565b80601f016020809104026020016040519081016040528092919081815260200182805461180690613194565b80156118515780601f1061182857610100808354040283529160200191611851565b820191905f5260205f20905b81548152906001019060200180831161183457829003601f168201915b5050505050815260200160018201805461186a90613194565b80601f016020809104026020016040519081016040528092919081815260200182805461189690613194565b80156118e15780601f106118b8576101008083540402835291602001916118e1565b820191905f5260205f20905b8154815290600101906020018083116118c457829003601f168201915b505050505081526020016002820180546118fa90613194565b80601f016020809104026020016040519081016040528092919081815260200182805461192690613194565b80156119715780601f1061194857610100808354040283529160200191611971565b820191905f5260205f20905b81548152906001019060200180831161195457829003601f168201915b505050505081525050905090565b61500081565b6004805f01805461199590613194565b80601f01602080910402602001604051908101604052809291908181526020018280546119c190613194565b8015611a0c5780601f106119e357610100808354040283529160200191611a0c565b820191905f5260205f20905b8154815290600101906020018083116119ef57829003601f168201915b505050505090806001018054611a2190613194565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4d90613194565b8015611a985780601f10611a6f57610100808354040283529160200191611a98565b820191905f5260205f20905b815481529060010190602001808311611a7b57829003601f168201915b505050505090806002018054611aad90613194565b80601f0160208091040260200160405190810160405280929190818152602001828054611ad990613194565b8015611b245780601f10611afb57610100808354040283529160200191611b24565b820191905f5260205f20905b815481529060010190602001808311611b0757829003601f168201915b5050505050905083565b60606007805480602002602001604051908101604052809291908181526020015f905b82821015611bf9578382905f5260205f20018054611b6e90613194565b80601f0160208091040260200160405190810160405280929190818152602001828054611b9a90613194565b8015611be55780601f10611bbc57610100808354040283529160200191611be5565b820191905f5260205f20905b815481529060010190602001808311611bc857829003601f168201915b505050505081526020019060010190611b51565b50505050905090565b6009602052805f5260405f205f915090505481565b611c2082610875565b611c2981611dd0565b611c338383611ed4565b50505050565b611c41611d49565b5f611c4b83611489565b9050611c578183610818565b505050565b611c64611d49565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611cd4575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611ccb9190612f11565b60405180910390fd5b611cdd81611fbd565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611d51611ecd565b73ffffffffffffffffffffffffffffffffffffffff16611d6f61150f565b73ffffffffffffffffffffffffffffffffffffffff1614611dce57611d92611ecd565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611dc59190612f11565b60405180910390fd5b565b611de181611ddc611ecd565b612080565b50565b5f611def8383611537565b611ec35760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611e60611ecd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611ec7565b5f90505b92915050565b5f33905090565b5f611edf8383611537565b15611fb3575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611f50611ecd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611fb7565b5f90505b92915050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61208a8282611537565b6120cd5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016120c4929190613e80565b60405180910390fd5b5050565b5080546120dd90613194565b5f825580601f106120ee575061210b565b601f0160209004905f5260205f209081019061210a919061212f565b5b50565b60405180606001604052806060815260200160608152602001606081525090565b5b80821115612146575f815f905550600101612130565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61218f8161215b565b8114612199575f80fd5b50565b5f813590506121aa81612186565b92915050565b5f602082840312156121c5576121c4612153565b5b5f6121d28482850161219c565b91505092915050565b5f8115159050919050565b6121ef816121db565b82525050565b5f6020820190506122085f8301846121e6565b92915050565b5f819050919050565b6122208161220e565b811461222a575f80fd5b50565b5f8135905061223b81612217565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61226a82612241565b9050919050565b61227a81612260565b8114612284575f80fd5b50565b5f8135905061229581612271565b92915050565b5f80604083850312156122b1576122b0612153565b5b5f6122be8582860161222d565b92505060206122cf85828601612287565b9150509250929050565b5f80604083850312156122ef576122ee612153565b5b5f6122fc8582860161222d565b925050602061230d8582860161222d565b9150509250929050565b5f6020828403121561232c5761232b612153565b5b5f6123398482850161222d565b91505092915050565b61234b8161220e565b82525050565b5f6020820190506123645f830184612342565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6123b882612372565b810181811067ffffffffffffffff821117156123d7576123d6612382565b5b80604052505050565b5f6123e961214a565b90506123f582826123af565b919050565b5f67ffffffffffffffff82111561241457612413612382565b5b61241d82612372565b9050602081019050919050565b828183375f83830152505050565b5f61244a612445846123fa565b6123e0565b9050828152602081018484840111156124665761246561236e565b5b61247184828561242a565b509392505050565b5f82601f83011261248d5761248c61236a565b5b813561249d848260208601612438565b91505092915050565b5f602082840312156124bb576124ba612153565b5b5f82013567ffffffffffffffff8111156124d8576124d7612157565b5b6124e484828501612479565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612524578082015181840152602081019050612509565b5f8484015250505050565b5f612539826124ed565b61254381856124f7565b9350612553818560208601612507565b61255c81612372565b840191505092915050565b5f6020820190508181035f83015261257f818461252f565b905092915050565b5f819050919050565b61259981612587565b81146125a3575f80fd5b50565b5f813590506125b481612590565b92915050565b5f602082840312156125cf576125ce612153565b5b5f6125dc848285016125a6565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f612609826125e5565b61261381856125ef565b9350612623818560208601612507565b61262c81612372565b840191505092915050565b5f6020820190508181035f83015261264f81846125ff565b905092915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff82111561267957612678612382565b5b61268282612372565b9050602081019050919050565b5f6126a161269c8461265f565b6123e0565b9050828152602081018484840111156126bd576126bc61236e565b5b6126c884828561242a565b509392505050565b5f82601f8301126126e4576126e361236a565b5b81356126f484826020860161268f565b91505092915050565b5f67ffffffffffffffff82111561271757612716612382565b5b602082029050919050565b5f80fd5b5f612738612733846126fd565b6123e0565b9050806020840283018581111561275257612751612722565b5b835b8181101561279957803567ffffffffffffffff8111156127775761277661236a565b5b80860161278489826126d0565b85526020850194505050602081019050612754565b5050509392505050565b5f82601f8301126127b7576127b661236a565b5b60046127c4848285612726565b91505092915050565b5f60a082840312156127e2576127e1612657565b5b6127ec60a06123e0565b90505f82013567ffffffffffffffff81111561280b5761280a61265b565b5b612817848285016126d0565b5f83015250602082013567ffffffffffffffff81111561283a5761283961265b565b5b612846848285016127a3565b602083015250604082013567ffffffffffffffff81111561286a5761286961265b565b5b612876848285016126d0565b604083015250606082013567ffffffffffffffff81111561289a5761289961265b565b5b6128a6848285016126d0565b606083015250608082013567ffffffffffffffff8111156128ca576128c961265b565b5b6128d6848285016126d0565b60808301525092915050565b5f67ffffffffffffffff8211156128fc576128fb612382565b5b602082029050602081019050919050565b5f63ffffffff82169050919050565b6129258161290d565b811461292f575f80fd5b50565b5f813590506129408161291c565b92915050565b5f6080828403121561295b5761295a612657565b5b61296560806123e0565b90505f61297484828501612932565b5f83015250602061298784828501612932565b602083015250604082013567ffffffffffffffff8111156129ab576129aa61265b565b5b6129b7848285016126d0565b60408301525060606129cb8482850161222d565b60608301525092915050565b5f6129e96129e4846128e2565b6123e0565b90508083825260208201905060208402830185811115612a0c57612a0b612722565b5b835b81811015612a5357803567ffffffffffffffff811115612a3157612a3061236a565b5b808601612a3e8982612946565b85526020850194505050602081019050612a0e565b5050509392505050565b5f82601f830112612a7157612a7061236a565b5b8135612a818482602086016129d7565b91505092915050565b5f8060408385031215612aa057612a9f612153565b5b5f83013567ffffffffffffffff811115612abd57612abc612157565b5b612ac9858286016127cd565b925050602083013567ffffffffffffffff811115612aea57612ae9612157565b5b612af685828601612a5d565b9150509250929050565b5f60608284031215612b1557612b14612657565b5b612b1f60606123e0565b90505f82013567ffffffffffffffff811115612b3e57612b3d61265b565b5b612b4a848285016126d0565b5f83015250602082013567ffffffffffffffff811115612b6d57612b6c61265b565b5b612b79848285016126d0565b602083015250604082013567ffffffffffffffff811115612b9d57612b9c61265b565b5b612ba9848285016126d0565b60408301525092915050565b5f60208284031215612bca57612bc9612153565b5b5f82013567ffffffffffffffff811115612be757612be6612157565b5b612bf384828501612b00565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f612c3f826125e5565b612c498185612c25565b9350612c59818560208601612507565b612c6281612372565b840191505092915050565b5f612c788383612c35565b905092915050565b5f602082019050919050565b5f612c9682612bfc565b612ca08185612c06565b935083602082028501612cb285612c16565b805f5b85811015612ced5784840389528151612cce8582612c6d565b9450612cd983612c80565b925060208a01995050600181019050612cb5565b50829750879550505050505092915050565b5f6020820190508181035f830152612d178184612c8c565b905092915050565b5f60208284031215612d3457612d33612153565b5b5f82013567ffffffffffffffff811115612d5157612d50612157565b5b612d5d848285016126d0565b91505092915050565b5f805f60608486031215612d7d57612d7c612153565b5b5f84013567ffffffffffffffff811115612d9a57612d99612157565b5b612da6868287016127cd565b935050602084013567ffffffffffffffff811115612dc757612dc6612157565b5b612dd386828701612a5d565b9250506040612de48682870161222d565b9150509250925092565b5f67ffffffffffffffff821115612e0857612e07612382565b5b602082029050919050565b5f612e25612e2084612dee565b6123e0565b90508060208402830185811115612e3f57612e3e612722565b5b835b81811015612e685780612e54888261222d565b845260208401935050602081019050612e41565b5050509392505050565b5f82601f830112612e8657612e8561236a565b5b6018612e93848285612e13565b91505092915050565b5f6103008284031215612eb257612eb1612657565b5b612ebc60206123e0565b90505f612ecb84828501612e72565b5f8301525092915050565b5f6103008284031215612eec57612eeb612153565b5b5f612ef984828501612e9c565b91505092915050565b612f0b81612260565b82525050565b5f602082019050612f245f830184612f02565b92915050565b5f82825260208201905092915050565b5f612f44826124ed565b612f4e8185612f2a565b9350612f5e818560208601612507565b612f6781612372565b840191505092915050565b5f606083015f8301518482035f860152612f8c8282612f3a565b91505060208301518482036020860152612fa68282612f3a565b91505060408301518482036040860152612fc08282612f3a565b9150508091505092915050565b5f6020820190508181035f830152612fe58184612f72565b905092915050565b612ff681612587565b82525050565b5f60208201905061300f5f830184612fed565b92915050565b5f6060820190508181035f83015261302d818661252f565b90508181036020830152613041818561252f565b90508181036040830152613055818461252f565b9050949350505050565b5f80610320838503121561307657613075612153565b5b5f61308385828601612e9c565b9250506103006130958582860161222d565b9150509250929050565b5f602082840312156130b4576130b3612153565b5b5f6130c184828501612287565b91505092915050565b7f4f70657261746f72206e6f7420617574686f72697a65640000000000000000005f82015250565b5f6130fe6017836125ef565b9150613109826130ca565b602082019050919050565b5f6020820190508181035f83015261312b816130f2565b9050919050565b5f6060820190506131455f830186612342565b6131526020830185612342565b61315f6040830184612f02565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806131ab57607f821691505b6020821081036131be576131bd613167565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026132207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826131e5565b61322a86836131e5565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61326561326061325b84612587565b613242565b612587565b9050919050565b5f819050919050565b61327e8361324b565b61329261328a8261326c565b8484546131f1565b825550505050565b5f90565b6132a661329a565b6132b1818484613275565b505050565b5b818110156132d4576132c95f8261329e565b6001810190506132b7565b5050565b601f821115613319576132ea816131c4565b6132f3846131d6565b81016020851015613302578190505b61331661330e856131d6565b8301826132b6565b50505b505050565b5f82821c905092915050565b5f6133395f198460080261331e565b1980831691505092915050565b5f613351838361332a565b9150826002028217905092915050565b61336a826125e5565b67ffffffffffffffff81111561338357613382612382565b5b61338d8254613194565b6133988282856132d8565b5f60209050601f8311600181146133c9575f84156133b7578287015190505b6133c18582613346565b865550613428565b601f1984166133d7866131c4565b5f5b828110156133fe578489015182556001820191506020850194506020810190506133d9565b8683101561341b5784890151613417601f89168261332a565b8355505b6001600288020188555050505b505050505050565b5f6040820190508181035f83015261344881856125ff565b90506134576020830184612f02565b9392505050565b7f417274696661637420646f6573206e6f742065786973740000000000000000005f82015250565b5f6134926017836125ef565b915061349d8261345e565b602082019050919050565b5f6020820190508181035f8301526134bf81613486565b9050919050565b7f436f6e666967206e6f74206d61707065640000000000000000000000000000005f82015250565b5f6134fa6011836125ef565b9150613505826134c6565b602082019050919050565b5f6020820190508181035f830152613527816134ee565b9050919050565b7f696e636f7272656374206d727464206c656e67746800000000000000000000005f82015250565b5f6135626015836125ef565b915061356d8261352e565b602082019050919050565b5f6020820190508181035f83015261358f81613556565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f696e636f72726563742052544d525b305d206c656e67746800000000000000005f82015250565b5f6135f76018836125ef565b9150613602826135c3565b602082019050919050565b5f6020820190508181035f830152613624816135eb565b9050919050565b7f696e636f72726563742052544d525b315d206c656e67746800000000000000005f82015250565b5f61365f6018836125ef565b915061366a8261362b565b602082019050919050565b5f6020820190508181035f83015261368c81613653565b9050919050565b7f696e636f72726563742052544d525b325d206c656e67746800000000000000005f82015250565b5f6136c76018836125ef565b91506136d282613693565b602082019050919050565b5f6020820190508181035f8301526136f4816136bb565b9050919050565b7f696e636f72726563742052544d525b335d206c656e67746800000000000000005f82015250565b5f61372f6018836125ef565b915061373a826136fb565b602082019050919050565b5f6020820190508181035f83015261375c81613723565b9050919050565b7f696e636f7272656374206d724f776e6572206c656e67746800000000000000005f82015250565b5f6137976018836125ef565b91506137a282613763565b602082019050919050565b5f6020820190508181035f8301526137c48161378b565b9050919050565b7f696e636f7272656374206d72436f6e6669674964206c656e67746800000000005f82015250565b5f6137ff601b836125ef565b915061380a826137cb565b602082019050919050565b5f6020820190508181035f83015261382c816137f3565b9050919050565b7f696e636f7272656374206d72436f6e6669674f776e6572206c656e67746800005f82015250565b5f613867601e836125ef565b915061387282613833565b602082019050919050565b5f6020820190508181035f8301526138948161385b565b9050919050565b5f8160601b9050919050565b5f6138b18261389b565b9050919050565b5f6138c2826138a7565b9050919050565b6138da6138d582612260565b6138b8565b82525050565b5f81905092915050565b5f6138f4826124ed565b6138fe81856138e0565b935061390e818560208601612507565b80840191505092915050565b5f61392582876138c9565b60148201915061393582866138ea565b915061394182856138ea565b915061394d82846138ea565b915081905095945050505050565b7f446174612073697a652065786365656473206c696d69740000000000000000005f82015250565b5f61398f6017836125ef565b915061399a8261395b565b602082019050919050565b5f6020820190508181035f8301526139bc81613983565b9050919050565b5f819050815f5260205f209050919050565b601f821115613a16576139e7816139c3565b6139f0846131d6565b810160208510156139ff578190505b613a13613a0b856131d6565b8301826132b6565b50505b505050565b613a24826124ed565b67ffffffffffffffff811115613a3d57613a3c612382565b5b613a478254613194565b613a528282856139d5565b5f60209050601f831160018114613a83575f8415613a71578287015190505b613a7b8582613346565b865550613ae2565b601f198416613a91866139c3565b5f5b82811015613ab857848901518255600182019150602085019450602081019050613a93565b86831015613ad55784890151613ad1601f89168261332a565b8355505b6001600288020188555050505b505050505050565b5f604082019050613afd5f830185612f02565b8181036020830152613b0f8184612f72565b90509392505050565b5f613b2382846138ea565b915081905092915050565b5f81519050613b3c81612217565b92915050565b5f60208284031215613b5757613b56612153565b5b5f613b6484828501613b2e565b91505092915050565b5f604082019050613b805f830185612342565b613b8d6020830184612f02565b9392505050565b5f819050919050565b613bae613ba98261220e565b613b94565b82525050565b5f613bbf82876138c9565b601482019150613bcf8286613b9d565b602082019150613bdf8285613b9d565b602082019150613bef8284613b9d565b60208201915081905095945050505050565b5f81905092915050565b5f613c15826125e5565b613c1f8185613c01565b9350613c2f818560208601612507565b80840191505092915050565b5f613c468284613c0b565b915081905092915050565b5f8154613c5d81613194565b613c678186613c01565b9450600182165f8114613c815760018114613c9657613cc8565b60ff1983168652811515820286019350613cc8565b613c9f856131c4565b5f5b83811015613cc057815481890152600182019150602081019050613ca1565b838801955050505b50505092915050565b5f613cdc8284613c51565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613d1e82612587565b9150613d2983612587565b9250828203905081811115613d4157613d40613ce7565b5b92915050565b5f81549050613d5581613194565b9050919050565b5f819050815f5260205f209050919050565b818103613d7c575050613e51565b613d8582613d47565b67ffffffffffffffff811115613d9e57613d9d612382565b5b613da88254613194565b613db38282856132d8565b5f601f831160018114613de0575f8415613dce578287015490505b613dd88582613346565b865550613e4a565b601f198416613dee87613d5c565b9650613df9866131c4565b5f5b82811015613e2057848901548255600182019150600185019450602081019050613dfb565b86831015613e3d5784890154613e39601f89168261332a565b8355505b6001600288020188555050505b5050505050505b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f604082019050613e935f830185612f02565b613ea06020830184612342565b939250505056fea2646970667358221220d54ead13a1da2000f7320fa2bb2ccb535bde1cad360ef9935b6b61d3366126f764736f6c63430008170033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// ConfigForIdentity is a free data retrieval call binding the contract method 0x4c01253d.
//
// Solidity: function ConfigForIdentity(bytes32 identity, address operator) view returns(bytes32)
func (_Registry *RegistryCaller) ConfigForIdentity(opts *bind.CallOpts, identity [32]byte, operator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ConfigForIdentity", identity, operator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ConfigForIdentity is a free data retrieval call binding the contract method 0x4c01253d.
//
// Solidity: function ConfigForIdentity(bytes32 identity, address operator) view returns(bytes32)
func (_Registry *RegistrySession) ConfigForIdentity(identity [32]byte, operator common.Address) ([32]byte, error) {
	return _Registry.Contract.ConfigForIdentity(&_Registry.CallOpts, identity, operator)
}

// ConfigForIdentity is a free data retrieval call binding the contract method 0x4c01253d.
//
// Solidity: function ConfigForIdentity(bytes32 identity, address operator) view returns(bytes32)
func (_Registry *RegistryCallerSession) ConfigForIdentity(identity [32]byte, operator common.Address) ([32]byte, error) {
	return _Registry.Contract.ConfigForIdentity(&_Registry.CallOpts, identity, operator)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCaller) DCAPIdentity(opts *bind.CallOpts, report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DCAPIdentity", report, arg1)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistrySession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistrySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// IdentityAllowed is a free data retrieval call binding the contract method 0x1619e345.
//
// Solidity: function IdentityAllowed(bytes32 identity, address operator) view returns(bool)
func (_Registry *RegistryCaller) IdentityAllowed(opts *bind.CallOpts, identity [32]byte, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "IdentityAllowed", identity, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IdentityAllowed is a free data retrieval call binding the contract method 0x1619e345.
//
// Solidity: function IdentityAllowed(bytes32 identity, address operator) view returns(bool)
func (_Registry *RegistrySession) IdentityAllowed(identity [32]byte, operator common.Address) (bool, error) {
	return _Registry.Contract.IdentityAllowed(&_Registry.CallOpts, identity, operator)
}

// IdentityAllowed is a free data retrieval call binding the contract method 0x1619e345.
//
// Solidity: function IdentityAllowed(bytes32 identity, address operator) view returns(bool)
func (_Registry *RegistryCallerSession) IdentityAllowed(identity [32]byte, operator common.Address) (bool, error) {
	return _Registry.Contract.IdentityAllowed(&_Registry.CallOpts, identity, operator)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x70c608d6.
//
// Solidity: function InstanceDomainNames() view returns(string[])
func (_Registry *RegistryCaller) InstanceDomainNames(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "InstanceDomainNames")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x70c608d6.
//
// Solidity: function InstanceDomainNames() view returns(string[])
func (_Registry *RegistrySession) InstanceDomainNames() ([]string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x70c608d6.
//
// Solidity: function InstanceDomainNames() view returns(string[])
func (_Registry *RegistryCallerSession) InstanceDomainNames() ([]string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCaller) MAAIdentity(opts *bind.CallOpts, report MAAReport) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAAIdentity", report)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistrySession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCaller) MAXBYTESSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAX_BYTES_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistrySession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCallerSession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// PKI is a free data retrieval call binding the contract method 0xa9ac54e9.
//
// Solidity: function PKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistryCaller) PKI(opts *bind.CallOpts) (AppPKI, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "PKI")

	if err != nil {
		return *new(AppPKI), err
	}

	out0 := *abi.ConvertType(out[0], new(AppPKI)).(*AppPKI)

	return out0, err

}

// PKI is a free data retrieval call binding the contract method 0xa9ac54e9.
//
// Solidity: function PKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistrySession) PKI() (AppPKI, error) {
	return _Registry.Contract.PKI(&_Registry.CallOpts)
}

// PKI is a free data retrieval call binding the contract method 0xa9ac54e9.
//
// Solidity: function PKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistryCallerSession) PKI() (AppPKI, error) {
	return _Registry.Contract.PKI(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEINSTANCE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_INSTANCE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistrySession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEMETADATA(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_METADATA")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistrySession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEOPERATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_OPERATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistrySession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// StorageBackends is a free data retrieval call binding the contract method 0xd0ab83ac.
//
// Solidity: function StorageBackends() view returns(string[])
func (_Registry *RegistryCaller) StorageBackends(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "StorageBackends")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// StorageBackends is a free data retrieval call binding the contract method 0xd0ab83ac.
//
// Solidity: function StorageBackends() view returns(string[])
func (_Registry *RegistrySession) StorageBackends() ([]string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts)
}

// StorageBackends is a free data retrieval call binding the contract method 0xd0ab83ac.
//
// Solidity: function StorageBackends() view returns(string[])
func (_Registry *RegistryCallerSession) StorageBackends() ([]string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCaller) AppPki(opts *bind.CallOpts) (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "app_pki")

	outstruct := new(struct {
		Ca          []byte
		Pubkey      []byte
		Attestation []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Ca = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Pubkey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Attestation = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistrySession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCallerSession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistryCaller) Artifacts(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "artifacts", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistrySession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Artifacts(&_Registry.CallOpts, arg0)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistryCallerSession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Artifacts(&_Registry.CallOpts, arg0)
}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistryCaller) GetArtifact(opts *bind.CallOpts, artifactHash [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getArtifact", artifactHash)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistrySession) GetArtifact(artifactHash [32]byte) ([]byte, error) {
	return _Registry.Contract.GetArtifact(&_Registry.CallOpts, artifactHash)
}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistryCallerSession) GetArtifact(artifactHash [32]byte) ([]byte, error) {
	return _Registry.Contract.GetArtifact(&_Registry.CallOpts, artifactHash)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistrySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistrySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCaller) IdentityConfigMap(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "identityConfigMap", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistrySession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCallerSession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// MInstanceDomainNames is a free data retrieval call binding the contract method 0x6511dbe2.
//
// Solidity: function m_instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCaller) MInstanceDomainNames(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "m_instanceDomainNames", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MInstanceDomainNames is a free data retrieval call binding the contract method 0x6511dbe2.
//
// Solidity: function m_instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistrySession) MInstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.MInstanceDomainNames(&_Registry.CallOpts, arg0)
}

// MInstanceDomainNames is a free data retrieval call binding the contract method 0x6511dbe2.
//
// Solidity: function m_instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) MInstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.MInstanceDomainNames(&_Registry.CallOpts, arg0)
}

// MStorageBackends is a free data retrieval call binding the contract method 0x3f3cc1c6.
//
// Solidity: function m_storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCaller) MStorageBackends(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "m_storageBackends", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MStorageBackends is a free data retrieval call binding the contract method 0x3f3cc1c6.
//
// Solidity: function m_storageBackends(uint256 ) view returns(string)
func (_Registry *RegistrySession) MStorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.MStorageBackends(&_Registry.CallOpts, arg0)
}

// MStorageBackends is a free data retrieval call binding the contract method 0x3f3cc1c6.
//
// Solidity: function m_storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) MStorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.MStorageBackends(&_Registry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistrySession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCallerSession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistryTransactor) AddArtifact(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addArtifact", data)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistrySession) AddArtifact(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddArtifact(&_Registry.TransactOpts, data)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistryTransactorSession) AddArtifact(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddArtifact(&_Registry.TransactOpts, data)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactor) RegisterInstanceDomainName(opts *bind.TransactOpts, domain string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerInstanceDomainName", domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistrySession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactorSession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactor) RemoveConfigMapForIdentity(opts *bind.TransactOpts, identity [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeConfigMapForIdentity", identity)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistrySession) RemoveConfigMapForIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveConfigMapForIdentity(&_Registry.TransactOpts, identity)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactorSession) RemoveConfigMapForIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveConfigMapForIdentity(&_Registry.TransactOpts, identity)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) RemoveStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeStorageBackend", backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistrySession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0x80be6875.
//
// Solidity: function setConfigForDCAP((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForDCAP(opts *bind.TransactOpts, report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForDCAP", report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0x80be6875.
//
// Solidity: function setConfigForDCAP((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForDCAP(report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0x80be6875.
//
// Solidity: function setConfigForDCAP((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForDCAP(report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForIdentity is a paid mutator transaction binding the contract method 0x1b0ce1c1.
//
// Solidity: function setConfigForIdentity(bytes32 identity, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForIdentity(opts *bind.TransactOpts, identity [32]byte, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForIdentity", identity, configHash)
}

// SetConfigForIdentity is a paid mutator transaction binding the contract method 0x1b0ce1c1.
//
// Solidity: function setConfigForIdentity(bytes32 identity, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForIdentity(identity [32]byte, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForIdentity(&_Registry.TransactOpts, identity, configHash)
}

// SetConfigForIdentity is a paid mutator transaction binding the contract method 0x1b0ce1c1.
//
// Solidity: function setConfigForIdentity(bytes32 identity, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForIdentity(identity [32]byte, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForIdentity(&_Registry.TransactOpts, identity, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForMAA(opts *bind.TransactOpts, report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForMAA", report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForMAA(report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForMAA(report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactor) SetPKI(opts *bind.TransactOpts, pki AppPKI) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setPKI", pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistrySession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactorSession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) SetStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setStorageBackend", backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// RegistryArtifactAddedIterator is returned from FilterArtifactAdded and is used to iterate over the raw logs and unpacked data for ArtifactAdded events raised by the Registry contract.
type RegistryArtifactAddedIterator struct {
	Event *RegistryArtifactAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryArtifactAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryArtifactAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryArtifactAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryArtifactAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryArtifactAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryArtifactAdded represents a ArtifactAdded event raised by the Registry contract.
type RegistryArtifactAdded struct {
	ConfigHash [32]byte
	Adder      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterArtifactAdded is a free log retrieval operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) FilterArtifactAdded(opts *bind.FilterOpts) (*RegistryArtifactAddedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return &RegistryArtifactAddedIterator{contract: _Registry.contract, event: "ArtifactAdded", logs: logs, sub: sub}, nil
}

// WatchArtifactAdded is a free log subscription operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) WatchArtifactAdded(opts *bind.WatchOpts, sink chan<- *RegistryArtifactAdded) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryArtifactAdded)
				if err := _Registry.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseArtifactAdded is a log parse operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) ParseArtifactAdded(log types.Log) (*RegistryArtifactAdded, error) {
	event := new(RegistryArtifactAdded)
	if err := _Registry.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryIdentityConfigSetIterator is returned from FilterIdentityConfigSet and is used to iterate over the raw logs and unpacked data for IdentityConfigSet events raised by the Registry contract.
type RegistryIdentityConfigSetIterator struct {
	Event *RegistryIdentityConfigSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryIdentityConfigSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryIdentityConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryIdentityConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryIdentityConfigSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryIdentityConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryIdentityConfigSet represents a IdentityConfigSet event raised by the Registry contract.
type RegistryIdentityConfigSet struct {
	Identity   [32]byte
	ConfigHash [32]byte
	Setter     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterIdentityConfigSet is a free log retrieval operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) FilterIdentityConfigSet(opts *bind.FilterOpts) (*RegistryIdentityConfigSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return &RegistryIdentityConfigSetIterator{contract: _Registry.contract, event: "IdentityConfigSet", logs: logs, sub: sub}, nil
}

// WatchIdentityConfigSet is a free log subscription operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) WatchIdentityConfigSet(opts *bind.WatchOpts, sink chan<- *RegistryIdentityConfigSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryIdentityConfigSet)
				if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIdentityConfigSet is a log parse operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) ParseIdentityConfigSet(log types.Log) (*RegistryIdentityConfigSet, error) {
	event := new(RegistryIdentityConfigSet)
	if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryInstanceDomainRegisteredIterator is returned from FilterInstanceDomainRegistered and is used to iterate over the raw logs and unpacked data for InstanceDomainRegistered events raised by the Registry contract.
type RegistryInstanceDomainRegisteredIterator struct {
	Event *RegistryInstanceDomainRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryInstanceDomainRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryInstanceDomainRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryInstanceDomainRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryInstanceDomainRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryInstanceDomainRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryInstanceDomainRegistered represents a InstanceDomainRegistered event raised by the Registry contract.
type RegistryInstanceDomainRegistered struct {
	Domain    string
	Registrar common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInstanceDomainRegistered is a free log retrieval operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) FilterInstanceDomainRegistered(opts *bind.FilterOpts) (*RegistryInstanceDomainRegisteredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return &RegistryInstanceDomainRegisteredIterator{contract: _Registry.contract, event: "InstanceDomainRegistered", logs: logs, sub: sub}, nil
}

// WatchInstanceDomainRegistered is a free log subscription operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) WatchInstanceDomainRegistered(opts *bind.WatchOpts, sink chan<- *RegistryInstanceDomainRegistered) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryInstanceDomainRegistered)
				if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstanceDomainRegistered is a log parse operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) ParseInstanceDomainRegistered(log types.Log) (*RegistryInstanceDomainRegistered, error) {
	event := new(RegistryInstanceDomainRegistered)
	if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Registry contract.
type RegistryOwnershipTransferredIterator struct {
	Event *RegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipTransferred represents a OwnershipTransferred event raised by the Registry contract.
type RegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipTransferredIterator{contract: _Registry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipTransferred)
				if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) ParseOwnershipTransferred(log types.Log) (*RegistryOwnershipTransferred, error) {
	event := new(RegistryOwnershipTransferred)
	if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryPKIUpdatedIterator is returned from FilterPKIUpdated and is used to iterate over the raw logs and unpacked data for PKIUpdated events raised by the Registry contract.
type RegistryPKIUpdatedIterator struct {
	Event *RegistryPKIUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryPKIUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryPKIUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryPKIUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryPKIUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryPKIUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryPKIUpdated represents a PKIUpdated event raised by the Registry contract.
type RegistryPKIUpdated struct {
	Updater common.Address
	Pki     AppPKI
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPKIUpdated is a free log retrieval operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) FilterPKIUpdated(opts *bind.FilterOpts) (*RegistryPKIUpdatedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return &RegistryPKIUpdatedIterator{contract: _Registry.contract, event: "PKIUpdated", logs: logs, sub: sub}, nil
}

// WatchPKIUpdated is a free log subscription operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) WatchPKIUpdated(opts *bind.WatchOpts, sink chan<- *RegistryPKIUpdated) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryPKIUpdated)
				if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePKIUpdated is a log parse operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) ParsePKIUpdated(log types.Log) (*RegistryPKIUpdated, error) {
	event := new(RegistryPKIUpdated)
	if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Registry contract.
type RegistryRoleAdminChangedIterator struct {
	Event *RegistryRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleAdminChanged represents a RoleAdminChanged event raised by the Registry contract.
type RegistryRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*RegistryRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleAdminChangedIterator{contract: _Registry.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *RegistryRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleAdminChanged)
				if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) ParseRoleAdminChanged(log types.Log) (*RegistryRoleAdminChanged, error) {
	event := new(RegistryRoleAdminChanged)
	if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Registry contract.
type RegistryRoleGrantedIterator struct {
	Event *RegistryRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleGranted represents a RoleGranted event raised by the Registry contract.
type RegistryRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleGrantedIterator{contract: _Registry.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *RegistryRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleGranted)
				if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleGranted(log types.Log) (*RegistryRoleGranted, error) {
	event := new(RegistryRoleGranted)
	if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Registry contract.
type RegistryRoleRevokedIterator struct {
	Event *RegistryRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleRevoked represents a RoleRevoked event raised by the Registry contract.
type RegistryRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleRevokedIterator{contract: _Registry.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *RegistryRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleRevoked)
				if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleRevoked(log types.Log) (*RegistryRoleRevoked, error) {
	event := new(RegistryRoleRevoked)
	if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendRemovedIterator is returned from FilterStorageBackendRemoved and is used to iterate over the raw logs and unpacked data for StorageBackendRemoved events raised by the Registry contract.
type RegistryStorageBackendRemovedIterator struct {
	Event *RegistryStorageBackendRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendRemoved represents a StorageBackendRemoved event raised by the Registry contract.
type RegistryStorageBackendRemoved struct {
	Location string
	Remover  common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendRemoved is a free log retrieval operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) FilterStorageBackendRemoved(opts *bind.FilterOpts) (*RegistryStorageBackendRemovedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendRemovedIterator{contract: _Registry.contract, event: "StorageBackendRemoved", logs: logs, sub: sub}, nil
}

// WatchStorageBackendRemoved is a free log subscription operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) WatchStorageBackendRemoved(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendRemoved) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendRemoved)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendRemoved is a log parse operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) ParseStorageBackendRemoved(log types.Log) (*RegistryStorageBackendRemoved, error) {
	event := new(RegistryStorageBackendRemoved)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendSetIterator is returned from FilterStorageBackendSet and is used to iterate over the raw logs and unpacked data for StorageBackendSet events raised by the Registry contract.
type RegistryStorageBackendSetIterator struct {
	Event *RegistryStorageBackendSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendSet represents a StorageBackendSet event raised by the Registry contract.
type RegistryStorageBackendSet struct {
	Location string
	Setter   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendSet is a free log retrieval operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) FilterStorageBackendSet(opts *bind.FilterOpts) (*RegistryStorageBackendSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendSetIterator{contract: _Registry.contract, event: "StorageBackendSet", logs: logs, sub: sub}, nil
}

// WatchStorageBackendSet is a free log subscription operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) WatchStorageBackendSet(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendSet)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendSet is a log parse operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) ParseStorageBackendSet(log types.Log) (*RegistryStorageBackendSet, error) {
	event := new(RegistryStorageBackendSet)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
