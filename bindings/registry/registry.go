// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AppPKI is an auto generated low-level Go binding around an user-defined struct.
type AppPKI struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}

// DCAPEvent is an auto generated low-level Go binding around an user-defined struct.
type DCAPEvent struct {
	Index        uint32
	EventType    uint32
	EventPayload []byte
	Digest       [32]byte
}

// DCAPReport is an auto generated low-level Go binding around an user-defined struct.
type DCAPReport struct {
	MrTd          []byte
	RTMRs         [4][]byte
	MrOwner       []byte
	MrConfigId    []byte
	MrConfigOwner []byte
}

// MAAReport is an auto generated low-level Go binding around an user-defined struct.
type MAAReport struct {
	PCRs [24][32]byte
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DCAPIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAAIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_BYTES_SIZE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_INSTANCE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_METADATA\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_OPERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addArtifact\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"artifactHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allInstanceDomainNames\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allStorageBackends\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"app_pki\",\"inputs\":[],\"outputs\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"artifacts\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getArtifact\",\"inputs\":[{\"name\":\"artifactHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getConfigForIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPKI\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"identityConfigMap\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"instanceDomainNames\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerInstanceDomainName\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeConfigMapForIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForDCAP\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"eventLog\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForMAA\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPKI\",\"inputs\":[{\"name\":\"pki\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"storageBackends\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ArtifactAdded\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"adder\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"IdentityConfigSet\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InstanceDomainRegistered\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"registrar\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PKIUpdated\",\"inputs\":[{\"name\":\"updater\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pki\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendRemoved\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"remover\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendSet\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]}]",
	Bin: "0x608060405234801562000010575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000085575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007c9190620003be565b60405180910390fd5b62000096816200015360201b60201c565b506001600281905550620000b35f801b336200021660201b60201c565b50620000e67faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da7336200021660201b60201c565b50620001197f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e023336200021660201b60201c565b506200014c7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e07336200021660201b60201c565b50620003d9565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f6200022983836200031160201b60201c565b620003075760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620002a36200037460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506200030b565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620003a6826200037b565b9050919050565b620003b8816200039a565b82525050565b5f602082019050620003d35f830184620003ad565b92915050565b613e6780620003e75f395ff3fe608060405234801561000f575f80fd5b5060043610610204575f3560e01c80638da5cb5b11610118578063aaae748e116100ab578063d4f72ac11161007a578063d4f72ac114610600578063d547741f14610630578063def011b41461064c578063ed1fce631461067c578063f2fde38b1461069857610204565b8063aaae748e14610586578063c2f38479146105a4578063c7d77a9d146105c4578063d12847a6146105e257610204565b80639fe18d65116100e75780639fe18d65146104ec578063a217fddf14610508578063a63e3a3714610526578063aa539d261461055657610204565b80638da5cb5b1461045057806391d148541461046e57806398a1b3971461049e5780639936b92b146104bc57610204565b80635a69887d1161019b57806373fe8cc41161016a57806373fe8cc4146103ae57806380be6875146103ca5780638404c1a3146103e65780638533d8b714610404578063863c43d41461042057610204565b80635a69887d146103285780636c3e695d14610358578063715018a61461037457806373c3f1361461037e57610204565b80632f2ff15d116101d75780632f2ff15d146102a257806336568abe146102be57806337668af5146102da57806353f24b6d1461030a57610204565b806301ffc9a71461020857806314b9443414610238578063248a9ca31461025657806327ae3ad914610286575b5f80fd5b610222600480360381019061021d9190612131565b6106b4565b60405161022f9190612176565b60405180910390f35b61024061072d565b60405161024d9190612274565b60405180910390f35b610270600480360381019061026b91906122c7565b6108f6565b60405161027d9190612301565b60405180910390f35b6102a0600480360381019061029b9190612446565b610912565b005b6102bc60048036038101906102b791906124e7565b610988565b005b6102d860048036038101906102d391906124e7565b6109aa565b005b6102f460048036038101906102ef91906122c7565b610a25565b604051610301919061256d565b60405180910390f35b610312610b25565b60405161031f9190612301565b60405180910390f35b610342600480360381019061033d91906129c0565b610b49565b60405161034f9190612301565b60405180910390f35b610372600480360381019061036d9190612aeb565b610e70565b005b61037c610fdd565b005b61039860048036038101906103939190612b32565b610ff0565b6040516103a59190612301565b60405180910390f35b6103c860048036038101906103c39190612446565b611110565b005b6103e460048036038101906103df9190612b79565b6111a9565b005b6103ee6111de565b6040516103fb9190612301565b60405180910390f35b61041e600480360381019061041991906122c7565b611202565b005b61043a60048036038101906104359190612ce9565b611221565b6040516104479190612301565b60405180910390f35b6104586112a7565b6040516104659190612d24565b60405180910390f35b610488600480360381019061048391906124e7565b6112cf565b6040516104959190612176565b60405180910390f35b6104a6611332565b6040516104b39190612301565b60405180910390f35b6104d660048036038101906104d19190612d70565b611356565b6040516104e39190612ded565b60405180910390f35b61050660048036038101906105019190612446565b6113fc565b005b610510611559565b60405161051d9190612301565b60405180910390f35b610540600480360381019061053b91906122c7565b61155f565b60405161054d919061256d565b60405180910390f35b610570600480360381019061056b9190612d70565b6115fa565b60405161057d9190612ded565b60405180910390f35b61058e6116a0565b60405161059b9190612e1c565b60405180910390f35b6105ac6116a6565b6040516105bb93929190612e35565b60405180910390f35b6105cc61184f565b6040516105d99190612f82565b60405180910390f35b6105ea611923565b6040516105f79190612f82565b60405180910390f35b61061a600480360381019061061591906122c7565b6119f7565b6040516106279190612301565b60405180910390f35b61064a600480360381019061064591906124e7565b611a0c565b005b610666600480360381019061066191906124e7565b611a2e565b6040516106739190612301565b60405180910390f35b61069660048036038101906106919190612fa2565b611b07565b005b6106b260048036038101906106ad9190612fe2565b611b3a565b005b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610726575061072582611bbe565b5b9050919050565b610735612052565b60046040518060600160405290815f820180546107519061303a565b80601f016020809104026020016040519081016040528092919081815260200182805461077d9061303a565b80156107c85780601f1061079f576101008083540402835291602001916107c8565b820191905f5260205f20905b8154815290600101906020018083116107ab57829003601f168201915b505050505081526020016001820180546107e19061303a565b80601f016020809104026020016040519081016040528092919081815260200182805461080d9061303a565b80156108585780601f1061082f57610100808354040283529160200191610858565b820191905f5260205f20905b81548152906001019060200180831161083b57829003601f168201915b505050505081526020016002820180546108719061303a565b80601f016020809104026020016040519081016040528092919081815260200182805461089d9061303a565b80156108e85780601f106108bf576101008083540402835291602001916108e8565b820191905f5260205f20905b8154815290600101906020018083116108cb57829003601f168201915b505050505081525050905090565b5f805f8381526020019081526020015f20600101549050919050565b61091a611c27565b600781908060018154018082558091505060019003905f5260205f20015f90919091909150908161094b9190613207565b507fd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da813360405161097d9291906132d6565b60405180910390a150565b610991826108f6565b61099a81611cae565b6109a48383611cc2565b50505050565b6109b2611dab565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a16576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a208282611db2565b505050565b60605f60085f8481526020019081526020015f208054610a449061303a565b905011610a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7d9061334e565b60405180910390fd5b60085f8381526020019081526020015f208054610aa29061303a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ace9061303a565b8015610b195780601f10610af057610100808354040283529160200191610b19565b820191905f5260205f20905b815481529060010190602001808311610afc57829003601f168201915b50505050509050919050565b7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e0781565b5f6030835f01515114610b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b88906133b6565b60405180910390fd5b603083602001515f60048110610baa57610ba96133d4565b5b60200201515114610bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be79061344b565b60405180910390fd5b60308360200151600160048110610c0a57610c096133d4565b5b60200201515114610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c47906134b3565b60405180910390fd5b60308360200151600260048110610c6a57610c696133d4565b5b60200201515114610cb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca79061351b565b60405180910390fd5b60308360200151600360048110610cca57610cc96133d4565b5b60200201515114610d10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0790613583565b60405180910390fd5b603083604001515114610d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4f906135eb565b60405180910390fd5b603083606001515114610da0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9790613653565b60405180910390fd5b603083608001515114610de8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddf906136bb565b60405180910390fd5b3083602001515f60048110610e0057610dff6133d4565b5b60200201518460200151600160048110610e1d57610e1c6133d4565b5b60200201518560200151600260048110610e3a57610e396133d4565b5b6020020151604051602001610e529493929190613758565b60405160208183030381529060405280519060200120905092915050565b610e78611c27565b805f015161500081511115610ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb9906137e3565b60405180910390fd5b816020015161500081511115610f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f04906137e3565b60405180910390fd5b826040015161500081511115610f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4f906137e3565b60405180910390fd5b8360045f820151815f019081610f6e9190613859565b506020820151816001019081610f849190613859565b506040820151816002019081610f9a9190613859565b509050507f284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb73385604051610fcf929190613928565b60405180910390a150505050565b610fe5611c27565b610fee5f611e9b565b565b5f7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e02361101b81611cae565b8261500081511115611062576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611059906137e3565b60405180910390fd5b6002846040516110729190613956565b602060405180830381855afa15801561108d573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906110b09190613980565b92508360085f8581526020019081526020015f2090816110d09190613859565b507e89f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d683336040516111019291906139ab565b60405180910390a15050919050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da761113a81611cae565b600382908060018154018082558091505060019003905f5260205f20015f90919091909150908161116b9190613207565b507f1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa823360405161119d9291906132d6565b60405180910390a15050565b6111b1611c27565b6111b9611f5e565b5f6111c48484610b49565b90506111d08183611fa2565b506111d9611ff7565b505050565b7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e02381565b61120a611c27565b60095f8281526020019081526020015f205f905550565b5f30825f015160046018811061123a576112396133d4565b5b6020020151835f0151600960188110611256576112556133d4565b5b6020020151845f0151600b60188110611272576112716133d4565b5b602002015160405160200161128a94939291906139f2565b604051602081830303815290604052805190602001209050919050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da781565b60038181548110611365575f80fd5b905f5260205f20015f91509050805461137d9061303a565b80601f01602080910402602001604051908101604052809291908181526020018280546113a99061303a565b80156113f45780601f106113cb576101008083540402835291602001916113f4565b820191905f5260205f20905b8154815290600101906020018083116113d757829003601f168201915b505050505081565b611404611c27565b5f5b60078054905081101561151c57816040516020016114249190613a79565b604051602081830303815290604052805190602001206007828154811061144e5761144d6133d4565b5b905f5260205f20016040516020016114669190613b0f565b604051602081830303815290604052805190602001200361150957600760016007805490506114959190613b52565b815481106114a6576114a56133d4565b5b905f5260205f2001600782815481106114c2576114c16133d4565b5b905f5260205f200190816114d69190613bac565b5060078054806114e9576114e8613c91565b5b600190038181905f5260205f20015f6115029190612073565b905561151c565b808061151490613cbe565b915050611406565b507ff633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f813360405161154e9291906132d6565b60405180910390a150565b5f801b81565b6008602052805f5260405f205f91509050805461157b9061303a565b80601f01602080910402602001604051908101604052809291908181526020018280546115a79061303a565b80156115f25780601f106115c9576101008083540402835291602001916115f2565b820191905f5260205f20905b8154815290600101906020018083116115d557829003601f168201915b505050505081565b60078181548110611609575f80fd5b905f5260205f20015f9150905080546116219061303a565b80601f016020809104026020016040519081016040528092919081815260200182805461164d9061303a565b80156116985780601f1061166f57610100808354040283529160200191611698565b820191905f5260205f20905b81548152906001019060200180831161167b57829003601f168201915b505050505081565b61500081565b6004805f0180546116b69061303a565b80601f01602080910402602001604051908101604052809291908181526020018280546116e29061303a565b801561172d5780601f106117045761010080835404028352916020019161172d565b820191905f5260205f20905b81548152906001019060200180831161171057829003601f168201915b5050505050908060010180546117429061303a565b80601f016020809104026020016040519081016040528092919081815260200182805461176e9061303a565b80156117b95780601f10611790576101008083540402835291602001916117b9565b820191905f5260205f20905b81548152906001019060200180831161179c57829003601f168201915b5050505050908060020180546117ce9061303a565b80601f01602080910402602001604051908101604052809291908181526020018280546117fa9061303a565b80156118455780601f1061181c57610100808354040283529160200191611845565b820191905f5260205f20905b81548152906001019060200180831161182857829003601f168201915b5050505050905083565b60606007805480602002602001604051908101604052809291908181526020015f905b8282101561191a578382905f5260205f2001805461188f9061303a565b80601f01602080910402602001604051908101604052809291908181526020018280546118bb9061303a565b80156119065780601f106118dd57610100808354040283529160200191611906565b820191905f5260205f20905b8154815290600101906020018083116118e957829003601f168201915b505050505081526020019060010190611872565b50505050905090565b60606003805480602002602001604051908101604052809291908181526020015f905b828210156119ee578382905f5260205f200180546119639061303a565b80601f016020809104026020016040519081016040528092919081815260200182805461198f9061303a565b80156119da5780601f106119b1576101008083540402835291602001916119da565b820191905f5260205f20905b8154815290600101906020018083116119bd57829003601f168201915b505050505081526020019060010190611946565b50505050905090565b6009602052805f5260405f205f915090505481565b611a15826108f6565b611a1e81611cae565b611a288383611db2565b50505050565b5f611a597faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da7836112cf565b611a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8f90613d4f565b60405180910390fd5b5f801b60095f8581526020019081526020015f205403611aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae490613db7565b60405180910390fd5b60095f8481526020019081526020015f2054905092915050565b611b0f611c27565b611b17611f5e565b5f611b2183611221565b9050611b2d8183611fa2565b50611b36611ff7565b5050565b611b42611c27565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611bb2575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611ba99190612d24565b60405180910390fd5b611bbb81611e9b565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611c2f611dab565b73ffffffffffffffffffffffffffffffffffffffff16611c4d6112a7565b73ffffffffffffffffffffffffffffffffffffffff1614611cac57611c70611dab565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611ca39190612d24565b60405180910390fd5b565b611cbf81611cba611dab565b612001565b50565b5f611ccd83836112cf565b611da15760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611d3e611dab565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611da5565b5f90505b92915050565b5f33905090565b5f611dbd83836112cf565b15611e91575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611e2e611dab565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611e95565b5f90505b92915050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002805403611f99576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028081905550565b8060095f8481526020019081526020015f20819055507f612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe828233604051611feb93929190613dd5565b60405180910390a15050565b6001600281905550565b61200b82826112cf565b61204e5780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401612045929190613e0a565b60405180910390fd5b5050565b60405180606001604052806060815260200160608152602001606081525090565b50805461207f9061303a565b5f825580601f1061209057506120ad565b601f0160209004905f5260205f20908101906120ac91906120b0565b5b50565b5b808211156120c7575f815f9055506001016120b1565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612110816120dc565b811461211a575f80fd5b50565b5f8135905061212b81612107565b92915050565b5f60208284031215612146576121456120d4565b5b5f6121538482850161211d565b91505092915050565b5f8115159050919050565b6121708161215c565b82525050565b5f6020820190506121895f830184612167565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156121c65780820151818401526020810190506121ab565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6121eb8261218f565b6121f58185612199565b93506122058185602086016121a9565b61220e816121d1565b840191505092915050565b5f606083015f8301518482035f86015261223382826121e1565b9150506020830151848203602086015261224d82826121e1565b9150506040830151848203604086015261226782826121e1565b9150508091505092915050565b5f6020820190508181035f83015261228c8184612219565b905092915050565b5f819050919050565b6122a681612294565b81146122b0575f80fd5b50565b5f813590506122c18161229d565b92915050565b5f602082840312156122dc576122db6120d4565b5b5f6122e9848285016122b3565b91505092915050565b6122fb81612294565b82525050565b5f6020820190506123145f8301846122f2565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612358826121d1565b810181811067ffffffffffffffff8211171561237757612376612322565b5b80604052505050565b5f6123896120cb565b9050612395828261234f565b919050565b5f67ffffffffffffffff8211156123b4576123b3612322565b5b6123bd826121d1565b9050602081019050919050565b828183375f83830152505050565b5f6123ea6123e58461239a565b612380565b9050828152602081018484840111156124065761240561231e565b5b6124118482856123ca565b509392505050565b5f82601f83011261242d5761242c61231a565b5b813561243d8482602086016123d8565b91505092915050565b5f6020828403121561245b5761245a6120d4565b5b5f82013567ffffffffffffffff811115612478576124776120d8565b5b61248484828501612419565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6124b68261248d565b9050919050565b6124c6816124ac565b81146124d0575f80fd5b50565b5f813590506124e1816124bd565b92915050565b5f80604083850312156124fd576124fc6120d4565b5b5f61250a858286016122b3565b925050602061251b858286016124d3565b9150509250929050565b5f82825260208201905092915050565b5f61253f8261218f565b6125498185612525565b93506125598185602086016121a9565b612562816121d1565b840191505092915050565b5f6020820190508181035f8301526125858184612535565b905092915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff8211156125af576125ae612322565b5b6125b8826121d1565b9050602081019050919050565b5f6125d76125d284612595565b612380565b9050828152602081018484840111156125f3576125f261231e565b5b6125fe8482856123ca565b509392505050565b5f82601f83011261261a5761261961231a565b5b813561262a8482602086016125c5565b91505092915050565b5f67ffffffffffffffff82111561264d5761264c612322565b5b602082029050919050565b5f80fd5b5f61266e61266984612633565b612380565b9050806020840283018581111561268857612687612658565b5b835b818110156126cf57803567ffffffffffffffff8111156126ad576126ac61231a565b5b8086016126ba8982612606565b8552602085019450505060208101905061268a565b5050509392505050565b5f82601f8301126126ed576126ec61231a565b5b60046126fa84828561265c565b91505092915050565b5f60a082840312156127185761271761258d565b5b61272260a0612380565b90505f82013567ffffffffffffffff81111561274157612740612591565b5b61274d84828501612606565b5f83015250602082013567ffffffffffffffff8111156127705761276f612591565b5b61277c848285016126d9565b602083015250604082013567ffffffffffffffff8111156127a05761279f612591565b5b6127ac84828501612606565b604083015250606082013567ffffffffffffffff8111156127d0576127cf612591565b5b6127dc84828501612606565b606083015250608082013567ffffffffffffffff811115612800576127ff612591565b5b61280c84828501612606565b60808301525092915050565b5f67ffffffffffffffff82111561283257612831612322565b5b602082029050602081019050919050565b5f63ffffffff82169050919050565b61285b81612843565b8114612865575f80fd5b50565b5f8135905061287681612852565b92915050565b5f608082840312156128915761289061258d565b5b61289b6080612380565b90505f6128aa84828501612868565b5f8301525060206128bd84828501612868565b602083015250604082013567ffffffffffffffff8111156128e1576128e0612591565b5b6128ed84828501612606565b6040830152506060612901848285016122b3565b60608301525092915050565b5f61291f61291a84612818565b612380565b9050808382526020820190506020840283018581111561294257612941612658565b5b835b8181101561298957803567ffffffffffffffff8111156129675761296661231a565b5b808601612974898261287c565b85526020850194505050602081019050612944565b5050509392505050565b5f82601f8301126129a7576129a661231a565b5b81356129b784826020860161290d565b91505092915050565b5f80604083850312156129d6576129d56120d4565b5b5f83013567ffffffffffffffff8111156129f3576129f26120d8565b5b6129ff85828601612703565b925050602083013567ffffffffffffffff811115612a2057612a1f6120d8565b5b612a2c85828601612993565b9150509250929050565b5f60608284031215612a4b57612a4a61258d565b5b612a556060612380565b90505f82013567ffffffffffffffff811115612a7457612a73612591565b5b612a8084828501612606565b5f83015250602082013567ffffffffffffffff811115612aa357612aa2612591565b5b612aaf84828501612606565b602083015250604082013567ffffffffffffffff811115612ad357612ad2612591565b5b612adf84828501612606565b60408301525092915050565b5f60208284031215612b0057612aff6120d4565b5b5f82013567ffffffffffffffff811115612b1d57612b1c6120d8565b5b612b2984828501612a36565b91505092915050565b5f60208284031215612b4757612b466120d4565b5b5f82013567ffffffffffffffff811115612b6457612b636120d8565b5b612b7084828501612606565b91505092915050565b5f805f60608486031215612b9057612b8f6120d4565b5b5f84013567ffffffffffffffff811115612bad57612bac6120d8565b5b612bb986828701612703565b935050602084013567ffffffffffffffff811115612bda57612bd96120d8565b5b612be686828701612993565b9250506040612bf7868287016122b3565b9150509250925092565b5f67ffffffffffffffff821115612c1b57612c1a612322565b5b602082029050919050565b5f612c38612c3384612c01565b612380565b90508060208402830185811115612c5257612c51612658565b5b835b81811015612c7b5780612c6788826122b3565b845260208401935050602081019050612c54565b5050509392505050565b5f82601f830112612c9957612c9861231a565b5b6018612ca6848285612c26565b91505092915050565b5f6103008284031215612cc557612cc461258d565b5b612ccf6020612380565b90505f612cde84828501612c85565b5f8301525092915050565b5f6103008284031215612cff57612cfe6120d4565b5b5f612d0c84828501612caf565b91505092915050565b612d1e816124ac565b82525050565b5f602082019050612d375f830184612d15565b92915050565b5f819050919050565b612d4f81612d3d565b8114612d59575f80fd5b50565b5f81359050612d6a81612d46565b92915050565b5f60208284031215612d8557612d846120d4565b5b5f612d9284828501612d5c565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f612dbf82612d9b565b612dc98185612da5565b9350612dd98185602086016121a9565b612de2816121d1565b840191505092915050565b5f6020820190508181035f830152612e058184612db5565b905092915050565b612e1681612d3d565b82525050565b5f602082019050612e2f5f830184612e0d565b92915050565b5f6060820190508181035f830152612e4d8186612535565b90508181036020830152612e618185612535565b90508181036040830152612e758184612535565b9050949350505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f612ec282612d9b565b612ecc8185612ea8565b9350612edc8185602086016121a9565b612ee5816121d1565b840191505092915050565b5f612efb8383612eb8565b905092915050565b5f602082019050919050565b5f612f1982612e7f565b612f238185612e89565b935083602082028501612f3585612e99565b805f5b85811015612f705784840389528151612f518582612ef0565b9450612f5c83612f03565b925060208a01995050600181019050612f38565b50829750879550505050505092915050565b5f6020820190508181035f830152612f9a8184612f0f565b905092915050565b5f806103208385031215612fb957612fb86120d4565b5b5f612fc685828601612caf565b925050610300612fd8858286016122b3565b9150509250929050565b5f60208284031215612ff757612ff66120d4565b5b5f613004848285016124d3565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061305157607f821691505b6020821081036130645761306361300d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026130c67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261308b565b6130d0868361308b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61310b61310661310184612d3d565b6130e8565b612d3d565b9050919050565b5f819050919050565b613124836130f1565b61313861313082613112565b848454613097565b825550505050565b5f90565b61314c613140565b61315781848461311b565b505050565b5b8181101561317a5761316f5f82613144565b60018101905061315d565b5050565b601f8211156131bf576131908161306a565b6131998461307c565b810160208510156131a8578190505b6131bc6131b48561307c565b83018261315c565b50505b505050565b5f82821c905092915050565b5f6131df5f19846008026131c4565b1980831691505092915050565b5f6131f783836131d0565b9150826002028217905092915050565b61321082612d9b565b67ffffffffffffffff81111561322957613228612322565b5b613233825461303a565b61323e82828561317e565b5f60209050601f83116001811461326f575f841561325d578287015190505b61326785826131ec565b8655506132ce565b601f19841661327d8661306a565b5f5b828110156132a45784890151825560018201915060208501945060208101905061327f565b868310156132c157848901516132bd601f8916826131d0565b8355505b6001600288020188555050505b505050505050565b5f6040820190508181035f8301526132ee8185612db5565b90506132fd6020830184612d15565b9392505050565b7f417274696661637420646f6573206e6f742065786973740000000000000000005f82015250565b5f613338601783612da5565b915061334382613304565b602082019050919050565b5f6020820190508181035f8301526133658161332c565b9050919050565b7f696e636f7272656374206d727464206c656e67746800000000000000000000005f82015250565b5f6133a0601583612da5565b91506133ab8261336c565b602082019050919050565b5f6020820190508181035f8301526133cd81613394565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f696e636f72726563742052544d525b305d206c656e67746800000000000000005f82015250565b5f613435601883612da5565b915061344082613401565b602082019050919050565b5f6020820190508181035f83015261346281613429565b9050919050565b7f696e636f72726563742052544d525b315d206c656e67746800000000000000005f82015250565b5f61349d601883612da5565b91506134a882613469565b602082019050919050565b5f6020820190508181035f8301526134ca81613491565b9050919050565b7f696e636f72726563742052544d525b325d206c656e67746800000000000000005f82015250565b5f613505601883612da5565b9150613510826134d1565b602082019050919050565b5f6020820190508181035f830152613532816134f9565b9050919050565b7f696e636f72726563742052544d525b335d206c656e67746800000000000000005f82015250565b5f61356d601883612da5565b915061357882613539565b602082019050919050565b5f6020820190508181035f83015261359a81613561565b9050919050565b7f696e636f7272656374206d724f776e6572206c656e67746800000000000000005f82015250565b5f6135d5601883612da5565b91506135e0826135a1565b602082019050919050565b5f6020820190508181035f830152613602816135c9565b9050919050565b7f696e636f7272656374206d72436f6e6669674964206c656e67746800000000005f82015250565b5f61363d601b83612da5565b915061364882613609565b602082019050919050565b5f6020820190508181035f83015261366a81613631565b9050919050565b7f696e636f7272656374206d72436f6e6669674f776e6572206c656e67746800005f82015250565b5f6136a5601e83612da5565b91506136b082613671565b602082019050919050565b5f6020820190508181035f8301526136d281613699565b9050919050565b5f8160601b9050919050565b5f6136ef826136d9565b9050919050565b5f613700826136e5565b9050919050565b613718613713826124ac565b6136f6565b82525050565b5f81905092915050565b5f6137328261218f565b61373c818561371e565b935061374c8185602086016121a9565b80840191505092915050565b5f6137638287613707565b6014820191506137738286613728565b915061377f8285613728565b915061378b8284613728565b915081905095945050505050565b7f446174612073697a652065786365656473206c696d69740000000000000000005f82015250565b5f6137cd601783612da5565b91506137d882613799565b602082019050919050565b5f6020820190508181035f8301526137fa816137c1565b9050919050565b5f819050815f5260205f209050919050565b601f8211156138545761382581613801565b61382e8461307c565b8101602085101561383d578190505b6138516138498561307c565b83018261315c565b50505b505050565b6138628261218f565b67ffffffffffffffff81111561387b5761387a612322565b5b613885825461303a565b613890828285613813565b5f60209050601f8311600181146138c1575f84156138af578287015190505b6138b985826131ec565b865550613920565b601f1984166138cf86613801565b5f5b828110156138f6578489015182556001820191506020850194506020810190506138d1565b86831015613913578489015161390f601f8916826131d0565b8355505b6001600288020188555050505b505050505050565b5f60408201905061393b5f830185612d15565b818103602083015261394d8184612219565b90509392505050565b5f6139618284613728565b915081905092915050565b5f8151905061397a8161229d565b92915050565b5f60208284031215613995576139946120d4565b5b5f6139a28482850161396c565b91505092915050565b5f6040820190506139be5f8301856122f2565b6139cb6020830184612d15565b9392505050565b5f819050919050565b6139ec6139e782612294565b6139d2565b82525050565b5f6139fd8287613707565b601482019150613a0d82866139db565b602082019150613a1d82856139db565b602082019150613a2d82846139db565b60208201915081905095945050505050565b5f81905092915050565b5f613a5382612d9b565b613a5d8185613a3f565b9350613a6d8185602086016121a9565b80840191505092915050565b5f613a848284613a49565b915081905092915050565b5f8154613a9b8161303a565b613aa58186613a3f565b9450600182165f8114613abf5760018114613ad457613b06565b60ff1983168652811515820286019350613b06565b613add8561306a565b5f5b83811015613afe57815481890152600182019150602081019050613adf565b838801955050505b50505092915050565b5f613b1a8284613a8f565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613b5c82612d3d565b9150613b6783612d3d565b9250828203905081811115613b7f57613b7e613b25565b5b92915050565b5f81549050613b938161303a565b9050919050565b5f819050815f5260205f209050919050565b818103613bba575050613c8f565b613bc382613b85565b67ffffffffffffffff811115613bdc57613bdb612322565b5b613be6825461303a565b613bf182828561317e565b5f601f831160018114613c1e575f8415613c0c578287015490505b613c1685826131ec565b865550613c88565b601f198416613c2c87613b9a565b9650613c378661306a565b5f5b82811015613c5e57848901548255600182019150600185019450602081019050613c39565b86831015613c7b5784890154613c77601f8916826131d0565b8355505b6001600288020188555050505b5050505050505b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f613cc882612d3d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613cfa57613cf9613b25565b5b600182019050919050565b7f4f70657261746f72206e6f7420617574686f72697a65640000000000000000005f82015250565b5f613d39601783612da5565b9150613d4482613d05565b602082019050919050565b5f6020820190508181035f830152613d6681613d2d565b9050919050565b7f436f6e666967206e6f74206d61707065640000000000000000000000000000005f82015250565b5f613da1601183612da5565b9150613dac82613d6d565b602082019050919050565b5f6020820190508181035f830152613dce81613d95565b9050919050565b5f606082019050613de85f8301866122f2565b613df560208301856122f2565b613e026040830184612d15565b949350505050565b5f604082019050613e1d5f830185612d15565b613e2a60208301846122f2565b939250505056fea26469706673582212208c885ea47beced33335b76ce9616c9e8c80abf59e85b2d451dff5246b709b5e764736f6c63430008150033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCaller) DCAPIdentity(opts *bind.CallOpts, report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DCAPIdentity", report, arg1)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistrySession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistrySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCaller) MAAIdentity(opts *bind.CallOpts, report MAAReport) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAAIdentity", report)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistrySession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCaller) MAXBYTESSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAX_BYTES_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistrySession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCallerSession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEINSTANCE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_INSTANCE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistrySession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEMETADATA(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_METADATA")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistrySession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEOPERATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_OPERATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistrySession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistryCaller) AllInstanceDomainNames(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "allInstanceDomainNames")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistrySession) AllInstanceDomainNames() ([]string, error) {
	return _Registry.Contract.AllInstanceDomainNames(&_Registry.CallOpts)
}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistryCallerSession) AllInstanceDomainNames() ([]string, error) {
	return _Registry.Contract.AllInstanceDomainNames(&_Registry.CallOpts)
}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistryCaller) AllStorageBackends(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "allStorageBackends")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistrySession) AllStorageBackends() ([]string, error) {
	return _Registry.Contract.AllStorageBackends(&_Registry.CallOpts)
}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistryCallerSession) AllStorageBackends() ([]string, error) {
	return _Registry.Contract.AllStorageBackends(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCaller) AppPki(opts *bind.CallOpts) (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "app_pki")

	outstruct := new(struct {
		Ca          []byte
		Pubkey      []byte
		Attestation []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Ca = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Pubkey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Attestation = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistrySession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCallerSession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistryCaller) Artifacts(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "artifacts", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistrySession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Artifacts(&_Registry.CallOpts, arg0)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistryCallerSession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Artifacts(&_Registry.CallOpts, arg0)
}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistryCaller) GetArtifact(opts *bind.CallOpts, artifactHash [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getArtifact", artifactHash)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistrySession) GetArtifact(artifactHash [32]byte) ([]byte, error) {
	return _Registry.Contract.GetArtifact(&_Registry.CallOpts, artifactHash)
}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistryCallerSession) GetArtifact(artifactHash [32]byte) ([]byte, error) {
	return _Registry.Contract.GetArtifact(&_Registry.CallOpts, artifactHash)
}

// GetConfigForIdentity is a free data retrieval call binding the contract method 0xdef011b4.
//
// Solidity: function getConfigForIdentity(bytes32 identity, address operator) view returns(bytes32)
func (_Registry *RegistryCaller) GetConfigForIdentity(opts *bind.CallOpts, identity [32]byte, operator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getConfigForIdentity", identity, operator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetConfigForIdentity is a free data retrieval call binding the contract method 0xdef011b4.
//
// Solidity: function getConfigForIdentity(bytes32 identity, address operator) view returns(bytes32)
func (_Registry *RegistrySession) GetConfigForIdentity(identity [32]byte, operator common.Address) ([32]byte, error) {
	return _Registry.Contract.GetConfigForIdentity(&_Registry.CallOpts, identity, operator)
}

// GetConfigForIdentity is a free data retrieval call binding the contract method 0xdef011b4.
//
// Solidity: function getConfigForIdentity(bytes32 identity, address operator) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetConfigForIdentity(identity [32]byte, operator common.Address) ([32]byte, error) {
	return _Registry.Contract.GetConfigForIdentity(&_Registry.CallOpts, identity, operator)
}

// GetPKI is a free data retrieval call binding the contract method 0x14b94434.
//
// Solidity: function getPKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistryCaller) GetPKI(opts *bind.CallOpts) (AppPKI, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getPKI")

	if err != nil {
		return *new(AppPKI), err
	}

	out0 := *abi.ConvertType(out[0], new(AppPKI)).(*AppPKI)

	return out0, err

}

// GetPKI is a free data retrieval call binding the contract method 0x14b94434.
//
// Solidity: function getPKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistrySession) GetPKI() (AppPKI, error) {
	return _Registry.Contract.GetPKI(&_Registry.CallOpts)
}

// GetPKI is a free data retrieval call binding the contract method 0x14b94434.
//
// Solidity: function getPKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistryCallerSession) GetPKI() (AppPKI, error) {
	return _Registry.Contract.GetPKI(&_Registry.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistrySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistrySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCaller) IdentityConfigMap(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "identityConfigMap", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistrySession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCallerSession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCaller) InstanceDomainNames(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "instanceDomainNames", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistrySession) InstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts, arg0)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) InstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistrySession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCallerSession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCaller) StorageBackends(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "storageBackends", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistrySession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts, arg0)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistryTransactor) AddArtifact(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addArtifact", data)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistrySession) AddArtifact(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddArtifact(&_Registry.TransactOpts, data)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistryTransactorSession) AddArtifact(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddArtifact(&_Registry.TransactOpts, data)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactor) RegisterInstanceDomainName(opts *bind.TransactOpts, domain string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerInstanceDomainName", domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistrySession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactorSession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactor) RemoveConfigMapForIdentity(opts *bind.TransactOpts, identity [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeConfigMapForIdentity", identity)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistrySession) RemoveConfigMapForIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveConfigMapForIdentity(&_Registry.TransactOpts, identity)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactorSession) RemoveConfigMapForIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveConfigMapForIdentity(&_Registry.TransactOpts, identity)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) RemoveStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeStorageBackend", backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistrySession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0x80be6875.
//
// Solidity: function setConfigForDCAP((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForDCAP(opts *bind.TransactOpts, report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForDCAP", report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0x80be6875.
//
// Solidity: function setConfigForDCAP((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForDCAP(report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0x80be6875.
//
// Solidity: function setConfigForDCAP((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForDCAP(report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForMAA(opts *bind.TransactOpts, report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForMAA", report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForMAA(report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForMAA(report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactor) SetPKI(opts *bind.TransactOpts, pki AppPKI) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setPKI", pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistrySession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactorSession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) SetStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setStorageBackend", backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// RegistryArtifactAddedIterator is returned from FilterArtifactAdded and is used to iterate over the raw logs and unpacked data for ArtifactAdded events raised by the Registry contract.
type RegistryArtifactAddedIterator struct {
	Event *RegistryArtifactAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryArtifactAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryArtifactAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryArtifactAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryArtifactAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryArtifactAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryArtifactAdded represents a ArtifactAdded event raised by the Registry contract.
type RegistryArtifactAdded struct {
	ConfigHash [32]byte
	Adder      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterArtifactAdded is a free log retrieval operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) FilterArtifactAdded(opts *bind.FilterOpts) (*RegistryArtifactAddedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return &RegistryArtifactAddedIterator{contract: _Registry.contract, event: "ArtifactAdded", logs: logs, sub: sub}, nil
}

// WatchArtifactAdded is a free log subscription operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) WatchArtifactAdded(opts *bind.WatchOpts, sink chan<- *RegistryArtifactAdded) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryArtifactAdded)
				if err := _Registry.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseArtifactAdded is a log parse operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) ParseArtifactAdded(log types.Log) (*RegistryArtifactAdded, error) {
	event := new(RegistryArtifactAdded)
	if err := _Registry.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryIdentityConfigSetIterator is returned from FilterIdentityConfigSet and is used to iterate over the raw logs and unpacked data for IdentityConfigSet events raised by the Registry contract.
type RegistryIdentityConfigSetIterator struct {
	Event *RegistryIdentityConfigSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryIdentityConfigSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryIdentityConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryIdentityConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryIdentityConfigSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryIdentityConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryIdentityConfigSet represents a IdentityConfigSet event raised by the Registry contract.
type RegistryIdentityConfigSet struct {
	Identity   [32]byte
	ConfigHash [32]byte
	Setter     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterIdentityConfigSet is a free log retrieval operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) FilterIdentityConfigSet(opts *bind.FilterOpts) (*RegistryIdentityConfigSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return &RegistryIdentityConfigSetIterator{contract: _Registry.contract, event: "IdentityConfigSet", logs: logs, sub: sub}, nil
}

// WatchIdentityConfigSet is a free log subscription operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) WatchIdentityConfigSet(opts *bind.WatchOpts, sink chan<- *RegistryIdentityConfigSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryIdentityConfigSet)
				if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIdentityConfigSet is a log parse operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) ParseIdentityConfigSet(log types.Log) (*RegistryIdentityConfigSet, error) {
	event := new(RegistryIdentityConfigSet)
	if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryInstanceDomainRegisteredIterator is returned from FilterInstanceDomainRegistered and is used to iterate over the raw logs and unpacked data for InstanceDomainRegistered events raised by the Registry contract.
type RegistryInstanceDomainRegisteredIterator struct {
	Event *RegistryInstanceDomainRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryInstanceDomainRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryInstanceDomainRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryInstanceDomainRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryInstanceDomainRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryInstanceDomainRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryInstanceDomainRegistered represents a InstanceDomainRegistered event raised by the Registry contract.
type RegistryInstanceDomainRegistered struct {
	Domain    string
	Registrar common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInstanceDomainRegistered is a free log retrieval operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) FilterInstanceDomainRegistered(opts *bind.FilterOpts) (*RegistryInstanceDomainRegisteredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return &RegistryInstanceDomainRegisteredIterator{contract: _Registry.contract, event: "InstanceDomainRegistered", logs: logs, sub: sub}, nil
}

// WatchInstanceDomainRegistered is a free log subscription operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) WatchInstanceDomainRegistered(opts *bind.WatchOpts, sink chan<- *RegistryInstanceDomainRegistered) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryInstanceDomainRegistered)
				if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstanceDomainRegistered is a log parse operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) ParseInstanceDomainRegistered(log types.Log) (*RegistryInstanceDomainRegistered, error) {
	event := new(RegistryInstanceDomainRegistered)
	if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Registry contract.
type RegistryOwnershipTransferredIterator struct {
	Event *RegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipTransferred represents a OwnershipTransferred event raised by the Registry contract.
type RegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipTransferredIterator{contract: _Registry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipTransferred)
				if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) ParseOwnershipTransferred(log types.Log) (*RegistryOwnershipTransferred, error) {
	event := new(RegistryOwnershipTransferred)
	if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryPKIUpdatedIterator is returned from FilterPKIUpdated and is used to iterate over the raw logs and unpacked data for PKIUpdated events raised by the Registry contract.
type RegistryPKIUpdatedIterator struct {
	Event *RegistryPKIUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryPKIUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryPKIUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryPKIUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryPKIUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryPKIUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryPKIUpdated represents a PKIUpdated event raised by the Registry contract.
type RegistryPKIUpdated struct {
	Updater common.Address
	Pki     AppPKI
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPKIUpdated is a free log retrieval operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) FilterPKIUpdated(opts *bind.FilterOpts) (*RegistryPKIUpdatedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return &RegistryPKIUpdatedIterator{contract: _Registry.contract, event: "PKIUpdated", logs: logs, sub: sub}, nil
}

// WatchPKIUpdated is a free log subscription operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) WatchPKIUpdated(opts *bind.WatchOpts, sink chan<- *RegistryPKIUpdated) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryPKIUpdated)
				if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePKIUpdated is a log parse operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) ParsePKIUpdated(log types.Log) (*RegistryPKIUpdated, error) {
	event := new(RegistryPKIUpdated)
	if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Registry contract.
type RegistryRoleAdminChangedIterator struct {
	Event *RegistryRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleAdminChanged represents a RoleAdminChanged event raised by the Registry contract.
type RegistryRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*RegistryRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleAdminChangedIterator{contract: _Registry.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *RegistryRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleAdminChanged)
				if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) ParseRoleAdminChanged(log types.Log) (*RegistryRoleAdminChanged, error) {
	event := new(RegistryRoleAdminChanged)
	if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Registry contract.
type RegistryRoleGrantedIterator struct {
	Event *RegistryRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleGranted represents a RoleGranted event raised by the Registry contract.
type RegistryRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleGrantedIterator{contract: _Registry.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *RegistryRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleGranted)
				if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleGranted(log types.Log) (*RegistryRoleGranted, error) {
	event := new(RegistryRoleGranted)
	if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Registry contract.
type RegistryRoleRevokedIterator struct {
	Event *RegistryRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleRevoked represents a RoleRevoked event raised by the Registry contract.
type RegistryRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleRevokedIterator{contract: _Registry.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *RegistryRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleRevoked)
				if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleRevoked(log types.Log) (*RegistryRoleRevoked, error) {
	event := new(RegistryRoleRevoked)
	if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendRemovedIterator is returned from FilterStorageBackendRemoved and is used to iterate over the raw logs and unpacked data for StorageBackendRemoved events raised by the Registry contract.
type RegistryStorageBackendRemovedIterator struct {
	Event *RegistryStorageBackendRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendRemoved represents a StorageBackendRemoved event raised by the Registry contract.
type RegistryStorageBackendRemoved struct {
	Location string
	Remover  common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendRemoved is a free log retrieval operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) FilterStorageBackendRemoved(opts *bind.FilterOpts) (*RegistryStorageBackendRemovedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendRemovedIterator{contract: _Registry.contract, event: "StorageBackendRemoved", logs: logs, sub: sub}, nil
}

// WatchStorageBackendRemoved is a free log subscription operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) WatchStorageBackendRemoved(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendRemoved) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendRemoved)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendRemoved is a log parse operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) ParseStorageBackendRemoved(log types.Log) (*RegistryStorageBackendRemoved, error) {
	event := new(RegistryStorageBackendRemoved)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendSetIterator is returned from FilterStorageBackendSet and is used to iterate over the raw logs and unpacked data for StorageBackendSet events raised by the Registry contract.
type RegistryStorageBackendSetIterator struct {
	Event *RegistryStorageBackendSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendSet represents a StorageBackendSet event raised by the Registry contract.
type RegistryStorageBackendSet struct {
	Location string
	Setter   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendSet is a free log retrieval operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) FilterStorageBackendSet(opts *bind.FilterOpts) (*RegistryStorageBackendSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendSetIterator{contract: _Registry.contract, event: "StorageBackendSet", logs: logs, sub: sub}, nil
}

// WatchStorageBackendSet is a free log subscription operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) WatchStorageBackendSet(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendSet)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendSet is a log parse operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) ParseStorageBackendSet(log types.Log) (*RegistryStorageBackendSet, error) {
	event := new(RegistryStorageBackendSet)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
