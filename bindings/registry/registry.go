// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AppPKI is an auto generated low-level Go binding around an user-defined struct.
type AppPKI struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}

// DCAPEvent is an auto generated low-level Go binding around an user-defined struct.
type DCAPEvent struct {
	Index        uint32
	EventType    uint32
	EventPayload []byte
	Digest       [32]byte
}

// DCAPReport is an auto generated low-level Go binding around an user-defined struct.
type DCAPReport struct {
	MrTd          [32]byte
	RTMRs         [4][32]byte
	MrOwner       [32]byte
	MrConfigId    [32]byte
	MrConfigOwner [32]byte
}

// MAAReport is an auto generated low-level Go binding around an user-defined struct.
type MAAReport struct {
	PCRs [24][32]byte
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DCAPIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"RTMRs\",\"type\":\"bytes32[4]\",\"internalType\":\"bytes32[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"mrConfigId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAAIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_BYTES_SIZE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_INSTANCE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_METADATA\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_OPERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addArtifact\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"artifactHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allInstanceDomainNames\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allStorageBackends\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"app_pki\",\"inputs\":[],\"outputs\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"artifacts\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getArtifact\",\"inputs\":[{\"name\":\"artifactHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getConfigForIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPKI\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"identityConfigMap\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"instanceDomainNames\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerInstanceDomainName\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeConfigMapForIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForDCAP\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"RTMRs\",\"type\":\"bytes32[4]\",\"internalType\":\"bytes32[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"mrConfigId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"eventLog\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForMAA\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPKI\",\"inputs\":[{\"name\":\"pki\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"storageBackends\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ArtifactAdded\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"adder\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"IdentityConfigSet\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InstanceDomainRegistered\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"registrar\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PKIUpdated\",\"inputs\":[{\"name\":\"updater\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pki\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendRemoved\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"remover\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendSet\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]}]",
	Bin: "0x608060405234801562000010575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000085575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007c9190620003be565b60405180910390fd5b62000096816200015360201b60201c565b506001600281905550620000b35f801b336200021660201b60201c565b50620000e67faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da7336200021660201b60201c565b50620001197f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e023336200021660201b60201c565b506200014c7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e07336200021660201b60201c565b50620003d9565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f6200022983836200031160201b60201c565b620003075760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620002a36200037460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506200030b565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620003a6826200037b565b9050919050565b620003b8816200039a565b82525050565b5f602082019050620003d35f830184620003ad565b92915050565b61357880620003e75f395ff3fe608060405234801561000f575f80fd5b5060043610610204575f3560e01c806398a1b39711610118578063c2f38479116100ab578063d547741f1161007a578063d547741f14610614578063df4ffe9014610630578063e058d5de14610660578063ed1fce631461067c578063f2fde38b1461069857610204565b8063c2f3847914610588578063c7d77a9d146105a8578063d12847a6146105c6578063d4f72ac1146105e457610204565b8063a275257b116100e7578063a275257b146104da578063a63e3a371461050a578063aa539d261461053a578063aaae748e1461056a57610204565b806398a1b397146104525780639936b92b146104705780639fe18d65146104a0578063a217fddf146104bc57610204565b80636c3e695d1161019b5780638404c1a31161016a5780638404c1a31461039a5780638533d8b7146103b8578063863c43d4146103d45780638da5cb5b1461040457806391d148541461042257610204565b80636c3e695d14610328578063715018a61461034457806373c3f1361461034e57806373fe8cc41461037e57610204565b80632f2ff15d116101d75780632f2ff15d146102a257806336568abe146102be57806337668af5146102da57806353f24b6d1461030a57610204565b806301ffc9a71461020857806314b9443414610238578063248a9ca31461025657806327ae3ad914610286575b5f80fd5b610222600480360381019061021d9190611ddd565b6106b4565b60405161022f9190611e22565b60405180910390f35b61024061072d565b60405161024d9190611f20565b60405180910390f35b610270600480360381019061026b9190611f73565b6108f6565b60405161027d9190611fad565b60405180910390f35b6102a0600480360381019061029b91906120f2565b610912565b005b6102bc60048036038101906102b79190612193565b610988565b005b6102d860048036038101906102d39190612193565b6109aa565b005b6102f460048036038101906102ef9190611f73565b610a25565b6040516103019190612219565b60405180910390f35b610312610b25565b60405161031f9190611fad565b60405180910390f35b610342600480360381019061033d9190612394565b610b49565b005b61034c610cb6565b005b610368600480360381019061036391906123db565b610cc9565b6040516103759190611fad565b60405180910390f35b610398600480360381019061039391906120f2565b610da3565b005b6103a2610e3c565b6040516103af9190611fad565b60405180910390f35b6103d260048036038101906103cd9190611f73565b610e60565b005b6103ee60048036038101906103e9919061250e565b610e7f565b6040516103fb9190611fad565b60405180910390f35b61040c610f05565b6040516104199190612549565b60405180910390f35b61043c60048036038101906104379190612193565b610f2d565b6040516104499190611e22565b60405180910390f35b61045a610f90565b6040516104679190611fad565b60405180910390f35b61048a60048036038101906104859190612595565b610fb4565b6040516104979190612612565b60405180910390f35b6104ba60048036038101906104b591906120f2565b61105a565b005b6104c46111b1565b6040516104d19190611fad565b60405180910390f35b6104f460048036038101906104ef9190611f73565b6111b7565b6040516105019190611fad565b60405180910390f35b610524600480360381019061051f9190611f73565b611226565b6040516105319190612219565b60405180910390f35b610554600480360381019061054f9190612595565b6112c1565b6040516105619190612612565b60405180910390f35b610572611367565b60405161057f9190612641565b60405180910390f35b61059061136d565b60405161059f9392919061265a565b60405180910390f35b6105b0611516565b6040516105bd91906127a7565b60405180910390f35b6105ce6115ea565b6040516105db91906127a7565b60405180910390f35b6105fe60048036038101906105f99190611f73565b6116be565b60405161060b9190611fad565b60405180910390f35b61062e60048036038101906106299190612193565b6116d3565b005b61064a60048036038101906106459190612aa7565b6116f5565b6040516106579190611fad565b60405180910390f35b61067a60048036038101906106759190612b03565b61177e565b005b61069660048036038101906106919190612b72565b6117b3565b005b6106b260048036038101906106ad9190612bb2565b6117e6565b005b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061072657506107258261186a565b5b9050919050565b610735611cfe565b60046040518060600160405290815f8201805461075190612c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461077d90612c0a565b80156107c85780601f1061079f576101008083540402835291602001916107c8565b820191905f5260205f20905b8154815290600101906020018083116107ab57829003601f168201915b505050505081526020016001820180546107e190612c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461080d90612c0a565b80156108585780601f1061082f57610100808354040283529160200191610858565b820191905f5260205f20905b81548152906001019060200180831161083b57829003601f168201915b5050505050815260200160028201805461087190612c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461089d90612c0a565b80156108e85780601f106108bf576101008083540402835291602001916108e8565b820191905f5260205f20905b8154815290600101906020018083116108cb57829003601f168201915b505050505081525050905090565b5f805f8381526020019081526020015f20600101549050919050565b61091a6118d3565b600781908060018154018082558091505060019003905f5260205f20015f90919091909150908161094b9190612dd7565b507fd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da813360405161097d929190612ea6565b60405180910390a150565b610991826108f6565b61099a8161195a565b6109a4838361196e565b50505050565b6109b2611a57565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a16576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a208282611a5e565b505050565b60605f60085f8481526020019081526020015f208054610a4490612c0a565b905011610a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7d90612f1e565b60405180910390fd5b60085f8381526020019081526020015f208054610aa290612c0a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ace90612c0a565b8015610b195780601f10610af057610100808354040283529160200191610b19565b820191905f5260205f20905b815481529060010190602001808311610afc57829003601f168201915b50505050509050919050565b7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e0781565b610b516118d3565b805f015161500081511115610b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9290612f86565b60405180910390fd5b816020015161500081511115610be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdd90612f86565b60405180910390fd5b826040015161500081511115610c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2890612f86565b60405180910390fd5b8360045f820151815f019081610c479190612ffc565b506020820151816001019081610c5d9190612ffc565b506040820151816002019081610c739190612ffc565b509050507f284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb73385604051610ca89291906130cb565b60405180910390a150505050565b610cbe6118d3565b610cc75f611b47565b565b5f7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e023610cf48161195a565b8261500081511115610d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3290612f86565b60405180910390fd5b838051906020012092508360085f8581526020019081526020015f209081610d639190612ffc565b507e89f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d68333604051610d949291906130f9565b60405180910390a15050919050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da7610dcd8161195a565b600382908060018154018082558091505060019003905f5260205f20015f909190919091509081610dfe9190612dd7565b507f1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa8233604051610e30929190612ea6565b60405180910390a15050565b7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e02381565b610e686118d3565b60095f8281526020019081526020015f205f905550565b5f30825f0151600460188110610e9857610e97613120565b5b6020020151835f0151600960188110610eb457610eb3613120565b5b6020020151845f0151600b60188110610ed057610ecf613120565b5b6020020151604051602001610ee894939291906131b2565b604051602081830303815290604052805190602001209050919050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da781565b60038181548110610fc3575f80fd5b905f5260205f20015f915090508054610fdb90612c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461100790612c0a565b80156110525780601f1061102957610100808354040283529160200191611052565b820191905f5260205f20905b81548152906001019060200180831161103557829003601f168201915b505050505081565b6110626118d3565b5f5b60078054905081101561117457816040516020016110829190613239565b60405160208183030381529060405280519060200120600782815481106110ac576110ab613120565b5b905f5260205f20016040516020016110c491906132cf565b604051602081830303815290604052805190602001200361116757600760016007805490506110f39190613312565b8154811061110457611103613120565b5b905f5260205f2001600782815481106111205761111f613120565b5b905f5260205f20019081611134919061336c565b50600780548061114757611146613451565b5b600190038181905f5260205f20015f6111609190611d1f565b9055611174565b8080600101915050611064565b507ff633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f81336040516111a6929190612ea6565b60405180910390a150565b5f801b81565b5f805f1b60095f8481526020019081526020015f20540361120d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611204906134c8565b60405180910390fd5b60095f8381526020019081526020015f20549050919050565b6008602052805f5260405f205f91509050805461124290612c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461126e90612c0a565b80156112b95780601f10611290576101008083540402835291602001916112b9565b820191905f5260205f20905b81548152906001019060200180831161129c57829003601f168201915b505050505081565b600781815481106112d0575f80fd5b905f5260205f20015f9150905080546112e890612c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461131490612c0a565b801561135f5780601f106113365761010080835404028352916020019161135f565b820191905f5260205f20905b81548152906001019060200180831161134257829003601f168201915b505050505081565b61500081565b6004805f01805461137d90612c0a565b80601f01602080910402602001604051908101604052809291908181526020018280546113a990612c0a565b80156113f45780601f106113cb576101008083540402835291602001916113f4565b820191905f5260205f20905b8154815290600101906020018083116113d757829003601f168201915b50505050509080600101805461140990612c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461143590612c0a565b80156114805780601f1061145757610100808354040283529160200191611480565b820191905f5260205f20905b81548152906001019060200180831161146357829003601f168201915b50505050509080600201805461149590612c0a565b80601f01602080910402602001604051908101604052809291908181526020018280546114c190612c0a565b801561150c5780601f106114e35761010080835404028352916020019161150c565b820191905f5260205f20905b8154815290600101906020018083116114ef57829003601f168201915b5050505050905083565b60606007805480602002602001604051908101604052809291908181526020015f905b828210156115e1578382905f5260205f2001805461155690612c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461158290612c0a565b80156115cd5780601f106115a4576101008083540402835291602001916115cd565b820191905f5260205f20905b8154815290600101906020018083116115b057829003601f168201915b505050505081526020019060010190611539565b50505050905090565b60606003805480602002602001604051908101604052809291908181526020015f905b828210156116b5578382905f5260205f2001805461162a90612c0a565b80601f016020809104026020016040519081016040528092919081815260200182805461165690612c0a565b80156116a15780601f10611678576101008083540402835291602001916116a1565b820191905f5260205f20905b81548152906001019060200180831161168457829003601f168201915b50505050508152602001906001019061160d565b50505050905090565b6009602052805f5260405f205f915090505481565b6116dc826108f6565b6116e58161195a565b6116ef8383611a5e565b50505050565b5f3083602001515f6004811061170e5761170d613120565b5b6020020151846020015160016004811061172b5761172a613120565b5b6020020151856020015160026004811061174857611747613120565b5b602002015160405160200161176094939291906131b2565b60405160208183030381529060405280519060200120905092915050565b6117866118d3565b61178e611c0a565b5f61179984846116f5565b90506117a58183611c4e565b506117ae611ca3565b505050565b6117bb6118d3565b6117c3611c0a565b5f6117cd83610e7f565b90506117d98183611c4e565b506117e2611ca3565b5050565b6117ee6118d3565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361185e575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016118559190612549565b60405180910390fd5b61186781611b47565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6118db611a57565b73ffffffffffffffffffffffffffffffffffffffff166118f9610f05565b73ffffffffffffffffffffffffffffffffffffffff16146119585761191c611a57565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161194f9190612549565b60405180910390fd5b565b61196b81611966611a57565b611cad565b50565b5f6119798383610f2d565b611a4d5760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506119ea611a57565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611a51565b5f90505b92915050565b5f33905090565b5f611a698383610f2d565b15611b3d575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611ada611a57565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611b41565b5f90505b92915050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002805403611c45576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028081905550565b8060095f8481526020019081526020015f20819055507f612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe828233604051611c97939291906134e6565b60405180910390a15050565b6001600281905550565b611cb78282610f2d565b611cfa5780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611cf192919061351b565b60405180910390fd5b5050565b60405180606001604052806060815260200160608152602001606081525090565b508054611d2b90612c0a565b5f825580601f10611d3c5750611d59565b601f0160209004905f5260205f2090810190611d589190611d5c565b5b50565b5b80821115611d73575f815f905550600101611d5d565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dbc81611d88565b8114611dc6575f80fd5b50565b5f81359050611dd781611db3565b92915050565b5f60208284031215611df257611df1611d80565b5b5f611dff84828501611dc9565b91505092915050565b5f8115159050919050565b611e1c81611e08565b82525050565b5f602082019050611e355f830184611e13565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611e72578082015181840152602081019050611e57565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611e9782611e3b565b611ea18185611e45565b9350611eb1818560208601611e55565b611eba81611e7d565b840191505092915050565b5f606083015f8301518482035f860152611edf8282611e8d565b91505060208301518482036020860152611ef98282611e8d565b91505060408301518482036040860152611f138282611e8d565b9150508091505092915050565b5f6020820190508181035f830152611f388184611ec5565b905092915050565b5f819050919050565b611f5281611f40565b8114611f5c575f80fd5b50565b5f81359050611f6d81611f49565b92915050565b5f60208284031215611f8857611f87611d80565b5b5f611f9584828501611f5f565b91505092915050565b611fa781611f40565b82525050565b5f602082019050611fc05f830184611f9e565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61200482611e7d565b810181811067ffffffffffffffff8211171561202357612022611fce565b5b80604052505050565b5f612035611d77565b90506120418282611ffb565b919050565b5f67ffffffffffffffff8211156120605761205f611fce565b5b61206982611e7d565b9050602081019050919050565b828183375f83830152505050565b5f61209661209184612046565b61202c565b9050828152602081018484840111156120b2576120b1611fca565b5b6120bd848285612076565b509392505050565b5f82601f8301126120d9576120d8611fc6565b5b81356120e9848260208601612084565b91505092915050565b5f6020828403121561210757612106611d80565b5b5f82013567ffffffffffffffff81111561212457612123611d84565b5b612130848285016120c5565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61216282612139565b9050919050565b61217281612158565b811461217c575f80fd5b50565b5f8135905061218d81612169565b92915050565b5f80604083850312156121a9576121a8611d80565b5b5f6121b685828601611f5f565b92505060206121c78582860161217f565b9150509250929050565b5f82825260208201905092915050565b5f6121eb82611e3b565b6121f581856121d1565b9350612205818560208601611e55565b61220e81611e7d565b840191505092915050565b5f6020820190508181035f83015261223181846121e1565b905092915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff82111561225b5761225a611fce565b5b61226482611e7d565b9050602081019050919050565b5f61228361227e84612241565b61202c565b90508281526020810184848401111561229f5761229e611fca565b5b6122aa848285612076565b509392505050565b5f82601f8301126122c6576122c5611fc6565b5b81356122d6848260208601612271565b91505092915050565b5f606082840312156122f4576122f3612239565b5b6122fe606061202c565b90505f82013567ffffffffffffffff81111561231d5761231c61223d565b5b612329848285016122b2565b5f83015250602082013567ffffffffffffffff81111561234c5761234b61223d565b5b612358848285016122b2565b602083015250604082013567ffffffffffffffff81111561237c5761237b61223d565b5b612388848285016122b2565b60408301525092915050565b5f602082840312156123a9576123a8611d80565b5b5f82013567ffffffffffffffff8111156123c6576123c5611d84565b5b6123d2848285016122df565b91505092915050565b5f602082840312156123f0576123ef611d80565b5b5f82013567ffffffffffffffff81111561240d5761240c611d84565b5b612419848285016122b2565b91505092915050565b5f67ffffffffffffffff82111561243c5761243b611fce565b5b602082029050919050565b5f80fd5b5f61245d61245884612422565b61202c565b9050806020840283018581111561247757612476612447565b5b835b818110156124a0578061248c8882611f5f565b845260208401935050602081019050612479565b5050509392505050565b5f82601f8301126124be576124bd611fc6565b5b60186124cb84828561244b565b91505092915050565b5f61030082840312156124ea576124e9612239565b5b6124f4602061202c565b90505f612503848285016124aa565b5f8301525092915050565b5f610300828403121561252457612523611d80565b5b5f612531848285016124d4565b91505092915050565b61254381612158565b82525050565b5f60208201905061255c5f83018461253a565b92915050565b5f819050919050565b61257481612562565b811461257e575f80fd5b50565b5f8135905061258f8161256b565b92915050565b5f602082840312156125aa576125a9611d80565b5b5f6125b784828501612581565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f6125e4826125c0565b6125ee81856125ca565b93506125fe818560208601611e55565b61260781611e7d565b840191505092915050565b5f6020820190508181035f83015261262a81846125da565b905092915050565b61263b81612562565b82525050565b5f6020820190506126545f830184612632565b92915050565b5f6060820190508181035f83015261267281866121e1565b9050818103602083015261268681856121e1565b9050818103604083015261269a81846121e1565b9050949350505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f6126e7826125c0565b6126f181856126cd565b9350612701818560208601611e55565b61270a81611e7d565b840191505092915050565b5f61272083836126dd565b905092915050565b5f602082019050919050565b5f61273e826126a4565b61274881856126ae565b93508360208202850161275a856126be565b805f5b8581101561279557848403895281516127768582612715565b945061278183612728565b925060208a0199505060018101905061275d565b50829750879550505050505092915050565b5f6020820190508181035f8301526127bf8184612734565b905092915050565b5f67ffffffffffffffff8211156127e1576127e0611fce565b5b602082029050919050565b5f6127fe6127f9846127c7565b61202c565b9050806020840283018581111561281857612817612447565b5b835b81811015612841578061282d8882611f5f565b84526020840193505060208101905061281a565b5050509392505050565b5f82601f83011261285f5761285e611fc6565b5b600461286c8482856127ec565b91505092915050565b5f610100828403121561288b5761288a612239565b5b61289560a061202c565b90505f6128a484828501611f5f565b5f8301525060206128b78482850161284b565b60208301525060a06128cb84828501611f5f565b60408301525060c06128df84828501611f5f565b60608301525060e06128f384828501611f5f565b60808301525092915050565b5f67ffffffffffffffff82111561291957612918611fce565b5b602082029050602081019050919050565b5f63ffffffff82169050919050565b6129428161292a565b811461294c575f80fd5b50565b5f8135905061295d81612939565b92915050565b5f6080828403121561297857612977612239565b5b612982608061202c565b90505f6129918482850161294f565b5f8301525060206129a48482850161294f565b602083015250604082013567ffffffffffffffff8111156129c8576129c761223d565b5b6129d4848285016122b2565b60408301525060606129e884828501611f5f565b60608301525092915050565b5f612a06612a01846128ff565b61202c565b90508083825260208201905060208402830185811115612a2957612a28612447565b5b835b81811015612a7057803567ffffffffffffffff811115612a4e57612a4d611fc6565b5b808601612a5b8982612963565b85526020850194505050602081019050612a2b565b5050509392505050565b5f82601f830112612a8e57612a8d611fc6565b5b8135612a9e8482602086016129f4565b91505092915050565b5f806101208385031215612abe57612abd611d80565b5b5f612acb85828601612875565b92505061010083013567ffffffffffffffff811115612aed57612aec611d84565b5b612af985828601612a7a565b9150509250929050565b5f805f6101408486031215612b1b57612b1a611d80565b5b5f612b2886828701612875565b93505061010084013567ffffffffffffffff811115612b4a57612b49611d84565b5b612b5686828701612a7a565b925050610120612b6886828701611f5f565b9150509250925092565b5f806103208385031215612b8957612b88611d80565b5b5f612b96858286016124d4565b925050610300612ba885828601611f5f565b9150509250929050565b5f60208284031215612bc757612bc6611d80565b5b5f612bd48482850161217f565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612c2157607f821691505b602082108103612c3457612c33612bdd565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612c967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c5b565b612ca08683612c5b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612cdb612cd6612cd184612562565b612cb8565b612562565b9050919050565b5f819050919050565b612cf483612cc1565b612d08612d0082612ce2565b848454612c67565b825550505050565b5f90565b612d1c612d10565b612d27818484612ceb565b505050565b5b81811015612d4a57612d3f5f82612d14565b600181019050612d2d565b5050565b601f821115612d8f57612d6081612c3a565b612d6984612c4c565b81016020851015612d78578190505b612d8c612d8485612c4c565b830182612d2c565b50505b505050565b5f82821c905092915050565b5f612daf5f1984600802612d94565b1980831691505092915050565b5f612dc78383612da0565b9150826002028217905092915050565b612de0826125c0565b67ffffffffffffffff811115612df957612df8611fce565b5b612e038254612c0a565b612e0e828285612d4e565b5f60209050601f831160018114612e3f575f8415612e2d578287015190505b612e378582612dbc565b865550612e9e565b601f198416612e4d86612c3a565b5f5b82811015612e7457848901518255600182019150602085019450602081019050612e4f565b86831015612e915784890151612e8d601f891682612da0565b8355505b6001600288020188555050505b505050505050565b5f6040820190508181035f830152612ebe81856125da565b9050612ecd602083018461253a565b9392505050565b7f417274696661637420646f6573206e6f742065786973740000000000000000005f82015250565b5f612f086017836125ca565b9150612f1382612ed4565b602082019050919050565b5f6020820190508181035f830152612f3581612efc565b9050919050565b7f446174612073697a652065786365656473206c696d69740000000000000000005f82015250565b5f612f706017836125ca565b9150612f7b82612f3c565b602082019050919050565b5f6020820190508181035f830152612f9d81612f64565b9050919050565b5f819050815f5260205f209050919050565b601f821115612ff757612fc881612fa4565b612fd184612c4c565b81016020851015612fe0578190505b612ff4612fec85612c4c565b830182612d2c565b50505b505050565b61300582611e3b565b67ffffffffffffffff81111561301e5761301d611fce565b5b6130288254612c0a565b613033828285612fb6565b5f60209050601f831160018114613064575f8415613052578287015190505b61305c8582612dbc565b8655506130c3565b601f19841661307286612fa4565b5f5b8281101561309957848901518255600182019150602085019450602081019050613074565b868310156130b657848901516130b2601f891682612da0565b8355505b6001600288020188555050505b505050505050565b5f6040820190506130de5f83018561253a565b81810360208301526130f08184611ec5565b90509392505050565b5f60408201905061310c5f830185611f9e565b613119602083018461253a565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f8160601b9050919050565b5f6131638261314d565b9050919050565b5f61317482613159565b9050919050565b61318c61318782612158565b61316a565b82525050565b5f819050919050565b6131ac6131a782611f40565b613192565b82525050565b5f6131bd828761317b565b6014820191506131cd828661319b565b6020820191506131dd828561319b565b6020820191506131ed828461319b565b60208201915081905095945050505050565b5f81905092915050565b5f613213826125c0565b61321d81856131ff565b935061322d818560208601611e55565b80840191505092915050565b5f6132448284613209565b915081905092915050565b5f815461325b81612c0a565b61326581866131ff565b9450600182165f811461327f5760018114613294576132c6565b60ff19831686528115158202860193506132c6565b61329d85612c3a565b5f5b838110156132be5781548189015260018201915060208101905061329f565b838801955050505b50505092915050565b5f6132da828461324f565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61331c82612562565b915061332783612562565b925082820390508181111561333f5761333e6132e5565b5b92915050565b5f8154905061335381612c0a565b9050919050565b5f819050815f5260205f209050919050565b81810361337a57505061344f565b61338382613345565b67ffffffffffffffff81111561339c5761339b611fce565b5b6133a68254612c0a565b6133b1828285612d4e565b5f601f8311600181146133de575f84156133cc578287015490505b6133d68582612dbc565b865550613448565b601f1984166133ec8761335a565b96506133f786612c3a565b5f5b8281101561341e578489015482556001820191506001850194506020810190506133f9565b8683101561343b5784890154613437601f891682612da0565b8355505b6001600288020188555050505b5050505050505b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f436f6e666967206e6f74206d61707065640000000000000000000000000000005f82015250565b5f6134b26011836125ca565b91506134bd8261347e565b602082019050919050565b5f6020820190508181035f8301526134df816134a6565b9050919050565b5f6060820190506134f95f830186611f9e565b6135066020830185611f9e565b613513604083018461253a565b949350505050565b5f60408201905061352e5f83018561253a565b61353b6020830184611f9e565b939250505056fea2646970667358221220e0c39fa059750bd642216a339ee5322104e549b1a4cb761d09a9e9158649571964736f6c63430008170033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0xdf4ffe90.
//
// Solidity: function DCAPIdentity((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCaller) DCAPIdentity(opts *bind.CallOpts, report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DCAPIdentity", report, arg1)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DCAPIdentity is a free data retrieval call binding the contract method 0xdf4ffe90.
//
// Solidity: function DCAPIdentity((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistrySession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0xdf4ffe90.
//
// Solidity: function DCAPIdentity((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistrySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCaller) MAAIdentity(opts *bind.CallOpts, report MAAReport) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAAIdentity", report)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistrySession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCaller) MAXBYTESSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAX_BYTES_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistrySession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCallerSession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEINSTANCE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_INSTANCE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistrySession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEMETADATA(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_METADATA")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistrySession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEOPERATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_OPERATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistrySession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistryCaller) AllInstanceDomainNames(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "allInstanceDomainNames")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistrySession) AllInstanceDomainNames() ([]string, error) {
	return _Registry.Contract.AllInstanceDomainNames(&_Registry.CallOpts)
}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistryCallerSession) AllInstanceDomainNames() ([]string, error) {
	return _Registry.Contract.AllInstanceDomainNames(&_Registry.CallOpts)
}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistryCaller) AllStorageBackends(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "allStorageBackends")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistrySession) AllStorageBackends() ([]string, error) {
	return _Registry.Contract.AllStorageBackends(&_Registry.CallOpts)
}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistryCallerSession) AllStorageBackends() ([]string, error) {
	return _Registry.Contract.AllStorageBackends(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCaller) AppPki(opts *bind.CallOpts) (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "app_pki")

	outstruct := new(struct {
		Ca          []byte
		Pubkey      []byte
		Attestation []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Ca = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Pubkey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Attestation = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistrySession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCallerSession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistryCaller) Artifacts(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "artifacts", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistrySession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Artifacts(&_Registry.CallOpts, arg0)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Registry *RegistryCallerSession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Artifacts(&_Registry.CallOpts, arg0)
}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistryCaller) GetArtifact(opts *bind.CallOpts, artifactHash [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getArtifact", artifactHash)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistrySession) GetArtifact(artifactHash [32]byte) ([]byte, error) {
	return _Registry.Contract.GetArtifact(&_Registry.CallOpts, artifactHash)
}

// GetArtifact is a free data retrieval call binding the contract method 0x37668af5.
//
// Solidity: function getArtifact(bytes32 artifactHash) view returns(bytes data)
func (_Registry *RegistryCallerSession) GetArtifact(artifactHash [32]byte) ([]byte, error) {
	return _Registry.Contract.GetArtifact(&_Registry.CallOpts, artifactHash)
}

// GetConfigForIdentity is a free data retrieval call binding the contract method 0xa275257b.
//
// Solidity: function getConfigForIdentity(bytes32 identity) view returns(bytes32)
func (_Registry *RegistryCaller) GetConfigForIdentity(opts *bind.CallOpts, identity [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getConfigForIdentity", identity)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetConfigForIdentity is a free data retrieval call binding the contract method 0xa275257b.
//
// Solidity: function getConfigForIdentity(bytes32 identity) view returns(bytes32)
func (_Registry *RegistrySession) GetConfigForIdentity(identity [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetConfigForIdentity(&_Registry.CallOpts, identity)
}

// GetConfigForIdentity is a free data retrieval call binding the contract method 0xa275257b.
//
// Solidity: function getConfigForIdentity(bytes32 identity) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetConfigForIdentity(identity [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetConfigForIdentity(&_Registry.CallOpts, identity)
}

// GetPKI is a free data retrieval call binding the contract method 0x14b94434.
//
// Solidity: function getPKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistryCaller) GetPKI(opts *bind.CallOpts) (AppPKI, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getPKI")

	if err != nil {
		return *new(AppPKI), err
	}

	out0 := *abi.ConvertType(out[0], new(AppPKI)).(*AppPKI)

	return out0, err

}

// GetPKI is a free data retrieval call binding the contract method 0x14b94434.
//
// Solidity: function getPKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistrySession) GetPKI() (AppPKI, error) {
	return _Registry.Contract.GetPKI(&_Registry.CallOpts)
}

// GetPKI is a free data retrieval call binding the contract method 0x14b94434.
//
// Solidity: function getPKI() view returns((bytes,bytes,bytes))
func (_Registry *RegistryCallerSession) GetPKI() (AppPKI, error) {
	return _Registry.Contract.GetPKI(&_Registry.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistrySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistrySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCaller) IdentityConfigMap(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "identityConfigMap", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistrySession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCallerSession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCaller) InstanceDomainNames(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "instanceDomainNames", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistrySession) InstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts, arg0)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) InstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistrySession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCallerSession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCaller) StorageBackends(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "storageBackends", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistrySession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts, arg0)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistryTransactor) AddArtifact(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addArtifact", data)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistrySession) AddArtifact(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddArtifact(&_Registry.TransactOpts, data)
}

// AddArtifact is a paid mutator transaction binding the contract method 0x73c3f136.
//
// Solidity: function addArtifact(bytes data) returns(bytes32 artifactHash)
func (_Registry *RegistryTransactorSession) AddArtifact(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddArtifact(&_Registry.TransactOpts, data)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactor) RegisterInstanceDomainName(opts *bind.TransactOpts, domain string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerInstanceDomainName", domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistrySession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactorSession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactor) RemoveConfigMapForIdentity(opts *bind.TransactOpts, identity [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeConfigMapForIdentity", identity)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistrySession) RemoveConfigMapForIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveConfigMapForIdentity(&_Registry.TransactOpts, identity)
}

// RemoveConfigMapForIdentity is a paid mutator transaction binding the contract method 0x8533d8b7.
//
// Solidity: function removeConfigMapForIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactorSession) RemoveConfigMapForIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveConfigMapForIdentity(&_Registry.TransactOpts, identity)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) RemoveStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeStorageBackend", backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistrySession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0xe058d5de.
//
// Solidity: function setConfigForDCAP((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForDCAP(opts *bind.TransactOpts, report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForDCAP", report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0xe058d5de.
//
// Solidity: function setConfigForDCAP((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForDCAP(report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0xe058d5de.
//
// Solidity: function setConfigForDCAP((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForDCAP(report DCAPReport, eventLog []DCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForMAA(opts *bind.TransactOpts, report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForMAA", report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForMAA(report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForMAA(report MAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactor) SetPKI(opts *bind.TransactOpts, pki AppPKI) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setPKI", pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistrySession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactorSession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) SetStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setStorageBackend", backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// RegistryArtifactAddedIterator is returned from FilterArtifactAdded and is used to iterate over the raw logs and unpacked data for ArtifactAdded events raised by the Registry contract.
type RegistryArtifactAddedIterator struct {
	Event *RegistryArtifactAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryArtifactAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryArtifactAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryArtifactAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryArtifactAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryArtifactAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryArtifactAdded represents a ArtifactAdded event raised by the Registry contract.
type RegistryArtifactAdded struct {
	ConfigHash [32]byte
	Adder      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterArtifactAdded is a free log retrieval operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) FilterArtifactAdded(opts *bind.FilterOpts) (*RegistryArtifactAddedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return &RegistryArtifactAddedIterator{contract: _Registry.contract, event: "ArtifactAdded", logs: logs, sub: sub}, nil
}

// WatchArtifactAdded is a free log subscription operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) WatchArtifactAdded(opts *bind.WatchOpts, sink chan<- *RegistryArtifactAdded) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryArtifactAdded)
				if err := _Registry.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseArtifactAdded is a log parse operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) ParseArtifactAdded(log types.Log) (*RegistryArtifactAdded, error) {
	event := new(RegistryArtifactAdded)
	if err := _Registry.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryIdentityConfigSetIterator is returned from FilterIdentityConfigSet and is used to iterate over the raw logs and unpacked data for IdentityConfigSet events raised by the Registry contract.
type RegistryIdentityConfigSetIterator struct {
	Event *RegistryIdentityConfigSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryIdentityConfigSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryIdentityConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryIdentityConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryIdentityConfigSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryIdentityConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryIdentityConfigSet represents a IdentityConfigSet event raised by the Registry contract.
type RegistryIdentityConfigSet struct {
	Identity   [32]byte
	ConfigHash [32]byte
	Setter     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterIdentityConfigSet is a free log retrieval operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) FilterIdentityConfigSet(opts *bind.FilterOpts) (*RegistryIdentityConfigSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return &RegistryIdentityConfigSetIterator{contract: _Registry.contract, event: "IdentityConfigSet", logs: logs, sub: sub}, nil
}

// WatchIdentityConfigSet is a free log subscription operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) WatchIdentityConfigSet(opts *bind.WatchOpts, sink chan<- *RegistryIdentityConfigSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryIdentityConfigSet)
				if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIdentityConfigSet is a log parse operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) ParseIdentityConfigSet(log types.Log) (*RegistryIdentityConfigSet, error) {
	event := new(RegistryIdentityConfigSet)
	if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryInstanceDomainRegisteredIterator is returned from FilterInstanceDomainRegistered and is used to iterate over the raw logs and unpacked data for InstanceDomainRegistered events raised by the Registry contract.
type RegistryInstanceDomainRegisteredIterator struct {
	Event *RegistryInstanceDomainRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryInstanceDomainRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryInstanceDomainRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryInstanceDomainRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryInstanceDomainRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryInstanceDomainRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryInstanceDomainRegistered represents a InstanceDomainRegistered event raised by the Registry contract.
type RegistryInstanceDomainRegistered struct {
	Domain    string
	Registrar common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInstanceDomainRegistered is a free log retrieval operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) FilterInstanceDomainRegistered(opts *bind.FilterOpts) (*RegistryInstanceDomainRegisteredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return &RegistryInstanceDomainRegisteredIterator{contract: _Registry.contract, event: "InstanceDomainRegistered", logs: logs, sub: sub}, nil
}

// WatchInstanceDomainRegistered is a free log subscription operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) WatchInstanceDomainRegistered(opts *bind.WatchOpts, sink chan<- *RegistryInstanceDomainRegistered) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryInstanceDomainRegistered)
				if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstanceDomainRegistered is a log parse operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) ParseInstanceDomainRegistered(log types.Log) (*RegistryInstanceDomainRegistered, error) {
	event := new(RegistryInstanceDomainRegistered)
	if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Registry contract.
type RegistryOwnershipTransferredIterator struct {
	Event *RegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipTransferred represents a OwnershipTransferred event raised by the Registry contract.
type RegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipTransferredIterator{contract: _Registry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipTransferred)
				if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) ParseOwnershipTransferred(log types.Log) (*RegistryOwnershipTransferred, error) {
	event := new(RegistryOwnershipTransferred)
	if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryPKIUpdatedIterator is returned from FilterPKIUpdated and is used to iterate over the raw logs and unpacked data for PKIUpdated events raised by the Registry contract.
type RegistryPKIUpdatedIterator struct {
	Event *RegistryPKIUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryPKIUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryPKIUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryPKIUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryPKIUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryPKIUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryPKIUpdated represents a PKIUpdated event raised by the Registry contract.
type RegistryPKIUpdated struct {
	Updater common.Address
	Pki     AppPKI
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPKIUpdated is a free log retrieval operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) FilterPKIUpdated(opts *bind.FilterOpts) (*RegistryPKIUpdatedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return &RegistryPKIUpdatedIterator{contract: _Registry.contract, event: "PKIUpdated", logs: logs, sub: sub}, nil
}

// WatchPKIUpdated is a free log subscription operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) WatchPKIUpdated(opts *bind.WatchOpts, sink chan<- *RegistryPKIUpdated) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryPKIUpdated)
				if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePKIUpdated is a log parse operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) ParsePKIUpdated(log types.Log) (*RegistryPKIUpdated, error) {
	event := new(RegistryPKIUpdated)
	if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Registry contract.
type RegistryRoleAdminChangedIterator struct {
	Event *RegistryRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleAdminChanged represents a RoleAdminChanged event raised by the Registry contract.
type RegistryRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*RegistryRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleAdminChangedIterator{contract: _Registry.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *RegistryRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleAdminChanged)
				if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) ParseRoleAdminChanged(log types.Log) (*RegistryRoleAdminChanged, error) {
	event := new(RegistryRoleAdminChanged)
	if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Registry contract.
type RegistryRoleGrantedIterator struct {
	Event *RegistryRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleGranted represents a RoleGranted event raised by the Registry contract.
type RegistryRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleGrantedIterator{contract: _Registry.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *RegistryRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleGranted)
				if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleGranted(log types.Log) (*RegistryRoleGranted, error) {
	event := new(RegistryRoleGranted)
	if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Registry contract.
type RegistryRoleRevokedIterator struct {
	Event *RegistryRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleRevoked represents a RoleRevoked event raised by the Registry contract.
type RegistryRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleRevokedIterator{contract: _Registry.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *RegistryRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleRevoked)
				if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleRevoked(log types.Log) (*RegistryRoleRevoked, error) {
	event := new(RegistryRoleRevoked)
	if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendRemovedIterator is returned from FilterStorageBackendRemoved and is used to iterate over the raw logs and unpacked data for StorageBackendRemoved events raised by the Registry contract.
type RegistryStorageBackendRemovedIterator struct {
	Event *RegistryStorageBackendRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendRemoved represents a StorageBackendRemoved event raised by the Registry contract.
type RegistryStorageBackendRemoved struct {
	Location string
	Remover  common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendRemoved is a free log retrieval operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) FilterStorageBackendRemoved(opts *bind.FilterOpts) (*RegistryStorageBackendRemovedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendRemovedIterator{contract: _Registry.contract, event: "StorageBackendRemoved", logs: logs, sub: sub}, nil
}

// WatchStorageBackendRemoved is a free log subscription operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) WatchStorageBackendRemoved(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendRemoved) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendRemoved)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendRemoved is a log parse operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) ParseStorageBackendRemoved(log types.Log) (*RegistryStorageBackendRemoved, error) {
	event := new(RegistryStorageBackendRemoved)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendSetIterator is returned from FilterStorageBackendSet and is used to iterate over the raw logs and unpacked data for StorageBackendSet events raised by the Registry contract.
type RegistryStorageBackendSetIterator struct {
	Event *RegistryStorageBackendSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendSet represents a StorageBackendSet event raised by the Registry contract.
type RegistryStorageBackendSet struct {
	Location string
	Setter   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendSet is a free log retrieval operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) FilterStorageBackendSet(opts *bind.FilterOpts) (*RegistryStorageBackendSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendSetIterator{contract: _Registry.contract, event: "StorageBackendSet", logs: logs, sub: sub}, nil
}

// WatchStorageBackendSet is a free log subscription operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) WatchStorageBackendSet(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendSet)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendSet is a log parse operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) ParseStorageBackendSet(log types.Log) (*RegistryStorageBackendSet, error) {
	event := new(RegistryStorageBackendSet)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
