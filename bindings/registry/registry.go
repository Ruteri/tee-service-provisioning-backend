// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// RegistryAppPKI is an auto generated low-level Go binding around an user-defined struct.
type RegistryAppPKI struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}

// RegistryDCAPEvent is an auto generated low-level Go binding around an user-defined struct.
type RegistryDCAPEvent struct {
	Index        uint32
	EventType    uint32
	EventPayload []byte
	Digest       [32]byte
}

// RegistryDCAPReport is an auto generated low-level Go binding around an user-defined struct.
type RegistryDCAPReport struct {
	MrTd          [32]byte
	RTMRs         [4][32]byte
	MrOwner       [32]byte
	MrConfigId    [32]byte
	MrConfigOwner [32]byte
}

// RegistryMAAReport is an auto generated low-level Go binding around an user-defined struct.
type RegistryMAAReport struct {
	PCRs [24][32]byte
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DCAPIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structRegistry.DCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"RTMRs\",\"type\":\"bytes32[4]\",\"internalType\":\"bytes32[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"mrConfigId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structRegistry.DCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAAIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structRegistry.MAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_BYTES_SIZE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_INSTANCE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_METADATA\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_OPERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addConfig\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addSecret\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"secretHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allInstanceDomainNames\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allStorageBackends\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"app_pki\",\"inputs\":[],\"outputs\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"configs\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"encryptedSecrets\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"identityConfigMap\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"instanceDomainNames\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerInstanceDomainName\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registeredIdentities\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeWhitelistedIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForDCAP\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structRegistry.DCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"RTMRs\",\"type\":\"bytes32[4]\",\"internalType\":\"bytes32[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"mrConfigId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"eventLog\",\"type\":\"tuple[]\",\"internalType\":\"structRegistry.DCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setConfigForMAA\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structRegistry.MAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]},{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPKI\",\"inputs\":[{\"name\":\"pki\",\"type\":\"tuple\",\"internalType\":\"structRegistry.AppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStorageBackend\",\"inputs\":[{\"name\":\"backendLocation\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"storageBackends\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"whitelistedIdentities\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"ConfigAdded\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"adder\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"IdentityConfigSet\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InstanceDomainRegistered\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"registrar\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PKIUpdated\",\"inputs\":[{\"name\":\"updater\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pki\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structRegistry.AppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RegistryPaused\",\"inputs\":[{\"name\":\"pauser\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RegistryUnpaused\",\"inputs\":[{\"name\":\"unpauser\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SecretAdded\",\"inputs\":[{\"name\":\"secretHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"adder\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendRemoved\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"remover\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendSet\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]}]",
	Bin: "0x608060405234801562000010575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000085575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007c9190620003be565b60405180910390fd5b62000096816200015360201b60201c565b506001600281905550620000b35f801b336200021660201b60201c565b50620000e67faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da7336200021660201b60201c565b50620001197f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e023336200021660201b60201c565b506200014c7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e07336200021660201b60201c565b50620003d9565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f6200022983836200031160201b60201c565b620003075760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620002a36200037460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506200030b565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620003a6826200037b565b9050919050565b620003b8816200039a565b82525050565b5f602082019050620003d35f830184620003ad565b92915050565b61367d80620003e75f395ff3fe608060405234801561000f575f80fd5b506004361061020f575f3560e01c80639936b92b11610123578063d12847a6116100ab578063df4ffe901161007a578063df4ffe901461064d578063e058d5de1461067d578063ea038f2014610699578063ed1fce63146106c9578063f2fde38b146106e55761020f565b8063d12847a6146105b3578063d4f72ac1146105d1578063d547741f14610601578063dc417ad01461061d5761020f565b8063aa539d26116100f2578063aa539d26146104f7578063aaae748e14610527578063c2f3847914610545578063c7d77a9d14610565578063ce8f6078146105835761020f565b80639936b92b146104715780639fe18d65146104a1578063a217fddf146104bd578063a507ed5e146104db5761020f565b806353f24b6d116101a65780638404c1a3116101755780638404c1a3146103b7578063863c43d4146103d55780638da5cb5b1461040557806391d148541461042357806398a1b397146104535761020f565b806353f24b6d146103575780636c3e695d14610375578063715018a61461039157806373fe8cc41461039b5761020f565b806327ae3ad9116101e257806327ae3ad9146102d35780632ae72484146102ef5780632f2ff15d1461031f57806336568abe1461033b5761020f565b806301ffc9a71461021357806311eeaf08146102435780631418350114610273578063248a9ca3146102a3575b5f80fd5b61022d60048036038101906102289190611f02565b610701565b60405161023a9190611f47565b60405180910390f35b61025d60048036038101906102589190611f93565b61077a565b60405161026a9190611fd6565b60405180910390f35b61028d6004803603810190610288919061212b565b61079a565b60405161029a9190611fd6565b60405180910390f35b6102bd60048036038101906102b8919061219c565b610875565b6040516102ca9190611fd6565b60405180910390f35b6102ed60048036038101906102e89190612265565b610891565b005b6103096004803603810190610304919061219c565b610907565b6040516103169190612326565b60405180910390f35b610339600480360381019061033491906123a0565b6109a2565b005b610355600480360381019061035091906123a0565b6109c4565b005b61035f610a3f565b60405161036c9190611fd6565b60405180910390f35b61038f600480360381019061038a919061249b565b610a63565b005b610399610bd0565b005b6103b560048036038101906103b09190612265565b610be3565b005b6103bf610c7c565b6040516103cc9190611fd6565b60405180910390f35b6103ef60048036038101906103ea91906125ce565b610ca0565b6040516103fc9190611fd6565b60405180910390f35b61040d610d26565b60405161041a9190612609565b60405180910390f35b61043d600480360381019061043891906123a0565b610d4e565b60405161044a9190611f47565b60405180910390f35b61045b610db1565b6040516104689190611fd6565b60405180910390f35b61048b60048036038101906104869190611f93565b610dd5565b6040516104989190612674565b60405180910390f35b6104bb60048036038101906104b69190612265565b610e7b565b005b6104c5610fd2565b6040516104d29190611fd6565b60405180910390f35b6104f560048036038101906104f0919061219c565b610fd8565b005b610511600480360381019061050c9190611f93565b611134565b60405161051e9190612674565b60405180910390f35b61052f6111da565b60405161053c91906126a3565b60405180910390f35b61054d6111e0565b60405161055c939291906126bc565b60405180910390f35b61056d611389565b60405161057a9190612809565b60405180910390f35b61059d6004803603810190610598919061219c565b61145d565b6040516105aa9190612326565b60405180910390f35b6105bb6114f8565b6040516105c89190612809565b60405180910390f35b6105eb60048036038101906105e6919061219c565b6115cc565b6040516105f89190611fd6565b60405180910390f35b61061b600480360381019061061691906123a0565b6115e1565b005b6106376004803603810190610632919061212b565b611603565b6040516106449190611fd6565b60405180910390f35b61066760048036038101906106629190612b09565b6116de565b6040516106749190611fd6565b60405180910390f35b61069760048036038101906106929190612b65565b611767565b005b6106b360048036038101906106ae919061219c565b6117fb565b6040516106c09190611f47565b60405180910390f35b6106e360048036038101906106de9190612bd4565b611818565b005b6106ff60048036038101906106fa9190612c14565b6118aa565b005b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061077357506107728261192e565b5b9050919050565b600c8181548110610789575f80fd5b905f5260205f20015f915090505481565b5f7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e0236107c581611997565b826150008151111561080c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080390612c89565b60405180910390fd5b838051906020012092508360075f8581526020019081526020015f2090816108349190612ea1565b507fd8d5a986d6bd38f304e9e9a49f20606dab678138175ec66900d60cd428a84f8c8333604051610866929190612f70565b60405180910390a15050919050565b5f805f8381526020019081526020015f20600101549050919050565b6108996119ab565b600981908060018154018082558091505060019003905f5260205f20015f9091909190915090816108ca9190612fef565b507fd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da81336040516108fc9291906130be565b60405180910390a150565b6008602052805f5260405f205f91509050805461092390612cd4565b80601f016020809104026020016040519081016040528092919081815260200182805461094f90612cd4565b801561099a5780601f106109715761010080835404028352916020019161099a565b820191905f5260205f20905b81548152906001019060200180831161097d57829003601f168201915b505050505081565b6109ab82610875565b6109b481611997565b6109be8383611a32565b50505050565b6109cc611b1b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a30576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a3a8282611b22565b505050565b7f921b443815ac473050a9950b17eb79b9ab085599704130a8fb15679f8e0b2e0781565b610a6b6119ab565b805f015161500081511115610ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aac90612c89565b60405180910390fd5b816020015161500081511115610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af790612c89565b60405180910390fd5b826040015161500081511115610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4290612c89565b60405180910390fd5b8360045f820151815f019081610b619190612ea1565b506020820151816001019081610b779190612ea1565b506040820151816002019081610b8d9190612ea1565b509050507f284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb73385604051610bc292919061318f565b60405180910390a150505050565b610bd86119ab565b610be15f611c0b565b565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da7610c0d81611997565b600382908060018154018082558091505060019003905f5260205f20015f909190919091509081610c3e9190612fef565b507f1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa8233604051610c709291906130be565b60405180910390a15050565b7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e02381565b5f30825f0151600460188110610cb957610cb86131bd565b5b6020020151835f0151600960188110610cd557610cd46131bd565b5b6020020151845f0151600b60188110610cf157610cf06131bd565b5b6020020151604051602001610d09949392919061324f565b604051602081830303815290604052805190602001209050919050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da781565b60038181548110610de4575f80fd5b905f5260205f20015f915090508054610dfc90612cd4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2890612cd4565b8015610e735780601f10610e4a57610100808354040283529160200191610e73565b820191905f5260205f20905b815481529060010190602001808311610e5657829003601f168201915b505050505081565b610e836119ab565b5f5b600980549050811015610f955781604051602001610ea391906132d6565b6040516020818303038152906040528051906020012060098281548110610ecd57610ecc6131bd565b5b905f5260205f2001604051602001610ee5919061336c565b6040516020818303038152906040528051906020012003610f885760096001600980549050610f1491906133af565b81548110610f2557610f246131bd565b5b905f5260205f200160098281548110610f4157610f406131bd565b5b905f5260205f20019081610f559190613409565b506009805480610f6857610f676134ee565b5b600190038181905f5260205f20015f610f819190611e44565b9055610f95565b8080600101915050610e85565b507ff633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f8133604051610fc79291906130be565b60405180910390a150565b5f801b81565b610fe06119ab565b600b5f8281526020019081526020015f205f9054906101000a900460ff1661103d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103490613565565b60405180910390fd5b5f600b5f8381526020019081526020015f205f6101000a81548160ff0219169083151502179055505f5b600c8054905081101561111c5781600c8281548110611089576110886131bd565b5b905f5260205f2001540361110f57600c6001600c805490506110ab91906133af565b815481106110bc576110bb6131bd565b5b905f5260205f200154600c82815481106110d9576110d86131bd565b5b905f5260205f200181905550600c8054806110f7576110f66134ee565b5b600190038181905f5260205f20015f9055905561111c565b8080600101915050611067565b50600a5f8281526020019081526020015f205f905550565b60098181548110611143575f80fd5b905f5260205f20015f91509050805461115b90612cd4565b80601f016020809104026020016040519081016040528092919081815260200182805461118790612cd4565b80156111d25780601f106111a9576101008083540402835291602001916111d2565b820191905f5260205f20905b8154815290600101906020018083116111b557829003601f168201915b505050505081565b61500081565b6004805f0180546111f090612cd4565b80601f016020809104026020016040519081016040528092919081815260200182805461121c90612cd4565b80156112675780601f1061123e57610100808354040283529160200191611267565b820191905f5260205f20905b81548152906001019060200180831161124a57829003601f168201915b50505050509080600101805461127c90612cd4565b80601f01602080910402602001604051908101604052809291908181526020018280546112a890612cd4565b80156112f35780601f106112ca576101008083540402835291602001916112f3565b820191905f5260205f20905b8154815290600101906020018083116112d657829003601f168201915b50505050509080600201805461130890612cd4565b80601f016020809104026020016040519081016040528092919081815260200182805461133490612cd4565b801561137f5780601f106113565761010080835404028352916020019161137f565b820191905f5260205f20905b81548152906001019060200180831161136257829003601f168201915b5050505050905083565b60606009805480602002602001604051908101604052809291908181526020015f905b82821015611454578382905f5260205f200180546113c990612cd4565b80601f01602080910402602001604051908101604052809291908181526020018280546113f590612cd4565b80156114405780601f1061141757610100808354040283529160200191611440565b820191905f5260205f20905b81548152906001019060200180831161142357829003601f168201915b5050505050815260200190600101906113ac565b50505050905090565b6007602052805f5260405f205f91509050805461147990612cd4565b80601f01602080910402602001604051908101604052809291908181526020018280546114a590612cd4565b80156114f05780601f106114c7576101008083540402835291602001916114f0565b820191905f5260205f20905b8154815290600101906020018083116114d357829003601f168201915b505050505081565b60606003805480602002602001604051908101604052809291908181526020015f905b828210156115c3578382905f5260205f2001805461153890612cd4565b80601f016020809104026020016040519081016040528092919081815260200182805461156490612cd4565b80156115af5780601f10611586576101008083540402835291602001916115af565b820191905f5260205f20905b81548152906001019060200180831161159257829003601f168201915b50505050508152602001906001019061151b565b50505050905090565b600a602052805f5260405f205f915090505481565b6115ea82610875565b6115f381611997565b6115fd8383611b22565b50505050565b5f7f88e3f5011d64b9d77f00831d307d6a444c0879817013864000484019d061e02361162e81611997565b8261500081511115611675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166c90612c89565b60405180910390fd5b838051906020012092508360085f8581526020019081526020015f20908161169d9190612ea1565b507f919e32d0a2c077022da30736bae270ea1cd16c55bc01c1ea7235f5b79cc4282c83336040516116cf929190612f70565b60405180910390a15050919050565b5f3083602001515f600481106116f7576116f66131bd565b5b60200201518460200151600160048110611714576117136131bd565b5b60200201518560200151600260048110611731576117306131bd565b5b6020020151604051602001611749949392919061324f565b60405160208183030381529060405280519060200120905092915050565b61176f6119ab565b611777611cce565b5f60075f8381526020019081526020015f20805461179490612cd4565b9050116117d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cd906135cd565b60405180910390fd5b5f6117e184846116de565b90506117ed8183611d12565b506117f6611de9565b505050565b600b602052805f5260405f205f915054906101000a900460ff1681565b6118206119ab565b611828611cce565b5f60075f8381526020019081526020015f20805461184590612cd4565b905011611887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187e906135cd565b60405180910390fd5b5f61189183610ca0565b905061189d8183611d12565b506118a6611de9565b5050565b6118b26119ab565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611922575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016119199190612609565b60405180910390fd5b61192b81611c0b565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6119a8816119a3611b1b565b611df3565b50565b6119b3611b1b565b73ffffffffffffffffffffffffffffffffffffffff166119d1610d26565b73ffffffffffffffffffffffffffffffffffffffff1614611a30576119f4611b1b565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611a279190612609565b60405180910390fd5b565b5f611a3d8383610d4e565b611b115760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611aae611b1b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611b15565b5f90505b92915050565b5f33905090565b5f611b2d8383610d4e565b15611c01575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611b9e611b1b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611c05565b5f90505b92915050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002805403611d09576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028081905550565b611d1a611cce565b600b5f8381526020019081526020015f205f9054906101000a900460ff16611d8c57600c82908060018154018082558091505060019003905f5260205f20015f90919091909150556001600b5f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055505b80600a5f8481526020019081526020015f20819055507f612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe828233604051611dd5939291906135eb565b60405180910390a1611de5611de9565b5050565b6001600281905550565b611dfd8282610d4e565b611e405780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611e37929190613620565b60405180910390fd5b5050565b508054611e5090612cd4565b5f825580601f10611e615750611e7e565b601f0160209004905f5260205f2090810190611e7d9190611e81565b5b50565b5b80821115611e98575f815f905550600101611e82565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ee181611ead565b8114611eeb575f80fd5b50565b5f81359050611efc81611ed8565b92915050565b5f60208284031215611f1757611f16611ea5565b5b5f611f2484828501611eee565b91505092915050565b5f8115159050919050565b611f4181611f2d565b82525050565b5f602082019050611f5a5f830184611f38565b92915050565b5f819050919050565b611f7281611f60565b8114611f7c575f80fd5b50565b5f81359050611f8d81611f69565b92915050565b5f60208284031215611fa857611fa7611ea5565b5b5f611fb584828501611f7f565b91505092915050565b5f819050919050565b611fd081611fbe565b82525050565b5f602082019050611fe95f830184611fc7565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61203d82611ff7565b810181811067ffffffffffffffff8211171561205c5761205b612007565b5b80604052505050565b5f61206e611e9c565b905061207a8282612034565b919050565b5f67ffffffffffffffff82111561209957612098612007565b5b6120a282611ff7565b9050602081019050919050565b828183375f83830152505050565b5f6120cf6120ca8461207f565b612065565b9050828152602081018484840111156120eb576120ea611ff3565b5b6120f68482856120af565b509392505050565b5f82601f83011261211257612111611fef565b5b81356121228482602086016120bd565b91505092915050565b5f602082840312156121405761213f611ea5565b5b5f82013567ffffffffffffffff81111561215d5761215c611ea9565b5b612169848285016120fe565b91505092915050565b61217b81611fbe565b8114612185575f80fd5b50565b5f8135905061219681612172565b92915050565b5f602082840312156121b1576121b0611ea5565b5b5f6121be84828501612188565b91505092915050565b5f67ffffffffffffffff8211156121e1576121e0612007565b5b6121ea82611ff7565b9050602081019050919050565b5f612209612204846121c7565b612065565b90508281526020810184848401111561222557612224611ff3565b5b6122308482856120af565b509392505050565b5f82601f83011261224c5761224b611fef565b5b813561225c8482602086016121f7565b91505092915050565b5f6020828403121561227a57612279611ea5565b5b5f82013567ffffffffffffffff81111561229757612296611ea9565b5b6122a384828501612238565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156122e35780820151818401526020810190506122c8565b5f8484015250505050565b5f6122f8826122ac565b61230281856122b6565b93506123128185602086016122c6565b61231b81611ff7565b840191505092915050565b5f6020820190508181035f83015261233e81846122ee565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61236f82612346565b9050919050565b61237f81612365565b8114612389575f80fd5b50565b5f8135905061239a81612376565b92915050565b5f80604083850312156123b6576123b5611ea5565b5b5f6123c385828601612188565b92505060206123d48582860161238c565b9150509250929050565b5f80fd5b5f80fd5b5f606082840312156123fb576123fa6123de565b5b6124056060612065565b90505f82013567ffffffffffffffff811115612424576124236123e2565b5b612430848285016120fe565b5f83015250602082013567ffffffffffffffff811115612453576124526123e2565b5b61245f848285016120fe565b602083015250604082013567ffffffffffffffff811115612483576124826123e2565b5b61248f848285016120fe565b60408301525092915050565b5f602082840312156124b0576124af611ea5565b5b5f82013567ffffffffffffffff8111156124cd576124cc611ea9565b5b6124d9848285016123e6565b91505092915050565b5f67ffffffffffffffff8211156124fc576124fb612007565b5b602082029050919050565b5f80fd5b5f61251d612518846124e2565b612065565b9050806020840283018581111561253757612536612507565b5b835b81811015612560578061254c8882612188565b845260208401935050602081019050612539565b5050509392505050565b5f82601f83011261257e5761257d611fef565b5b601861258b84828561250b565b91505092915050565b5f61030082840312156125aa576125a96123de565b5b6125b46020612065565b90505f6125c38482850161256a565b5f8301525092915050565b5f61030082840312156125e4576125e3611ea5565b5b5f6125f184828501612594565b91505092915050565b61260381612365565b82525050565b5f60208201905061261c5f8301846125fa565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f61264682612622565b612650818561262c565b93506126608185602086016122c6565b61266981611ff7565b840191505092915050565b5f6020820190508181035f83015261268c818461263c565b905092915050565b61269d81611f60565b82525050565b5f6020820190506126b65f830184612694565b92915050565b5f6060820190508181035f8301526126d481866122ee565b905081810360208301526126e881856122ee565b905081810360408301526126fc81846122ee565b9050949350505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f61274982612622565b612753818561272f565b93506127638185602086016122c6565b61276c81611ff7565b840191505092915050565b5f612782838361273f565b905092915050565b5f602082019050919050565b5f6127a082612706565b6127aa8185612710565b9350836020820285016127bc85612720565b805f5b858110156127f757848403895281516127d88582612777565b94506127e38361278a565b925060208a019950506001810190506127bf565b50829750879550505050505092915050565b5f6020820190508181035f8301526128218184612796565b905092915050565b5f67ffffffffffffffff82111561284357612842612007565b5b602082029050919050565b5f61286061285b84612829565b612065565b9050806020840283018581111561287a57612879612507565b5b835b818110156128a3578061288f8882612188565b84526020840193505060208101905061287c565b5050509392505050565b5f82601f8301126128c1576128c0611fef565b5b60046128ce84828561284e565b91505092915050565b5f61010082840312156128ed576128ec6123de565b5b6128f760a0612065565b90505f61290684828501612188565b5f830152506020612919848285016128ad565b60208301525060a061292d84828501612188565b60408301525060c061294184828501612188565b60608301525060e061295584828501612188565b60808301525092915050565b5f67ffffffffffffffff82111561297b5761297a612007565b5b602082029050602081019050919050565b5f63ffffffff82169050919050565b6129a48161298c565b81146129ae575f80fd5b50565b5f813590506129bf8161299b565b92915050565b5f608082840312156129da576129d96123de565b5b6129e46080612065565b90505f6129f3848285016129b1565b5f830152506020612a06848285016129b1565b602083015250604082013567ffffffffffffffff811115612a2a57612a296123e2565b5b612a36848285016120fe565b6040830152506060612a4a84828501612188565b60608301525092915050565b5f612a68612a6384612961565b612065565b90508083825260208201905060208402830185811115612a8b57612a8a612507565b5b835b81811015612ad257803567ffffffffffffffff811115612ab057612aaf611fef565b5b808601612abd89826129c5565b85526020850194505050602081019050612a8d565b5050509392505050565b5f82601f830112612af057612aef611fef565b5b8135612b00848260208601612a56565b91505092915050565b5f806101208385031215612b2057612b1f611ea5565b5b5f612b2d858286016128d7565b92505061010083013567ffffffffffffffff811115612b4f57612b4e611ea9565b5b612b5b85828601612adc565b9150509250929050565b5f805f6101408486031215612b7d57612b7c611ea5565b5b5f612b8a868287016128d7565b93505061010084013567ffffffffffffffff811115612bac57612bab611ea9565b5b612bb886828701612adc565b925050610120612bca86828701612188565b9150509250925092565b5f806103208385031215612beb57612bea611ea5565b5b5f612bf885828601612594565b925050610300612c0a85828601612188565b9150509250929050565b5f60208284031215612c2957612c28611ea5565b5b5f612c368482850161238c565b91505092915050565b7f446174612073697a652065786365656473206c696d69740000000000000000005f82015250565b5f612c7360178361262c565b9150612c7e82612c3f565b602082019050919050565b5f6020820190508181035f830152612ca081612c67565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612ceb57607f821691505b602082108103612cfe57612cfd612ca7565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612d607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d25565b612d6a8683612d25565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612da5612da0612d9b84611f60565b612d82565b611f60565b9050919050565b5f819050919050565b612dbe83612d8b565b612dd2612dca82612dac565b848454612d31565b825550505050565b5f90565b612de6612dda565b612df1818484612db5565b505050565b5b81811015612e1457612e095f82612dde565b600181019050612df7565b5050565b601f821115612e5957612e2a81612d04565b612e3384612d16565b81016020851015612e42578190505b612e56612e4e85612d16565b830182612df6565b50505b505050565b5f82821c905092915050565b5f612e795f1984600802612e5e565b1980831691505092915050565b5f612e918383612e6a565b9150826002028217905092915050565b612eaa826122ac565b67ffffffffffffffff811115612ec357612ec2612007565b5b612ecd8254612cd4565b612ed8828285612e18565b5f60209050601f831160018114612f09575f8415612ef7578287015190505b612f018582612e86565b865550612f68565b601f198416612f1786612d04565b5f5b82811015612f3e57848901518255600182019150602085019450602081019050612f19565b86831015612f5b5784890151612f57601f891682612e6a565b8355505b6001600288020188555050505b505050505050565b5f604082019050612f835f830185611fc7565b612f9060208301846125fa565b9392505050565b5f819050815f5260205f209050919050565b601f821115612fea57612fbb81612f97565b612fc484612d16565b81016020851015612fd3578190505b612fe7612fdf85612d16565b830182612df6565b50505b505050565b612ff882612622565b67ffffffffffffffff81111561301157613010612007565b5b61301b8254612cd4565b613026828285612fa9565b5f60209050601f831160018114613057575f8415613045578287015190505b61304f8582612e86565b8655506130b6565b601f19841661306586612f97565b5f5b8281101561308c57848901518255600182019150602085019450602081019050613067565b868310156130a957848901516130a5601f891682612e6a565b8355505b6001600288020188555050505b505050505050565b5f6040820190508181035f8301526130d6818561263c565b90506130e560208301846125fa565b9392505050565b5f82825260208201905092915050565b5f613106826122ac565b61311081856130ec565b93506131208185602086016122c6565b61312981611ff7565b840191505092915050565b5f606083015f8301518482035f86015261314e82826130fc565b9150506020830151848203602086015261316882826130fc565b9150506040830151848203604086015261318282826130fc565b9150508091505092915050565b5f6040820190506131a25f8301856125fa565b81810360208301526131b48184613134565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f8160601b9050919050565b5f613200826131ea565b9050919050565b5f613211826131f6565b9050919050565b61322961322482612365565b613207565b82525050565b5f819050919050565b61324961324482611fbe565b61322f565b82525050565b5f61325a8287613218565b60148201915061326a8286613238565b60208201915061327a8285613238565b60208201915061328a8284613238565b60208201915081905095945050505050565b5f81905092915050565b5f6132b082612622565b6132ba818561329c565b93506132ca8185602086016122c6565b80840191505092915050565b5f6132e182846132a6565b915081905092915050565b5f81546132f881612cd4565b613302818661329c565b9450600182165f811461331c576001811461333157613363565b60ff1983168652811515820286019350613363565b61333a85612f97565b5f5b8381101561335b5781548189015260018201915060208101905061333c565b838801955050505b50505092915050565b5f61337782846132ec565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6133b982611f60565b91506133c483611f60565b92508282039050818111156133dc576133db613382565b5b92915050565b5f815490506133f081612cd4565b9050919050565b5f819050815f5260205f209050919050565b8181036134175750506134ec565b613420826133e2565b67ffffffffffffffff81111561343957613438612007565b5b6134438254612cd4565b61344e828285612fa9565b5f601f83116001811461347b575f8415613469578287015490505b6134738582612e86565b8655506134e5565b601f198416613489876133f7565b965061349486612f97565b5f5b828110156134bb57848901548255600182019150600185019450602081019050613496565b868310156134d857848901546134d4601f891682612e6a565b8355505b6001600288020188555050505b5050505050505b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f4964656e74697479206e6f742077686974656c697374656400000000000000005f82015250565b5f61354f60188361262c565b915061355a8261351b565b602082019050919050565b5f6020820190508181035f83015261357c81613543565b9050919050565b7f436f6e66696720646f6573206e6f7420657869737400000000000000000000005f82015250565b5f6135b760158361262c565b91506135c282613583565b602082019050919050565b5f6020820190508181035f8301526135e4816135ab565b9050919050565b5f6060820190506135fe5f830186611fc7565b61360b6020830185611fc7565b61361860408301846125fa565b949350505050565b5f6040820190506136335f8301856125fa565b6136406020830184611fc7565b939250505056fea26469706673582212203d4bbed5161d4d18824d9e3adba41ce8442fbeccd7b9b0b3b56b60846a11883264736f6c63430008170033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0xdf4ffe90.
//
// Solidity: function DCAPIdentity((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCaller) DCAPIdentity(opts *bind.CallOpts, report RegistryDCAPReport, arg1 []RegistryDCAPEvent) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DCAPIdentity", report, arg1)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DCAPIdentity is a free data retrieval call binding the contract method 0xdf4ffe90.
//
// Solidity: function DCAPIdentity((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistrySession) DCAPIdentity(report RegistryDCAPReport, arg1 []RegistryDCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0xdf4ffe90.
//
// Solidity: function DCAPIdentity((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) DCAPIdentity(report RegistryDCAPReport, arg1 []RegistryDCAPEvent) ([32]byte, error) {
	return _Registry.Contract.DCAPIdentity(&_Registry.CallOpts, report, arg1)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistrySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Registry *RegistryCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Registry.Contract.DEFAULTADMINROLE(&_Registry.CallOpts)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCaller) MAAIdentity(opts *bind.CallOpts, report RegistryMAAReport) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAAIdentity", report)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistrySession) MAAIdentity(report RegistryMAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Registry *RegistryCallerSession) MAAIdentity(report RegistryMAAReport) ([32]byte, error) {
	return _Registry.Contract.MAAIdentity(&_Registry.CallOpts, report)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCaller) MAXBYTESSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "MAX_BYTES_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistrySession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Registry *RegistryCallerSession) MAXBYTESSIZE() (*big.Int, error) {
	return _Registry.Contract.MAXBYTESSIZE(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEINSTANCE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_INSTANCE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistrySession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEINSTANCE is a free data retrieval call binding the contract method 0x53f24b6d.
//
// Solidity: function ROLE_INSTANCE() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEINSTANCE() ([32]byte, error) {
	return _Registry.Contract.ROLEINSTANCE(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEMETADATA(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_METADATA")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistrySession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEMETADATA is a free data retrieval call binding the contract method 0x8404c1a3.
//
// Solidity: function ROLE_METADATA() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEMETADATA() ([32]byte, error) {
	return _Registry.Contract.ROLEMETADATA(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCaller) ROLEOPERATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "ROLE_OPERATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistrySession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Registry *RegistryCallerSession) ROLEOPERATOR() ([32]byte, error) {
	return _Registry.Contract.ROLEOPERATOR(&_Registry.CallOpts)
}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistryCaller) AllInstanceDomainNames(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "allInstanceDomainNames")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistrySession) AllInstanceDomainNames() ([]string, error) {
	return _Registry.Contract.AllInstanceDomainNames(&_Registry.CallOpts)
}

// AllInstanceDomainNames is a free data retrieval call binding the contract method 0xd12847a6.
//
// Solidity: function allInstanceDomainNames() view returns(string[])
func (_Registry *RegistryCallerSession) AllInstanceDomainNames() ([]string, error) {
	return _Registry.Contract.AllInstanceDomainNames(&_Registry.CallOpts)
}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistryCaller) AllStorageBackends(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "allStorageBackends")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistrySession) AllStorageBackends() ([]string, error) {
	return _Registry.Contract.AllStorageBackends(&_Registry.CallOpts)
}

// AllStorageBackends is a free data retrieval call binding the contract method 0xc7d77a9d.
//
// Solidity: function allStorageBackends() view returns(string[])
func (_Registry *RegistryCallerSession) AllStorageBackends() ([]string, error) {
	return _Registry.Contract.AllStorageBackends(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCaller) AppPki(opts *bind.CallOpts) (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "app_pki")

	outstruct := new(struct {
		Ca          []byte
		Pubkey      []byte
		Attestation []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Ca = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Pubkey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Attestation = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistrySession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Registry *RegistryCallerSession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Registry.Contract.AppPki(&_Registry.CallOpts)
}

// Configs is a free data retrieval call binding the contract method 0xce8f6078.
//
// Solidity: function configs(bytes32 ) view returns(bytes)
func (_Registry *RegistryCaller) Configs(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "configs", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Configs is a free data retrieval call binding the contract method 0xce8f6078.
//
// Solidity: function configs(bytes32 ) view returns(bytes)
func (_Registry *RegistrySession) Configs(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Configs(&_Registry.CallOpts, arg0)
}

// Configs is a free data retrieval call binding the contract method 0xce8f6078.
//
// Solidity: function configs(bytes32 ) view returns(bytes)
func (_Registry *RegistryCallerSession) Configs(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.Configs(&_Registry.CallOpts, arg0)
}

// EncryptedSecrets is a free data retrieval call binding the contract method 0x2ae72484.
//
// Solidity: function encryptedSecrets(bytes32 ) view returns(bytes)
func (_Registry *RegistryCaller) EncryptedSecrets(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "encryptedSecrets", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncryptedSecrets is a free data retrieval call binding the contract method 0x2ae72484.
//
// Solidity: function encryptedSecrets(bytes32 ) view returns(bytes)
func (_Registry *RegistrySession) EncryptedSecrets(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.EncryptedSecrets(&_Registry.CallOpts, arg0)
}

// EncryptedSecrets is a free data retrieval call binding the contract method 0x2ae72484.
//
// Solidity: function encryptedSecrets(bytes32 ) view returns(bytes)
func (_Registry *RegistryCallerSession) EncryptedSecrets(arg0 [32]byte) ([]byte, error) {
	return _Registry.Contract.EncryptedSecrets(&_Registry.CallOpts, arg0)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistrySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Registry.Contract.GetRoleAdmin(&_Registry.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistrySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Registry *RegistryCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Registry.Contract.HasRole(&_Registry.CallOpts, role, account)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCaller) IdentityConfigMap(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "identityConfigMap", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistrySession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// IdentityConfigMap is a free data retrieval call binding the contract method 0xd4f72ac1.
//
// Solidity: function identityConfigMap(bytes32 ) view returns(bytes32)
func (_Registry *RegistryCallerSession) IdentityConfigMap(arg0 [32]byte) ([32]byte, error) {
	return _Registry.Contract.IdentityConfigMap(&_Registry.CallOpts, arg0)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCaller) InstanceDomainNames(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "instanceDomainNames", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistrySession) InstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts, arg0)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x9936b92b.
//
// Solidity: function instanceDomainNames(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) InstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Registry.Contract.InstanceDomainNames(&_Registry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistrySession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCallerSession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// RegisteredIdentities is a free data retrieval call binding the contract method 0x11eeaf08.
//
// Solidity: function registeredIdentities(uint256 ) view returns(bytes32)
func (_Registry *RegistryCaller) RegisteredIdentities(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "registeredIdentities", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RegisteredIdentities is a free data retrieval call binding the contract method 0x11eeaf08.
//
// Solidity: function registeredIdentities(uint256 ) view returns(bytes32)
func (_Registry *RegistrySession) RegisteredIdentities(arg0 *big.Int) ([32]byte, error) {
	return _Registry.Contract.RegisteredIdentities(&_Registry.CallOpts, arg0)
}

// RegisteredIdentities is a free data retrieval call binding the contract method 0x11eeaf08.
//
// Solidity: function registeredIdentities(uint256 ) view returns(bytes32)
func (_Registry *RegistryCallerSession) RegisteredIdentities(arg0 *big.Int) ([32]byte, error) {
	return _Registry.Contract.RegisteredIdentities(&_Registry.CallOpts, arg0)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCaller) StorageBackends(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "storageBackends", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistrySession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts, arg0)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Registry *RegistryCallerSession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Registry.Contract.StorageBackends(&_Registry.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Registry *RegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceId)
}

// WhitelistedIdentities is a free data retrieval call binding the contract method 0xea038f20.
//
// Solidity: function whitelistedIdentities(bytes32 ) view returns(bool)
func (_Registry *RegistryCaller) WhitelistedIdentities(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "whitelistedIdentities", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WhitelistedIdentities is a free data retrieval call binding the contract method 0xea038f20.
//
// Solidity: function whitelistedIdentities(bytes32 ) view returns(bool)
func (_Registry *RegistrySession) WhitelistedIdentities(arg0 [32]byte) (bool, error) {
	return _Registry.Contract.WhitelistedIdentities(&_Registry.CallOpts, arg0)
}

// WhitelistedIdentities is a free data retrieval call binding the contract method 0xea038f20.
//
// Solidity: function whitelistedIdentities(bytes32 ) view returns(bool)
func (_Registry *RegistryCallerSession) WhitelistedIdentities(arg0 [32]byte) (bool, error) {
	return _Registry.Contract.WhitelistedIdentities(&_Registry.CallOpts, arg0)
}

// AddConfig is a paid mutator transaction binding the contract method 0x14183501.
//
// Solidity: function addConfig(bytes data) returns(bytes32 configHash)
func (_Registry *RegistryTransactor) AddConfig(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addConfig", data)
}

// AddConfig is a paid mutator transaction binding the contract method 0x14183501.
//
// Solidity: function addConfig(bytes data) returns(bytes32 configHash)
func (_Registry *RegistrySession) AddConfig(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddConfig(&_Registry.TransactOpts, data)
}

// AddConfig is a paid mutator transaction binding the contract method 0x14183501.
//
// Solidity: function addConfig(bytes data) returns(bytes32 configHash)
func (_Registry *RegistryTransactorSession) AddConfig(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddConfig(&_Registry.TransactOpts, data)
}

// AddSecret is a paid mutator transaction binding the contract method 0xdc417ad0.
//
// Solidity: function addSecret(bytes data) returns(bytes32 secretHash)
func (_Registry *RegistryTransactor) AddSecret(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addSecret", data)
}

// AddSecret is a paid mutator transaction binding the contract method 0xdc417ad0.
//
// Solidity: function addSecret(bytes data) returns(bytes32 secretHash)
func (_Registry *RegistrySession) AddSecret(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddSecret(&_Registry.TransactOpts, data)
}

// AddSecret is a paid mutator transaction binding the contract method 0xdc417ad0.
//
// Solidity: function addSecret(bytes data) returns(bytes32 secretHash)
func (_Registry *RegistryTransactorSession) AddSecret(data []byte) (*types.Transaction, error) {
	return _Registry.Contract.AddSecret(&_Registry.TransactOpts, data)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantRole(&_Registry.TransactOpts, role, account)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactor) RegisterInstanceDomainName(opts *bind.TransactOpts, domain string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerInstanceDomainName", domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistrySession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Registry *RegistryTransactorSession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Registry.Contract.RegisterInstanceDomainName(&_Registry.TransactOpts, domain)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) RemoveStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeStorageBackend", backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RemoveStorageBackend is a paid mutator transaction binding the contract method 0x9fe18d65.
//
// Solidity: function removeStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) RemoveStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// RemoveWhitelistedIdentity is a paid mutator transaction binding the contract method 0xa507ed5e.
//
// Solidity: function removeWhitelistedIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactor) RemoveWhitelistedIdentity(opts *bind.TransactOpts, identity [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeWhitelistedIdentity", identity)
}

// RemoveWhitelistedIdentity is a paid mutator transaction binding the contract method 0xa507ed5e.
//
// Solidity: function removeWhitelistedIdentity(bytes32 identity) returns()
func (_Registry *RegistrySession) RemoveWhitelistedIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveWhitelistedIdentity(&_Registry.TransactOpts, identity)
}

// RemoveWhitelistedIdentity is a paid mutator transaction binding the contract method 0xa507ed5e.
//
// Solidity: function removeWhitelistedIdentity(bytes32 identity) returns()
func (_Registry *RegistryTransactorSession) RemoveWhitelistedIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveWhitelistedIdentity(&_Registry.TransactOpts, identity)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistrySession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Registry *RegistryTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RenounceRole(&_Registry.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistrySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Registry *RegistryTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeRole(&_Registry.TransactOpts, role, account)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0xe058d5de.
//
// Solidity: function setConfigForDCAP((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForDCAP(opts *bind.TransactOpts, report RegistryDCAPReport, eventLog []RegistryDCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForDCAP", report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0xe058d5de.
//
// Solidity: function setConfigForDCAP((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForDCAP(report RegistryDCAPReport, eventLog []RegistryDCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForDCAP is a paid mutator transaction binding the contract method 0xe058d5de.
//
// Solidity: function setConfigForDCAP((bytes32,bytes32[4],bytes32,bytes32,bytes32) report, (uint32,uint32,bytes,bytes32)[] eventLog, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForDCAP(report RegistryDCAPReport, eventLog []RegistryDCAPEvent, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForDCAP(&_Registry.TransactOpts, report, eventLog, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactor) SetConfigForMAA(opts *bind.TransactOpts, report RegistryMAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfigForMAA", report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistrySession) SetConfigForMAA(report RegistryMAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetConfigForMAA is a paid mutator transaction binding the contract method 0xed1fce63.
//
// Solidity: function setConfigForMAA((bytes32[24]) report, bytes32 configHash) returns()
func (_Registry *RegistryTransactorSession) SetConfigForMAA(report RegistryMAAReport, configHash [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.SetConfigForMAA(&_Registry.TransactOpts, report, configHash)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactor) SetPKI(opts *bind.TransactOpts, pki RegistryAppPKI) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setPKI", pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistrySession) SetPKI(pki RegistryAppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Registry *RegistryTransactorSession) SetPKI(pki RegistryAppPKI) (*types.Transaction, error) {
	return _Registry.Contract.SetPKI(&_Registry.TransactOpts, pki)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactor) SetStorageBackend(opts *bind.TransactOpts, backendLocation string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setStorageBackend", backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistrySession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// SetStorageBackend is a paid mutator transaction binding the contract method 0x27ae3ad9.
//
// Solidity: function setStorageBackend(string backendLocation) returns()
func (_Registry *RegistryTransactorSession) SetStorageBackend(backendLocation string) (*types.Transaction, error) {
	return _Registry.Contract.SetStorageBackend(&_Registry.TransactOpts, backendLocation)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// RegistryConfigAddedIterator is returned from FilterConfigAdded and is used to iterate over the raw logs and unpacked data for ConfigAdded events raised by the Registry contract.
type RegistryConfigAddedIterator struct {
	Event *RegistryConfigAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryConfigAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryConfigAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryConfigAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryConfigAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryConfigAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryConfigAdded represents a ConfigAdded event raised by the Registry contract.
type RegistryConfigAdded struct {
	ConfigHash [32]byte
	Adder      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterConfigAdded is a free log retrieval operation binding the contract event 0xd8d5a986d6bd38f304e9e9a49f20606dab678138175ec66900d60cd428a84f8c.
//
// Solidity: event ConfigAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) FilterConfigAdded(opts *bind.FilterOpts) (*RegistryConfigAddedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ConfigAdded")
	if err != nil {
		return nil, err
	}
	return &RegistryConfigAddedIterator{contract: _Registry.contract, event: "ConfigAdded", logs: logs, sub: sub}, nil
}

// WatchConfigAdded is a free log subscription operation binding the contract event 0xd8d5a986d6bd38f304e9e9a49f20606dab678138175ec66900d60cd428a84f8c.
//
// Solidity: event ConfigAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) WatchConfigAdded(opts *bind.WatchOpts, sink chan<- *RegistryConfigAdded) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ConfigAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryConfigAdded)
				if err := _Registry.contract.UnpackLog(event, "ConfigAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfigAdded is a log parse operation binding the contract event 0xd8d5a986d6bd38f304e9e9a49f20606dab678138175ec66900d60cd428a84f8c.
//
// Solidity: event ConfigAdded(bytes32 configHash, address adder)
func (_Registry *RegistryFilterer) ParseConfigAdded(log types.Log) (*RegistryConfigAdded, error) {
	event := new(RegistryConfigAdded)
	if err := _Registry.contract.UnpackLog(event, "ConfigAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryIdentityConfigSetIterator is returned from FilterIdentityConfigSet and is used to iterate over the raw logs and unpacked data for IdentityConfigSet events raised by the Registry contract.
type RegistryIdentityConfigSetIterator struct {
	Event *RegistryIdentityConfigSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryIdentityConfigSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryIdentityConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryIdentityConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryIdentityConfigSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryIdentityConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryIdentityConfigSet represents a IdentityConfigSet event raised by the Registry contract.
type RegistryIdentityConfigSet struct {
	Identity   [32]byte
	ConfigHash [32]byte
	Setter     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterIdentityConfigSet is a free log retrieval operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) FilterIdentityConfigSet(opts *bind.FilterOpts) (*RegistryIdentityConfigSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return &RegistryIdentityConfigSetIterator{contract: _Registry.contract, event: "IdentityConfigSet", logs: logs, sub: sub}, nil
}

// WatchIdentityConfigSet is a free log subscription operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) WatchIdentityConfigSet(opts *bind.WatchOpts, sink chan<- *RegistryIdentityConfigSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "IdentityConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryIdentityConfigSet)
				if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIdentityConfigSet is a log parse operation binding the contract event 0x612c411f843e4588de9fb22a49cf8c4ef009c7943e145b5682bc64cc41411cbe.
//
// Solidity: event IdentityConfigSet(bytes32 identity, bytes32 configHash, address setter)
func (_Registry *RegistryFilterer) ParseIdentityConfigSet(log types.Log) (*RegistryIdentityConfigSet, error) {
	event := new(RegistryIdentityConfigSet)
	if err := _Registry.contract.UnpackLog(event, "IdentityConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryInstanceDomainRegisteredIterator is returned from FilterInstanceDomainRegistered and is used to iterate over the raw logs and unpacked data for InstanceDomainRegistered events raised by the Registry contract.
type RegistryInstanceDomainRegisteredIterator struct {
	Event *RegistryInstanceDomainRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryInstanceDomainRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryInstanceDomainRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryInstanceDomainRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryInstanceDomainRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryInstanceDomainRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryInstanceDomainRegistered represents a InstanceDomainRegistered event raised by the Registry contract.
type RegistryInstanceDomainRegistered struct {
	Domain    string
	Registrar common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInstanceDomainRegistered is a free log retrieval operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) FilterInstanceDomainRegistered(opts *bind.FilterOpts) (*RegistryInstanceDomainRegisteredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return &RegistryInstanceDomainRegisteredIterator{contract: _Registry.contract, event: "InstanceDomainRegistered", logs: logs, sub: sub}, nil
}

// WatchInstanceDomainRegistered is a free log subscription operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) WatchInstanceDomainRegistered(opts *bind.WatchOpts, sink chan<- *RegistryInstanceDomainRegistered) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryInstanceDomainRegistered)
				if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstanceDomainRegistered is a log parse operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Registry *RegistryFilterer) ParseInstanceDomainRegistered(log types.Log) (*RegistryInstanceDomainRegistered, error) {
	event := new(RegistryInstanceDomainRegistered)
	if err := _Registry.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Registry contract.
type RegistryOwnershipTransferredIterator struct {
	Event *RegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipTransferred represents a OwnershipTransferred event raised by the Registry contract.
type RegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipTransferredIterator{contract: _Registry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipTransferred)
				if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) ParseOwnershipTransferred(log types.Log) (*RegistryOwnershipTransferred, error) {
	event := new(RegistryOwnershipTransferred)
	if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryPKIUpdatedIterator is returned from FilterPKIUpdated and is used to iterate over the raw logs and unpacked data for PKIUpdated events raised by the Registry contract.
type RegistryPKIUpdatedIterator struct {
	Event *RegistryPKIUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryPKIUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryPKIUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryPKIUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryPKIUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryPKIUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryPKIUpdated represents a PKIUpdated event raised by the Registry contract.
type RegistryPKIUpdated struct {
	Updater common.Address
	Pki     RegistryAppPKI
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPKIUpdated is a free log retrieval operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) FilterPKIUpdated(opts *bind.FilterOpts) (*RegistryPKIUpdatedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return &RegistryPKIUpdatedIterator{contract: _Registry.contract, event: "PKIUpdated", logs: logs, sub: sub}, nil
}

// WatchPKIUpdated is a free log subscription operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) WatchPKIUpdated(opts *bind.WatchOpts, sink chan<- *RegistryPKIUpdated) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryPKIUpdated)
				if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePKIUpdated is a log parse operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Registry *RegistryFilterer) ParsePKIUpdated(log types.Log) (*RegistryPKIUpdated, error) {
	event := new(RegistryPKIUpdated)
	if err := _Registry.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRegistryPausedIterator is returned from FilterRegistryPaused and is used to iterate over the raw logs and unpacked data for RegistryPaused events raised by the Registry contract.
type RegistryRegistryPausedIterator struct {
	Event *RegistryRegistryPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegistryPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegistryPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegistryPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegistryPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegistryPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegistryPaused represents a RegistryPaused event raised by the Registry contract.
type RegistryRegistryPaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRegistryPaused is a free log retrieval operation binding the contract event 0x0791e63d77b61bb6580956f9ccd39556c860ae1c97847fe2ee766e1d361b6baf.
//
// Solidity: event RegistryPaused(address pauser)
func (_Registry *RegistryFilterer) FilterRegistryPaused(opts *bind.FilterOpts) (*RegistryRegistryPausedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RegistryPaused")
	if err != nil {
		return nil, err
	}
	return &RegistryRegistryPausedIterator{contract: _Registry.contract, event: "RegistryPaused", logs: logs, sub: sub}, nil
}

// WatchRegistryPaused is a free log subscription operation binding the contract event 0x0791e63d77b61bb6580956f9ccd39556c860ae1c97847fe2ee766e1d361b6baf.
//
// Solidity: event RegistryPaused(address pauser)
func (_Registry *RegistryFilterer) WatchRegistryPaused(opts *bind.WatchOpts, sink chan<- *RegistryRegistryPaused) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RegistryPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegistryPaused)
				if err := _Registry.contract.UnpackLog(event, "RegistryPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistryPaused is a log parse operation binding the contract event 0x0791e63d77b61bb6580956f9ccd39556c860ae1c97847fe2ee766e1d361b6baf.
//
// Solidity: event RegistryPaused(address pauser)
func (_Registry *RegistryFilterer) ParseRegistryPaused(log types.Log) (*RegistryRegistryPaused, error) {
	event := new(RegistryRegistryPaused)
	if err := _Registry.contract.UnpackLog(event, "RegistryPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRegistryUnpausedIterator is returned from FilterRegistryUnpaused and is used to iterate over the raw logs and unpacked data for RegistryUnpaused events raised by the Registry contract.
type RegistryRegistryUnpausedIterator struct {
	Event *RegistryRegistryUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegistryUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegistryUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegistryUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegistryUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegistryUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegistryUnpaused represents a RegistryUnpaused event raised by the Registry contract.
type RegistryRegistryUnpaused struct {
	Unpauser common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRegistryUnpaused is a free log retrieval operation binding the contract event 0x9ba7d7851c953f6a5f0aad8bccc53ba3ecfe15944a69b407b3be74189f469818.
//
// Solidity: event RegistryUnpaused(address unpauser)
func (_Registry *RegistryFilterer) FilterRegistryUnpaused(opts *bind.FilterOpts) (*RegistryRegistryUnpausedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RegistryUnpaused")
	if err != nil {
		return nil, err
	}
	return &RegistryRegistryUnpausedIterator{contract: _Registry.contract, event: "RegistryUnpaused", logs: logs, sub: sub}, nil
}

// WatchRegistryUnpaused is a free log subscription operation binding the contract event 0x9ba7d7851c953f6a5f0aad8bccc53ba3ecfe15944a69b407b3be74189f469818.
//
// Solidity: event RegistryUnpaused(address unpauser)
func (_Registry *RegistryFilterer) WatchRegistryUnpaused(opts *bind.WatchOpts, sink chan<- *RegistryRegistryUnpaused) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RegistryUnpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegistryUnpaused)
				if err := _Registry.contract.UnpackLog(event, "RegistryUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistryUnpaused is a log parse operation binding the contract event 0x9ba7d7851c953f6a5f0aad8bccc53ba3ecfe15944a69b407b3be74189f469818.
//
// Solidity: event RegistryUnpaused(address unpauser)
func (_Registry *RegistryFilterer) ParseRegistryUnpaused(log types.Log) (*RegistryRegistryUnpaused, error) {
	event := new(RegistryRegistryUnpaused)
	if err := _Registry.contract.UnpackLog(event, "RegistryUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Registry contract.
type RegistryRoleAdminChangedIterator struct {
	Event *RegistryRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleAdminChanged represents a RoleAdminChanged event raised by the Registry contract.
type RegistryRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*RegistryRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleAdminChangedIterator{contract: _Registry.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *RegistryRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleAdminChanged)
				if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Registry *RegistryFilterer) ParseRoleAdminChanged(log types.Log) (*RegistryRoleAdminChanged, error) {
	event := new(RegistryRoleAdminChanged)
	if err := _Registry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Registry contract.
type RegistryRoleGrantedIterator struct {
	Event *RegistryRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleGranted represents a RoleGranted event raised by the Registry contract.
type RegistryRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleGrantedIterator{contract: _Registry.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *RegistryRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleGranted)
				if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleGranted(log types.Log) (*RegistryRoleGranted, error) {
	event := new(RegistryRoleGranted)
	if err := _Registry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Registry contract.
type RegistryRoleRevokedIterator struct {
	Event *RegistryRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRoleRevoked represents a RoleRevoked event raised by the Registry contract.
type RegistryRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistryRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRoleRevokedIterator{contract: _Registry.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *RegistryRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRoleRevoked)
				if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Registry *RegistryFilterer) ParseRoleRevoked(log types.Log) (*RegistryRoleRevoked, error) {
	event := new(RegistryRoleRevoked)
	if err := _Registry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrySecretAddedIterator is returned from FilterSecretAdded and is used to iterate over the raw logs and unpacked data for SecretAdded events raised by the Registry contract.
type RegistrySecretAddedIterator struct {
	Event *RegistrySecretAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrySecretAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrySecretAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrySecretAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrySecretAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrySecretAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrySecretAdded represents a SecretAdded event raised by the Registry contract.
type RegistrySecretAdded struct {
	SecretHash [32]byte
	Adder      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSecretAdded is a free log retrieval operation binding the contract event 0x919e32d0a2c077022da30736bae270ea1cd16c55bc01c1ea7235f5b79cc4282c.
//
// Solidity: event SecretAdded(bytes32 secretHash, address adder)
func (_Registry *RegistryFilterer) FilterSecretAdded(opts *bind.FilterOpts) (*RegistrySecretAddedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "SecretAdded")
	if err != nil {
		return nil, err
	}
	return &RegistrySecretAddedIterator{contract: _Registry.contract, event: "SecretAdded", logs: logs, sub: sub}, nil
}

// WatchSecretAdded is a free log subscription operation binding the contract event 0x919e32d0a2c077022da30736bae270ea1cd16c55bc01c1ea7235f5b79cc4282c.
//
// Solidity: event SecretAdded(bytes32 secretHash, address adder)
func (_Registry *RegistryFilterer) WatchSecretAdded(opts *bind.WatchOpts, sink chan<- *RegistrySecretAdded) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "SecretAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrySecretAdded)
				if err := _Registry.contract.UnpackLog(event, "SecretAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSecretAdded is a log parse operation binding the contract event 0x919e32d0a2c077022da30736bae270ea1cd16c55bc01c1ea7235f5b79cc4282c.
//
// Solidity: event SecretAdded(bytes32 secretHash, address adder)
func (_Registry *RegistryFilterer) ParseSecretAdded(log types.Log) (*RegistrySecretAdded, error) {
	event := new(RegistrySecretAdded)
	if err := _Registry.contract.UnpackLog(event, "SecretAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendRemovedIterator is returned from FilterStorageBackendRemoved and is used to iterate over the raw logs and unpacked data for StorageBackendRemoved events raised by the Registry contract.
type RegistryStorageBackendRemovedIterator struct {
	Event *RegistryStorageBackendRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendRemoved represents a StorageBackendRemoved event raised by the Registry contract.
type RegistryStorageBackendRemoved struct {
	Location string
	Remover  common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendRemoved is a free log retrieval operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) FilterStorageBackendRemoved(opts *bind.FilterOpts) (*RegistryStorageBackendRemovedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendRemovedIterator{contract: _Registry.contract, event: "StorageBackendRemoved", logs: logs, sub: sub}, nil
}

// WatchStorageBackendRemoved is a free log subscription operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) WatchStorageBackendRemoved(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendRemoved) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendRemoved)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendRemoved is a log parse operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Registry *RegistryFilterer) ParseStorageBackendRemoved(log types.Log) (*RegistryStorageBackendRemoved, error) {
	event := new(RegistryStorageBackendRemoved)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryStorageBackendSetIterator is returned from FilterStorageBackendSet and is used to iterate over the raw logs and unpacked data for StorageBackendSet events raised by the Registry contract.
type RegistryStorageBackendSetIterator struct {
	Event *RegistryStorageBackendSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStorageBackendSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStorageBackendSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStorageBackendSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStorageBackendSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStorageBackendSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStorageBackendSet represents a StorageBackendSet event raised by the Registry contract.
type RegistryStorageBackendSet struct {
	Location string
	Setter   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendSet is a free log retrieval operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) FilterStorageBackendSet(opts *bind.FilterOpts) (*RegistryStorageBackendSetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return &RegistryStorageBackendSetIterator{contract: _Registry.contract, event: "StorageBackendSet", logs: logs, sub: sub}, nil
}

// WatchStorageBackendSet is a free log subscription operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) WatchStorageBackendSet(opts *bind.WatchOpts, sink chan<- *RegistryStorageBackendSet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStorageBackendSet)
				if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendSet is a log parse operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Registry *RegistryFilterer) ParseStorageBackendSet(log types.Log) (*RegistryStorageBackendSet, error) {
	event := new(RegistryStorageBackendSet)
	if err := _Registry.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
