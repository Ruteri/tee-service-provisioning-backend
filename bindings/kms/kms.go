// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package kms

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AppPKI is an auto generated low-level Go binding around an user-defined struct.
type AppPKI struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}

// DCAPEvent is an auto generated low-level Go binding around an user-defined struct.
type DCAPEvent struct {
	Index        uint32
	EventType    uint32
	EventPayload []byte
	Digest       [32]byte
}

// DCAPReport is an auto generated low-level Go binding around an user-defined struct.
type DCAPReport struct {
	MrTd          []byte
	RTMRs         [4][]byte
	MrOwner       []byte
	MrConfigId    []byte
	MrConfigOwner []byte
}

// MAAReport is an auto generated low-level Go binding around an user-defined struct.
type MAAReport struct {
	PCRs [24][32]byte
}

// OnboardRequest is an auto generated low-level Go binding around an user-defined struct.
type OnboardRequest struct {
	Pubkey      []byte
	Nonce       *big.Int
	Operator    common.Address
	Attestation []byte
}

// KmsMetaData contains all meta data concerning the Kms contract.
var KmsMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"AllowApplication\",\"inputs\":[{\"name\":\"app\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ApplicationAllowed\",\"inputs\":[{\"name\":\"app\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DCAPIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"HashOnboardRequest\",\"inputs\":[{\"name\":\"req\",\"type\":\"tuple\",\"internalType\":\"structOnboardRequest\",\"components\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[{\"name\":\"reqHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"IdentityAllowed\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"InstanceDomainNames\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAAIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_BYTES_SIZE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PKI\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_OPERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"RemoveAllowlistedApplication\",\"inputs\":[{\"name\":\"app\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowlistDCAP\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowlistIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowlistMAA\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowlistedIdentities\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"app_pki\",\"inputs\":[],\"outputs\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"artifacts\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"fetchOnboardRequest\",\"inputs\":[{\"name\":\"reqHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structOnboardRequest\",\"components\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"m_instanceDomainNames\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"onboardRequests\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerInstanceDomainName\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeAllowlistedIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"requestOnboard\",\"inputs\":[{\"name\":\"req\",\"type\":\"tuple\",\"internalType\":\"structOnboardRequest\",\"components\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[{\"name\":\"reqHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPKI\",\"inputs\":[{\"name\":\"pki\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"storageBackends\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ArtifactAdded\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"adder\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"IdentityAllowlisted\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InstanceDomainRegistered\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"registrar\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PKIUpdated\",\"inputs\":[{\"name\":\"updater\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pki\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendRemoved\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"remover\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendSet\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]}]",
	Bin: "0x608060405234801562000010575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000085575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007c919062000358565b60405180910390fd5b6200009681620000ed60201b60201c565b506001600281905550620000b35f801b33620001b060201b60201c565b50620000e67faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da733620001b060201b60201c565b5062000373565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f620001c38383620002ab60201b60201c565b620002a15760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506200023d6200030e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050620002a5565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620003408262000315565b9050919050565b620003528162000334565b82525050565b5f6020820190506200036d5f83018462000347565b92915050565b613e8c80620003815f395ff3fe608060405234801561000f575f80fd5b506004361061020f575f3560e01c80638da5cb5b11610123578063b5e3be7a116100ab578063da4fddef1161007a578063da4fddef14610688578063e712f5b2146106a4578063f2fde38b146106d4578063f588d2fc146106f0578063fb2e19ec146107205761020f565b8063b5e3be7a146105ec578063c0f1340b1461061c578063c2f384791461064c578063d547741f1461066c5761020f565b8063a217fddf116100f2578063a217fddf14610532578063a63e3a3714610550578063a9ac54e914610580578063aa539d261461059e578063aaae748e146105ce5761020f565b80638da5cb5b146104935780639087f2b0146104b157806391d14854146104e457806398a1b397146105145761020f565b806336a70c78116101a657806370c608d61161017557806370c608d6146103ef578063715018a61461040d5780637182ee201461041757806373fe8cc414610447578063863c43d4146104635761020f565b806336a70c78146103435780635a69887d146103735780636511dbe2146103a35780636c3e695d146103d35761020f565b8063248a9ca3116101e2578063248a9ca3146102bf5780632f2ff15d146102ef578063322febce1461030b57806336568abe146103275761020f565b806301ffc9a7146102135780630adb7b5b146102435780631301b9ff1461025f5780631619e3451461028f575b5f80fd5b61022d6004803603810190610228919061231d565b61073c565b60405161023a9190612362565b60405180910390f35b61025d600480360381019061025891906123d5565b6107b5565b005b61027960048036038101906102749190612624565b61093a565b6040516102869190612683565b60405180910390f35b6102a960048036038101906102a491906126c6565b610a77565b6040516102b69190612362565b60405180910390f35b6102d960048036038101906102d49190612704565b610b0e565b6040516102e69190612683565b60405180910390f35b610309600480360381019061030491906126c6565b610b2a565b005b61032560048036038101906103209190612704565b610b4c565b005b610341600480360381019061033c91906126c6565b610b77565b005b61035d600480360381019061035891906123d5565b610bf2565b60405161036a9190612362565b60405180910390f35b61038d60048036038101906103889190612abc565b610c94565b60405161039a9190612683565b60405180910390f35b6103bd60048036038101906103b89190612b65565b610fbb565b6040516103ca9190612c0a565b60405180910390f35b6103ed60048036038101906103e89190612cdf565b611061565b005b6103f76111ce565b6040516104049190612e29565b60405180910390f35b6104156112a2565b005b610431600480360381019061042c9190612f31565b6112b5565b60405161043e9190612683565b60405180910390f35b610461600480360381019061045c9190612ffb565b6112d7565b005b61047d60048036038101906104789190612f31565b611370565b60405161048a9190612683565b60405180910390f35b61049b6113f6565b6040516104a89190613051565b60405180910390f35b6104cb60048036038101906104c69190612704565b61141e565b6040516104db94939291906130cb565b60405180910390f35b6104fe60048036038101906104f991906126c6565b611575565b60405161050b9190612362565b60405180910390f35b61051c6115d8565b6040516105299190612683565b60405180910390f35b61053a6115fc565b6040516105479190612683565b60405180910390f35b61056a60048036038101906105659190612704565b611602565b604051610577919061311c565b60405180910390f35b61058861169d565b60405161059591906131df565b60405180910390f35b6105b860048036038101906105b39190612b65565b611866565b6040516105c59190612c0a565b60405180910390f35b6105d661190c565b6040516105e3919061320e565b60405180910390f35b61060660048036038101906106019190612624565b611912565b6040516106139190612683565b60405180910390f35b61063660048036038101906106319190613227565b611956565b6040516106439190612683565b60405180910390f35b61065461197c565b6040516106639392919061326e565b60405180910390f35b610686600480360381019061068191906126c6565b611b25565b005b6106a2600480360381019061069d9190612704565b611b47565b005b6106be60048036038101906106b99190612704565b611bb4565b6040516106cb9190612362565b60405180910390f35b6106ee60048036038101906106e991906123d5565b611bd1565b005b61070a60048036038101906107059190612704565b611c55565b604051610717919061333d565b60405180910390f35b61073a600480360381019061073591906123d5565b611dfe565b005b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107ae57506107ad82611e69565b5b9050919050565b6107bd611ed2565b5f5b600b80549050811015610936578173ffffffffffffffffffffffffffffffffffffffff16600b82815481106107f7576107f661335d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361092957600b6001600b8054905061084e91906133b7565b8154811061085f5761085e61335d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b828154811061089b5761089a61335d565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b8054806108f2576108f16133ea565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055610936565b80806001019150506107bf565b5050565b5f7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da761096581611f59565b3373ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff16146109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce90613461565b60405180910390fd5b6109e083611912565b91508260035f8481526020019081526020015f205f820151815f019081610a079190613679565b50602082015181600101556040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019081610a6d9190613679565b5090505050919050565b5f610aa27faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da783611575565b610ae1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad890613792565b60405180910390fd5b60011515600a5f8581526020019081526020015f205f9054906101000a900460ff16151514905092915050565b5f805f8381526020019081526020015f20600101549050919050565b610b3382610b0e565b610b3c81611f59565b610b468383611f6d565b50505050565b610b54611ed2565b600a5f8281526020019081526020015f205f6101000a81549060ff021916905550565b610b7f612056565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610be3576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bed828261205d565b505050565b5f805f90505b600b80549050811015610c8a578273ffffffffffffffffffffffffffffffffffffffff16600b8281548110610c3057610c2f61335d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610c7d576001915050610c8f565b8080600101915050610bf8565b505f90505b919050565b5f6030835f01515114610cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd3906137fa565b60405180910390fd5b603083602001515f60048110610cf557610cf461335d565b5b60200201515114610d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3290613862565b60405180910390fd5b60308360200151600160048110610d5557610d5461335d565b5b60200201515114610d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d92906138ca565b60405180910390fd5b60308360200151600260048110610db557610db461335d565b5b60200201515114610dfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df290613932565b60405180910390fd5b60308360200151600360048110610e1557610e1461335d565b5b60200201515114610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e529061399a565b60405180910390fd5b603083604001515114610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a90613a02565b60405180910390fd5b603083606001515114610eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee290613a6a565b60405180910390fd5b603083608001515114610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a90613ad2565b60405180910390fd5b3083602001515f60048110610f4b57610f4a61335d565b5b60200201518460200151600160048110610f6857610f6761335d565b5b60200201518560200151600260048110610f8557610f8461335d565b5b6020020151604051602001610f9d9493929190613b6f565b60405160208183030381529060405280519060200120905092915050565b60048181548110610fca575f80fd5b905f5260205f20015f915090508054610fe2906134ac565b80601f016020809104026020016040519081016040528092919081815260200182805461100e906134ac565b80156110595780601f1061103057610100808354040283529160200191611059565b820191905f5260205f20905b81548152906001019060200180831161103c57829003601f168201915b505050505081565b611069611ed2565b805f0151615000815111156110b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110aa90613bfa565b60405180910390fd5b8160200151615000815111156110fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f590613bfa565b60405180910390fd5b826040015161500081511115611149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114090613bfa565b60405180910390fd5b8360055f820151815f01908161115f9190613679565b5060208201518160010190816111759190613679565b50604082015181600201908161118b9190613679565b509050507f284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb733856040516111c0929190613c18565b60405180910390a150505050565b60606004805480602002602001604051908101604052809291908181526020015f905b82821015611299578382905f5260205f2001805461120e906134ac565b80601f016020809104026020016040519081016040528092919081815260200182805461123a906134ac565b80156112855780601f1061125c57610100808354040283529160200191611285565b820191905f5260205f20905b81548152906001019060200180831161126857829003601f168201915b5050505050815260200190600101906111f1565b50505050905090565b6112aa611ed2565b6112b35f612146565b565b5f6112be611ed2565b6112c782611370565b90506112d281611b47565b919050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da761130181611f59565b600482908060018154018082558091505060019003905f5260205f20015f9091909190915090816113329190613c9e565b507f1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa8233604051611364929190613d6d565b60405180910390a15050565b5f30825f01516004601881106113895761138861335d565b5b6020020151835f01516009601881106113a5576113a461335d565b5b6020020151845f0151600b601881106113c1576113c061335d565b5b60200201516040516020016113d99493929190613dbb565b604051602081830303815290604052805190602001209050919050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6003602052805f5260405f205f91509050805f01805461143d906134ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611469906134ac565b80156114b45780601f1061148b576101008083540402835291602001916114b4565b820191905f5260205f20905b81548152906001019060200180831161149757829003601f168201915b505050505090806001015490806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546114f4906134ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611520906134ac565b801561156b5780601f106115425761010080835404028352916020019161156b565b820191905f5260205f20905b81548152906001019060200180831161154e57829003601f168201915b5050505050905084565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da781565b5f801b81565b6009602052805f5260405f205f91509050805461161e906134ac565b80601f016020809104026020016040519081016040528092919081815260200182805461164a906134ac565b80156116955780601f1061166c57610100808354040283529160200191611695565b820191905f5260205f20905b81548152906001019060200180831161167857829003601f168201915b505050505081565b6116a561225a565b60056040518060600160405290815f820180546116c1906134ac565b80601f01602080910402602001604051908101604052809291908181526020018280546116ed906134ac565b80156117385780601f1061170f57610100808354040283529160200191611738565b820191905f5260205f20905b81548152906001019060200180831161171b57829003601f168201915b50505050508152602001600182018054611751906134ac565b80601f016020809104026020016040519081016040528092919081815260200182805461177d906134ac565b80156117c85780601f1061179f576101008083540402835291602001916117c8565b820191905f5260205f20905b8154815290600101906020018083116117ab57829003601f168201915b505050505081526020016002820180546117e1906134ac565b80601f016020809104026020016040519081016040528092919081815260200182805461180d906134ac565b80156118585780601f1061182f57610100808354040283529160200191611858565b820191905f5260205f20905b81548152906001019060200180831161183b57829003601f168201915b505050505081525050905090565b60088181548110611875575f80fd5b905f5260205f20015f91509050805461188d906134ac565b80601f01602080910402602001604051908101604052809291908181526020018280546118b9906134ac565b80156119045780601f106118db57610100808354040283529160200191611904565b820191905f5260205f20905b8154815290600101906020018083116118e757829003601f168201915b505050505081565b61500081565b5f815f015182602001518360400151846060015160405160200161193994939291906130cb565b604051602081830303815290604052805190602001209050919050565b5f61195f611ed2565b606061196b8382610c94565b915061197682611b47565b50919050565b6005805f01805461198c906134ac565b80601f01602080910402602001604051908101604052809291908181526020018280546119b8906134ac565b8015611a035780601f106119da57610100808354040283529160200191611a03565b820191905f5260205f20905b8154815290600101906020018083116119e657829003601f168201915b505050505090806001018054611a18906134ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611a44906134ac565b8015611a8f5780601f10611a6657610100808354040283529160200191611a8f565b820191905f5260205f20905b815481529060010190602001808311611a7257829003601f168201915b505050505090806002018054611aa4906134ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611ad0906134ac565b8015611b1b5780601f10611af257610100808354040283529160200191611b1b565b820191905f5260205f20905b815481529060010190602001808311611afe57829003601f168201915b5050505050905083565b611b2e82610b0e565b611b3781611f59565b611b41838361205d565b50505050565b611b4f611ed2565b6001600a5f8381526020019081526020015f205f6101000a81548160ff0219169083151502179055507ff1c63c82bb552724847bbe3164e4b33ba29fd3215457e7a41998f59511ff25ca8133604051611ba9929190613e08565b60405180910390a150565b600a602052805f5260405f205f915054906101000a900460ff1681565b611bd9611ed2565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c49575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611c409190613051565b60405180910390fd5b611c5281612146565b50565b611c5d61227b565b60035f8381526020019081526020015f206040518060800160405290815f82018054611c88906134ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb4906134ac565b8015611cff5780601f10611cd657610100808354040283529160200191611cff565b820191905f5260205f20905b815481529060010190602001808311611ce257829003601f168201915b5050505050815260200160018201548152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054611d77906134ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611da3906134ac565b8015611dee5780601f10611dc557610100808354040283529160200191611dee565b820191905f5260205f20905b815481529060010190602001808311611dd157829003601f168201915b5050505050815250509050919050565b611e06611ed2565b600b81908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611eda612056565b73ffffffffffffffffffffffffffffffffffffffff16611ef86113f6565b73ffffffffffffffffffffffffffffffffffffffff1614611f5757611f1b612056565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611f4e9190613051565b60405180910390fd5b565b611f6a81611f65612056565b612209565b50565b5f611f788383611575565b61204c5760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611fe9612056565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050612050565b5f90505b92915050565b5f33905090565b5f6120688383611575565b1561213c575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506120d9612056565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050612140565b5f90505b92915050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6122138282611575565b6122565780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161224d929190613e2f565b60405180910390fd5b5050565b60405180606001604052806060815260200160608152602001606081525090565b6040518060800160405280606081526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122fc816122c8565b8114612306575f80fd5b50565b5f81359050612317816122f3565b92915050565b5f60208284031215612332576123316122c0565b5b5f61233f84828501612309565b91505092915050565b5f8115159050919050565b61235c81612348565b82525050565b5f6020820190506123755f830184612353565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6123a48261237b565b9050919050565b6123b48161239a565b81146123be575f80fd5b50565b5f813590506123cf816123ab565b92915050565b5f602082840312156123ea576123e96122c0565b5b5f6123f7848285016123c1565b91505092915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61244a82612404565b810181811067ffffffffffffffff8211171561246957612468612414565b5b80604052505050565b5f61247b6122b7565b90506124878282612441565b919050565b5f80fd5b5f80fd5b5f80fd5b5f67ffffffffffffffff8211156124b2576124b1612414565b5b6124bb82612404565b9050602081019050919050565b828183375f83830152505050565b5f6124e86124e384612498565b612472565b90508281526020810184848401111561250457612503612494565b5b61250f8482856124c8565b509392505050565b5f82601f83011261252b5761252a612490565b5b813561253b8482602086016124d6565b91505092915050565b5f819050919050565b61255681612544565b8114612560575f80fd5b50565b5f813590506125718161254d565b92915050565b5f6080828403121561258c5761258b612400565b5b6125966080612472565b90505f82013567ffffffffffffffff8111156125b5576125b461248c565b5b6125c184828501612517565b5f8301525060206125d484828501612563565b60208301525060406125e8848285016123c1565b604083015250606082013567ffffffffffffffff81111561260c5761260b61248c565b5b61261884828501612517565b60608301525092915050565b5f60208284031215612639576126386122c0565b5b5f82013567ffffffffffffffff811115612656576126556122c4565b5b61266284828501612577565b91505092915050565b5f819050919050565b61267d8161266b565b82525050565b5f6020820190506126965f830184612674565b92915050565b6126a58161266b565b81146126af575f80fd5b50565b5f813590506126c08161269c565b92915050565b5f80604083850312156126dc576126db6122c0565b5b5f6126e9858286016126b2565b92505060206126fa858286016123c1565b9150509250929050565b5f60208284031215612719576127186122c0565b5b5f612726848285016126b2565b91505092915050565b5f67ffffffffffffffff82111561274957612748612414565b5b602082029050919050565b5f80fd5b5f61276a6127658461272f565b612472565b9050806020840283018581111561278457612783612754565b5b835b818110156127cb57803567ffffffffffffffff8111156127a9576127a8612490565b5b8086016127b68982612517565b85526020850194505050602081019050612786565b5050509392505050565b5f82601f8301126127e9576127e8612490565b5b60046127f6848285612758565b91505092915050565b5f60a0828403121561281457612813612400565b5b61281e60a0612472565b90505f82013567ffffffffffffffff81111561283d5761283c61248c565b5b61284984828501612517565b5f83015250602082013567ffffffffffffffff81111561286c5761286b61248c565b5b612878848285016127d5565b602083015250604082013567ffffffffffffffff81111561289c5761289b61248c565b5b6128a884828501612517565b604083015250606082013567ffffffffffffffff8111156128cc576128cb61248c565b5b6128d884828501612517565b606083015250608082013567ffffffffffffffff8111156128fc576128fb61248c565b5b61290884828501612517565b60808301525092915050565b5f67ffffffffffffffff82111561292e5761292d612414565b5b602082029050602081019050919050565b5f63ffffffff82169050919050565b6129578161293f565b8114612961575f80fd5b50565b5f813590506129728161294e565b92915050565b5f6080828403121561298d5761298c612400565b5b6129976080612472565b90505f6129a684828501612964565b5f8301525060206129b984828501612964565b602083015250604082013567ffffffffffffffff8111156129dd576129dc61248c565b5b6129e984828501612517565b60408301525060606129fd848285016126b2565b60608301525092915050565b5f612a1b612a1684612914565b612472565b90508083825260208201905060208402830185811115612a3e57612a3d612754565b5b835b81811015612a8557803567ffffffffffffffff811115612a6357612a62612490565b5b808601612a708982612978565b85526020850194505050602081019050612a40565b5050509392505050565b5f82601f830112612aa357612aa2612490565b5b8135612ab3848260208601612a09565b91505092915050565b5f8060408385031215612ad257612ad16122c0565b5b5f83013567ffffffffffffffff811115612aef57612aee6122c4565b5b612afb858286016127ff565b925050602083013567ffffffffffffffff811115612b1c57612b1b6122c4565b5b612b2885828601612a8f565b9150509250929050565b5f819050919050565b612b4481612b32565b8114612b4e575f80fd5b50565b5f81359050612b5f81612b3b565b92915050565b5f60208284031215612b7a57612b796122c0565b5b5f612b8784828501612b51565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612bc7578082015181840152602081019050612bac565b5f8484015250505050565b5f612bdc82612b90565b612be68185612b9a565b9350612bf6818560208601612baa565b612bff81612404565b840191505092915050565b5f6020820190508181035f830152612c228184612bd2565b905092915050565b5f60608284031215612c3f57612c3e612400565b5b612c496060612472565b90505f82013567ffffffffffffffff811115612c6857612c6761248c565b5b612c7484828501612517565b5f83015250602082013567ffffffffffffffff811115612c9757612c9661248c565b5b612ca384828501612517565b602083015250604082013567ffffffffffffffff811115612cc757612cc661248c565b5b612cd384828501612517565b60408301525092915050565b5f60208284031215612cf457612cf36122c0565b5b5f82013567ffffffffffffffff811115612d1157612d106122c4565b5b612d1d84828501612c2a565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f612d6982612b90565b612d738185612d4f565b9350612d83818560208601612baa565b612d8c81612404565b840191505092915050565b5f612da28383612d5f565b905092915050565b5f602082019050919050565b5f612dc082612d26565b612dca8185612d30565b935083602082028501612ddc85612d40565b805f5b85811015612e175784840389528151612df88582612d97565b9450612e0383612daa565b925060208a01995050600181019050612ddf565b50829750879550505050505092915050565b5f6020820190508181035f830152612e418184612db6565b905092915050565b5f67ffffffffffffffff821115612e6357612e62612414565b5b602082029050919050565b5f612e80612e7b84612e49565b612472565b90508060208402830185811115612e9a57612e99612754565b5b835b81811015612ec35780612eaf88826126b2565b845260208401935050602081019050612e9c565b5050509392505050565b5f82601f830112612ee157612ee0612490565b5b6018612eee848285612e6e565b91505092915050565b5f6103008284031215612f0d57612f0c612400565b5b612f176020612472565b90505f612f2684828501612ecd565b5f8301525092915050565b5f6103008284031215612f4757612f466122c0565b5b5f612f5484828501612ef7565b91505092915050565b5f67ffffffffffffffff821115612f7757612f76612414565b5b612f8082612404565b9050602081019050919050565b5f612f9f612f9a84612f5d565b612472565b905082815260208101848484011115612fbb57612fba612494565b5b612fc68482856124c8565b509392505050565b5f82601f830112612fe257612fe1612490565b5b8135612ff2848260208601612f8d565b91505092915050565b5f602082840312156130105761300f6122c0565b5b5f82013567ffffffffffffffff81111561302d5761302c6122c4565b5b61303984828501612fce565b91505092915050565b61304b8161239a565b82525050565b5f6020820190506130645f830184613042565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f61308e8261306a565b6130988185613074565b93506130a8818560208601612baa565b6130b181612404565b840191505092915050565b6130c581612544565b82525050565b5f6080820190508181035f8301526130e38187613084565b90506130f260208301866130bc565b6130ff6040830185613042565b81810360608301526131118184613084565b905095945050505050565b5f6020820190508181035f8301526131348184613084565b905092915050565b5f82825260208201905092915050565b5f6131568261306a565b613160818561313c565b9350613170818560208601612baa565b61317981612404565b840191505092915050565b5f606083015f8301518482035f86015261319e828261314c565b915050602083015184820360208601526131b8828261314c565b915050604083015184820360408601526131d2828261314c565b9150508091505092915050565b5f6020820190508181035f8301526131f78184613184565b905092915050565b61320881612b32565b82525050565b5f6020820190506132215f8301846131ff565b92915050565b5f6020828403121561323c5761323b6122c0565b5b5f82013567ffffffffffffffff811115613259576132586122c4565b5b613265848285016127ff565b91505092915050565b5f6060820190508181035f8301526132868186613084565b9050818103602083015261329a8185613084565b905081810360408301526132ae8184613084565b9050949350505050565b6132c181612544565b82525050565b6132d08161239a565b82525050565b5f608083015f8301518482035f8601526132f0828261314c565b915050602083015161330560208601826132b8565b50604083015161331860408601826132c7565b5060608301518482036060860152613330828261314c565b9150508091505092915050565b5f6020820190508181035f83015261335581846132d6565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6133c182612b32565b91506133cc83612b32565b92508282039050818111156133e4576133e361338a565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f6f70657261746f72206d757374206265207468652073656e64657200000000005f82015250565b5f61344b601b83612b9a565b915061345682613417565b602082019050919050565b5f6020820190508181035f8301526134788161343f565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806134c357607f821691505b6020821081036134d6576134d561347f565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026135387fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826134fd565b61354286836134fd565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61357d61357861357384612b32565b61355a565b612b32565b9050919050565b5f819050919050565b61359683613563565b6135aa6135a282613584565b848454613509565b825550505050565b5f90565b6135be6135b2565b6135c981848461358d565b505050565b5b818110156135ec576135e15f826135b6565b6001810190506135cf565b5050565b601f82111561363157613602816134dc565b61360b846134ee565b8101602085101561361a578190505b61362e613626856134ee565b8301826135ce565b50505b505050565b5f82821c905092915050565b5f6136515f1984600802613636565b1980831691505092915050565b5f6136698383613642565b9150826002028217905092915050565b6136828261306a565b67ffffffffffffffff81111561369b5761369a612414565b5b6136a582546134ac565b6136b08282856135f0565b5f60209050601f8311600181146136e1575f84156136cf578287015190505b6136d9858261365e565b865550613740565b601f1984166136ef866134dc565b5f5b82811015613716578489015182556001820191506020850194506020810190506136f1565b86831015613733578489015161372f601f891682613642565b8355505b6001600288020188555050505b505050505050565b7f4f70657261746f72206e6f7420617574686f72697a65640000000000000000005f82015250565b5f61377c601783612b9a565b915061378782613748565b602082019050919050565b5f6020820190508181035f8301526137a981613770565b9050919050565b7f696e636f7272656374206d727464206c656e67746800000000000000000000005f82015250565b5f6137e4601583612b9a565b91506137ef826137b0565b602082019050919050565b5f6020820190508181035f830152613811816137d8565b9050919050565b7f696e636f72726563742052544d525b305d206c656e67746800000000000000005f82015250565b5f61384c601883612b9a565b915061385782613818565b602082019050919050565b5f6020820190508181035f83015261387981613840565b9050919050565b7f696e636f72726563742052544d525b315d206c656e67746800000000000000005f82015250565b5f6138b4601883612b9a565b91506138bf82613880565b602082019050919050565b5f6020820190508181035f8301526138e1816138a8565b9050919050565b7f696e636f72726563742052544d525b325d206c656e67746800000000000000005f82015250565b5f61391c601883612b9a565b9150613927826138e8565b602082019050919050565b5f6020820190508181035f83015261394981613910565b9050919050565b7f696e636f72726563742052544d525b335d206c656e67746800000000000000005f82015250565b5f613984601883612b9a565b915061398f82613950565b602082019050919050565b5f6020820190508181035f8301526139b181613978565b9050919050565b7f696e636f7272656374206d724f776e6572206c656e67746800000000000000005f82015250565b5f6139ec601883612b9a565b91506139f7826139b8565b602082019050919050565b5f6020820190508181035f830152613a19816139e0565b9050919050565b7f696e636f7272656374206d72436f6e6669674964206c656e67746800000000005f82015250565b5f613a54601b83612b9a565b9150613a5f82613a20565b602082019050919050565b5f6020820190508181035f830152613a8181613a48565b9050919050565b7f696e636f7272656374206d72436f6e6669674f776e6572206c656e67746800005f82015250565b5f613abc601e83612b9a565b9150613ac782613a88565b602082019050919050565b5f6020820190508181035f830152613ae981613ab0565b9050919050565b5f8160601b9050919050565b5f613b0682613af0565b9050919050565b5f613b1782613afc565b9050919050565b613b2f613b2a8261239a565b613b0d565b82525050565b5f81905092915050565b5f613b498261306a565b613b538185613b35565b9350613b63818560208601612baa565b80840191505092915050565b5f613b7a8287613b1e565b601482019150613b8a8286613b3f565b9150613b968285613b3f565b9150613ba28284613b3f565b915081905095945050505050565b7f446174612073697a652065786365656473206c696d69740000000000000000005f82015250565b5f613be4601783612b9a565b9150613bef82613bb0565b602082019050919050565b5f6020820190508181035f830152613c1181613bd8565b9050919050565b5f604082019050613c2b5f830185613042565b8181036020830152613c3d8184613184565b90509392505050565b5f819050815f5260205f209050919050565b601f821115613c9957613c6a81613c46565b613c73846134ee565b81016020851015613c82578190505b613c96613c8e856134ee565b8301826135ce565b50505b505050565b613ca782612b90565b67ffffffffffffffff811115613cc057613cbf612414565b5b613cca82546134ac565b613cd5828285613c58565b5f60209050601f831160018114613d06575f8415613cf4578287015190505b613cfe858261365e565b865550613d65565b601f198416613d1486613c46565b5f5b82811015613d3b57848901518255600182019150602085019450602081019050613d16565b86831015613d585784890151613d54601f891682613642565b8355505b6001600288020188555050505b505050505050565b5f6040820190508181035f830152613d858185612bd2565b9050613d946020830184613042565b9392505050565b5f819050919050565b613db5613db08261266b565b613d9b565b82525050565b5f613dc68287613b1e565b601482019150613dd68286613da4565b602082019150613de68285613da4565b602082019150613df68284613da4565b60208201915081905095945050505050565b5f604082019050613e1b5f830185612674565b613e286020830184613042565b9392505050565b5f604082019050613e425f830185613042565b613e4f6020830184612674565b939250505056fea2646970667358221220a00b8ebf4270462ee3be28e3e12337b10e7104dc92292b9f2028aece5830ef8964736f6c63430008170033",
}

// KmsABI is the input ABI used to generate the binding from.
// Deprecated: Use KmsMetaData.ABI instead.
var KmsABI = KmsMetaData.ABI

// KmsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KmsMetaData.Bin instead.
var KmsBin = KmsMetaData.Bin

// DeployKms deploys a new Ethereum contract, binding an instance of Kms to it.
func DeployKms(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Kms, error) {
	parsed, err := KmsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KmsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Kms{KmsCaller: KmsCaller{contract: contract}, KmsTransactor: KmsTransactor{contract: contract}, KmsFilterer: KmsFilterer{contract: contract}}, nil
}

// Kms is an auto generated Go binding around an Ethereum contract.
type Kms struct {
	KmsCaller     // Read-only binding to the contract
	KmsTransactor // Write-only binding to the contract
	KmsFilterer   // Log filterer for contract events
}

// KmsCaller is an auto generated read-only Go binding around an Ethereum contract.
type KmsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KmsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KmsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KmsSession struct {
	Contract     *Kms              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KmsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KmsCallerSession struct {
	Contract *KmsCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KmsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KmsTransactorSession struct {
	Contract     *KmsTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KmsRaw is an auto generated low-level Go binding around an Ethereum contract.
type KmsRaw struct {
	Contract *Kms // Generic contract binding to access the raw methods on
}

// KmsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KmsCallerRaw struct {
	Contract *KmsCaller // Generic read-only contract binding to access the raw methods on
}

// KmsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KmsTransactorRaw struct {
	Contract *KmsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKms creates a new instance of Kms, bound to a specific deployed contract.
func NewKms(address common.Address, backend bind.ContractBackend) (*Kms, error) {
	contract, err := bindKms(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Kms{KmsCaller: KmsCaller{contract: contract}, KmsTransactor: KmsTransactor{contract: contract}, KmsFilterer: KmsFilterer{contract: contract}}, nil
}

// NewKmsCaller creates a new read-only instance of Kms, bound to a specific deployed contract.
func NewKmsCaller(address common.Address, caller bind.ContractCaller) (*KmsCaller, error) {
	contract, err := bindKms(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KmsCaller{contract: contract}, nil
}

// NewKmsTransactor creates a new write-only instance of Kms, bound to a specific deployed contract.
func NewKmsTransactor(address common.Address, transactor bind.ContractTransactor) (*KmsTransactor, error) {
	contract, err := bindKms(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KmsTransactor{contract: contract}, nil
}

// NewKmsFilterer creates a new log filterer instance of Kms, bound to a specific deployed contract.
func NewKmsFilterer(address common.Address, filterer bind.ContractFilterer) (*KmsFilterer, error) {
	contract, err := bindKms(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KmsFilterer{contract: contract}, nil
}

// bindKms binds a generic wrapper to an already deployed contract.
func bindKms(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KmsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Kms *KmsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Kms.Contract.KmsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Kms *KmsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kms.Contract.KmsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Kms *KmsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Kms.Contract.KmsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Kms *KmsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Kms.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Kms *KmsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kms.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Kms *KmsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Kms.Contract.contract.Transact(opts, method, params...)
}

// ApplicationAllowed is a free data retrieval call binding the contract method 0x36a70c78.
//
// Solidity: function ApplicationAllowed(address app) view returns(bool)
func (_Kms *KmsCaller) ApplicationAllowed(opts *bind.CallOpts, app common.Address) (bool, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "ApplicationAllowed", app)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ApplicationAllowed is a free data retrieval call binding the contract method 0x36a70c78.
//
// Solidity: function ApplicationAllowed(address app) view returns(bool)
func (_Kms *KmsSession) ApplicationAllowed(app common.Address) (bool, error) {
	return _Kms.Contract.ApplicationAllowed(&_Kms.CallOpts, app)
}

// ApplicationAllowed is a free data retrieval call binding the contract method 0x36a70c78.
//
// Solidity: function ApplicationAllowed(address app) view returns(bool)
func (_Kms *KmsCallerSession) ApplicationAllowed(app common.Address) (bool, error) {
	return _Kms.Contract.ApplicationAllowed(&_Kms.CallOpts, app)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Kms *KmsCaller) DCAPIdentity(opts *bind.CallOpts, report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "DCAPIdentity", report, arg1)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Kms *KmsSession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Kms.Contract.DCAPIdentity(&_Kms.CallOpts, report, arg1)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Kms *KmsCallerSession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Kms.Contract.DCAPIdentity(&_Kms.CallOpts, report, arg1)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Kms *KmsCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Kms *KmsSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Kms.Contract.DEFAULTADMINROLE(&_Kms.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Kms *KmsCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Kms.Contract.DEFAULTADMINROLE(&_Kms.CallOpts)
}

// HashOnboardRequest is a free data retrieval call binding the contract method 0xb5e3be7a.
//
// Solidity: function HashOnboardRequest((bytes,int256,address,bytes) req) pure returns(bytes32 reqHash)
func (_Kms *KmsCaller) HashOnboardRequest(opts *bind.CallOpts, req OnboardRequest) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "HashOnboardRequest", req)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HashOnboardRequest is a free data retrieval call binding the contract method 0xb5e3be7a.
//
// Solidity: function HashOnboardRequest((bytes,int256,address,bytes) req) pure returns(bytes32 reqHash)
func (_Kms *KmsSession) HashOnboardRequest(req OnboardRequest) ([32]byte, error) {
	return _Kms.Contract.HashOnboardRequest(&_Kms.CallOpts, req)
}

// HashOnboardRequest is a free data retrieval call binding the contract method 0xb5e3be7a.
//
// Solidity: function HashOnboardRequest((bytes,int256,address,bytes) req) pure returns(bytes32 reqHash)
func (_Kms *KmsCallerSession) HashOnboardRequest(req OnboardRequest) ([32]byte, error) {
	return _Kms.Contract.HashOnboardRequest(&_Kms.CallOpts, req)
}

// IdentityAllowed is a free data retrieval call binding the contract method 0x1619e345.
//
// Solidity: function IdentityAllowed(bytes32 identity, address operator) view returns(bool)
func (_Kms *KmsCaller) IdentityAllowed(opts *bind.CallOpts, identity [32]byte, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "IdentityAllowed", identity, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IdentityAllowed is a free data retrieval call binding the contract method 0x1619e345.
//
// Solidity: function IdentityAllowed(bytes32 identity, address operator) view returns(bool)
func (_Kms *KmsSession) IdentityAllowed(identity [32]byte, operator common.Address) (bool, error) {
	return _Kms.Contract.IdentityAllowed(&_Kms.CallOpts, identity, operator)
}

// IdentityAllowed is a free data retrieval call binding the contract method 0x1619e345.
//
// Solidity: function IdentityAllowed(bytes32 identity, address operator) view returns(bool)
func (_Kms *KmsCallerSession) IdentityAllowed(identity [32]byte, operator common.Address) (bool, error) {
	return _Kms.Contract.IdentityAllowed(&_Kms.CallOpts, identity, operator)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x70c608d6.
//
// Solidity: function InstanceDomainNames() view returns(string[])
func (_Kms *KmsCaller) InstanceDomainNames(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "InstanceDomainNames")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x70c608d6.
//
// Solidity: function InstanceDomainNames() view returns(string[])
func (_Kms *KmsSession) InstanceDomainNames() ([]string, error) {
	return _Kms.Contract.InstanceDomainNames(&_Kms.CallOpts)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x70c608d6.
//
// Solidity: function InstanceDomainNames() view returns(string[])
func (_Kms *KmsCallerSession) InstanceDomainNames() ([]string, error) {
	return _Kms.Contract.InstanceDomainNames(&_Kms.CallOpts)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Kms *KmsCaller) MAAIdentity(opts *bind.CallOpts, report MAAReport) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "MAAIdentity", report)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Kms *KmsSession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Kms.Contract.MAAIdentity(&_Kms.CallOpts, report)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Kms *KmsCallerSession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Kms.Contract.MAAIdentity(&_Kms.CallOpts, report)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Kms *KmsCaller) MAXBYTESSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "MAX_BYTES_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Kms *KmsSession) MAXBYTESSIZE() (*big.Int, error) {
	return _Kms.Contract.MAXBYTESSIZE(&_Kms.CallOpts)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Kms *KmsCallerSession) MAXBYTESSIZE() (*big.Int, error) {
	return _Kms.Contract.MAXBYTESSIZE(&_Kms.CallOpts)
}

// PKI is a free data retrieval call binding the contract method 0xa9ac54e9.
//
// Solidity: function PKI() view returns((bytes,bytes,bytes))
func (_Kms *KmsCaller) PKI(opts *bind.CallOpts) (AppPKI, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "PKI")

	if err != nil {
		return *new(AppPKI), err
	}

	out0 := *abi.ConvertType(out[0], new(AppPKI)).(*AppPKI)

	return out0, err

}

// PKI is a free data retrieval call binding the contract method 0xa9ac54e9.
//
// Solidity: function PKI() view returns((bytes,bytes,bytes))
func (_Kms *KmsSession) PKI() (AppPKI, error) {
	return _Kms.Contract.PKI(&_Kms.CallOpts)
}

// PKI is a free data retrieval call binding the contract method 0xa9ac54e9.
//
// Solidity: function PKI() view returns((bytes,bytes,bytes))
func (_Kms *KmsCallerSession) PKI() (AppPKI, error) {
	return _Kms.Contract.PKI(&_Kms.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Kms *KmsCaller) ROLEOPERATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "ROLE_OPERATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Kms *KmsSession) ROLEOPERATOR() ([32]byte, error) {
	return _Kms.Contract.ROLEOPERATOR(&_Kms.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Kms *KmsCallerSession) ROLEOPERATOR() ([32]byte, error) {
	return _Kms.Contract.ROLEOPERATOR(&_Kms.CallOpts)
}

// AllowlistedIdentities is a free data retrieval call binding the contract method 0xe712f5b2.
//
// Solidity: function allowlistedIdentities(bytes32 ) view returns(bool)
func (_Kms *KmsCaller) AllowlistedIdentities(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "allowlistedIdentities", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowlistedIdentities is a free data retrieval call binding the contract method 0xe712f5b2.
//
// Solidity: function allowlistedIdentities(bytes32 ) view returns(bool)
func (_Kms *KmsSession) AllowlistedIdentities(arg0 [32]byte) (bool, error) {
	return _Kms.Contract.AllowlistedIdentities(&_Kms.CallOpts, arg0)
}

// AllowlistedIdentities is a free data retrieval call binding the contract method 0xe712f5b2.
//
// Solidity: function allowlistedIdentities(bytes32 ) view returns(bool)
func (_Kms *KmsCallerSession) AllowlistedIdentities(arg0 [32]byte) (bool, error) {
	return _Kms.Contract.AllowlistedIdentities(&_Kms.CallOpts, arg0)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Kms *KmsCaller) AppPki(opts *bind.CallOpts) (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "app_pki")

	outstruct := new(struct {
		Ca          []byte
		Pubkey      []byte
		Attestation []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Ca = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Pubkey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Attestation = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Kms *KmsSession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Kms.Contract.AppPki(&_Kms.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Kms *KmsCallerSession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Kms.Contract.AppPki(&_Kms.CallOpts)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Kms *KmsCaller) Artifacts(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "artifacts", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Kms *KmsSession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Kms.Contract.Artifacts(&_Kms.CallOpts, arg0)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Kms *KmsCallerSession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Kms.Contract.Artifacts(&_Kms.CallOpts, arg0)
}

// FetchOnboardRequest is a free data retrieval call binding the contract method 0xf588d2fc.
//
// Solidity: function fetchOnboardRequest(bytes32 reqHash) view returns((bytes,int256,address,bytes))
func (_Kms *KmsCaller) FetchOnboardRequest(opts *bind.CallOpts, reqHash [32]byte) (OnboardRequest, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "fetchOnboardRequest", reqHash)

	if err != nil {
		return *new(OnboardRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(OnboardRequest)).(*OnboardRequest)

	return out0, err

}

// FetchOnboardRequest is a free data retrieval call binding the contract method 0xf588d2fc.
//
// Solidity: function fetchOnboardRequest(bytes32 reqHash) view returns((bytes,int256,address,bytes))
func (_Kms *KmsSession) FetchOnboardRequest(reqHash [32]byte) (OnboardRequest, error) {
	return _Kms.Contract.FetchOnboardRequest(&_Kms.CallOpts, reqHash)
}

// FetchOnboardRequest is a free data retrieval call binding the contract method 0xf588d2fc.
//
// Solidity: function fetchOnboardRequest(bytes32 reqHash) view returns((bytes,int256,address,bytes))
func (_Kms *KmsCallerSession) FetchOnboardRequest(reqHash [32]byte) (OnboardRequest, error) {
	return _Kms.Contract.FetchOnboardRequest(&_Kms.CallOpts, reqHash)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Kms *KmsCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Kms *KmsSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Kms.Contract.GetRoleAdmin(&_Kms.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Kms *KmsCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Kms.Contract.GetRoleAdmin(&_Kms.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Kms *KmsCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Kms *KmsSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Kms.Contract.HasRole(&_Kms.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Kms *KmsCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Kms.Contract.HasRole(&_Kms.CallOpts, role, account)
}

// MInstanceDomainNames is a free data retrieval call binding the contract method 0x6511dbe2.
//
// Solidity: function m_instanceDomainNames(uint256 ) view returns(string)
func (_Kms *KmsCaller) MInstanceDomainNames(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "m_instanceDomainNames", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MInstanceDomainNames is a free data retrieval call binding the contract method 0x6511dbe2.
//
// Solidity: function m_instanceDomainNames(uint256 ) view returns(string)
func (_Kms *KmsSession) MInstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Kms.Contract.MInstanceDomainNames(&_Kms.CallOpts, arg0)
}

// MInstanceDomainNames is a free data retrieval call binding the contract method 0x6511dbe2.
//
// Solidity: function m_instanceDomainNames(uint256 ) view returns(string)
func (_Kms *KmsCallerSession) MInstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Kms.Contract.MInstanceDomainNames(&_Kms.CallOpts, arg0)
}

// OnboardRequests is a free data retrieval call binding the contract method 0x9087f2b0.
//
// Solidity: function onboardRequests(bytes32 ) view returns(bytes pubkey, int256 nonce, address operator, bytes attestation)
func (_Kms *KmsCaller) OnboardRequests(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Pubkey      []byte
	Nonce       *big.Int
	Operator    common.Address
	Attestation []byte
}, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "onboardRequests", arg0)

	outstruct := new(struct {
		Pubkey      []byte
		Nonce       *big.Int
		Operator    common.Address
		Attestation []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Pubkey = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Nonce = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Operator = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Attestation = *abi.ConvertType(out[3], new([]byte)).(*[]byte)

	return *outstruct, err

}

// OnboardRequests is a free data retrieval call binding the contract method 0x9087f2b0.
//
// Solidity: function onboardRequests(bytes32 ) view returns(bytes pubkey, int256 nonce, address operator, bytes attestation)
func (_Kms *KmsSession) OnboardRequests(arg0 [32]byte) (struct {
	Pubkey      []byte
	Nonce       *big.Int
	Operator    common.Address
	Attestation []byte
}, error) {
	return _Kms.Contract.OnboardRequests(&_Kms.CallOpts, arg0)
}

// OnboardRequests is a free data retrieval call binding the contract method 0x9087f2b0.
//
// Solidity: function onboardRequests(bytes32 ) view returns(bytes pubkey, int256 nonce, address operator, bytes attestation)
func (_Kms *KmsCallerSession) OnboardRequests(arg0 [32]byte) (struct {
	Pubkey      []byte
	Nonce       *big.Int
	Operator    common.Address
	Attestation []byte
}, error) {
	return _Kms.Contract.OnboardRequests(&_Kms.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Kms *KmsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Kms *KmsSession) Owner() (common.Address, error) {
	return _Kms.Contract.Owner(&_Kms.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Kms *KmsCallerSession) Owner() (common.Address, error) {
	return _Kms.Contract.Owner(&_Kms.CallOpts)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Kms *KmsCaller) StorageBackends(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "storageBackends", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Kms *KmsSession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Kms.Contract.StorageBackends(&_Kms.CallOpts, arg0)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Kms *KmsCallerSession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Kms.Contract.StorageBackends(&_Kms.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Kms *KmsCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Kms *KmsSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Kms.Contract.SupportsInterface(&_Kms.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Kms *KmsCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Kms.Contract.SupportsInterface(&_Kms.CallOpts, interfaceId)
}

// AllowApplication is a paid mutator transaction binding the contract method 0xfb2e19ec.
//
// Solidity: function AllowApplication(address app) returns()
func (_Kms *KmsTransactor) AllowApplication(opts *bind.TransactOpts, app common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "AllowApplication", app)
}

// AllowApplication is a paid mutator transaction binding the contract method 0xfb2e19ec.
//
// Solidity: function AllowApplication(address app) returns()
func (_Kms *KmsSession) AllowApplication(app common.Address) (*types.Transaction, error) {
	return _Kms.Contract.AllowApplication(&_Kms.TransactOpts, app)
}

// AllowApplication is a paid mutator transaction binding the contract method 0xfb2e19ec.
//
// Solidity: function AllowApplication(address app) returns()
func (_Kms *KmsTransactorSession) AllowApplication(app common.Address) (*types.Transaction, error) {
	return _Kms.Contract.AllowApplication(&_Kms.TransactOpts, app)
}

// RemoveAllowlistedApplication is a paid mutator transaction binding the contract method 0x0adb7b5b.
//
// Solidity: function RemoveAllowlistedApplication(address app) returns()
func (_Kms *KmsTransactor) RemoveAllowlistedApplication(opts *bind.TransactOpts, app common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "RemoveAllowlistedApplication", app)
}

// RemoveAllowlistedApplication is a paid mutator transaction binding the contract method 0x0adb7b5b.
//
// Solidity: function RemoveAllowlistedApplication(address app) returns()
func (_Kms *KmsSession) RemoveAllowlistedApplication(app common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RemoveAllowlistedApplication(&_Kms.TransactOpts, app)
}

// RemoveAllowlistedApplication is a paid mutator transaction binding the contract method 0x0adb7b5b.
//
// Solidity: function RemoveAllowlistedApplication(address app) returns()
func (_Kms *KmsTransactorSession) RemoveAllowlistedApplication(app common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RemoveAllowlistedApplication(&_Kms.TransactOpts, app)
}

// AllowlistDCAP is a paid mutator transaction binding the contract method 0xc0f1340b.
//
// Solidity: function allowlistDCAP((bytes,bytes[4],bytes,bytes,bytes) report) returns(bytes32 identity)
func (_Kms *KmsTransactor) AllowlistDCAP(opts *bind.TransactOpts, report DCAPReport) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "allowlistDCAP", report)
}

// AllowlistDCAP is a paid mutator transaction binding the contract method 0xc0f1340b.
//
// Solidity: function allowlistDCAP((bytes,bytes[4],bytes,bytes,bytes) report) returns(bytes32 identity)
func (_Kms *KmsSession) AllowlistDCAP(report DCAPReport) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistDCAP(&_Kms.TransactOpts, report)
}

// AllowlistDCAP is a paid mutator transaction binding the contract method 0xc0f1340b.
//
// Solidity: function allowlistDCAP((bytes,bytes[4],bytes,bytes,bytes) report) returns(bytes32 identity)
func (_Kms *KmsTransactorSession) AllowlistDCAP(report DCAPReport) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistDCAP(&_Kms.TransactOpts, report)
}

// AllowlistIdentity is a paid mutator transaction binding the contract method 0xda4fddef.
//
// Solidity: function allowlistIdentity(bytes32 identity) returns()
func (_Kms *KmsTransactor) AllowlistIdentity(opts *bind.TransactOpts, identity [32]byte) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "allowlistIdentity", identity)
}

// AllowlistIdentity is a paid mutator transaction binding the contract method 0xda4fddef.
//
// Solidity: function allowlistIdentity(bytes32 identity) returns()
func (_Kms *KmsSession) AllowlistIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistIdentity(&_Kms.TransactOpts, identity)
}

// AllowlistIdentity is a paid mutator transaction binding the contract method 0xda4fddef.
//
// Solidity: function allowlistIdentity(bytes32 identity) returns()
func (_Kms *KmsTransactorSession) AllowlistIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistIdentity(&_Kms.TransactOpts, identity)
}

// AllowlistMAA is a paid mutator transaction binding the contract method 0x7182ee20.
//
// Solidity: function allowlistMAA((bytes32[24]) report) returns(bytes32 identity)
func (_Kms *KmsTransactor) AllowlistMAA(opts *bind.TransactOpts, report MAAReport) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "allowlistMAA", report)
}

// AllowlistMAA is a paid mutator transaction binding the contract method 0x7182ee20.
//
// Solidity: function allowlistMAA((bytes32[24]) report) returns(bytes32 identity)
func (_Kms *KmsSession) AllowlistMAA(report MAAReport) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistMAA(&_Kms.TransactOpts, report)
}

// AllowlistMAA is a paid mutator transaction binding the contract method 0x7182ee20.
//
// Solidity: function allowlistMAA((bytes32[24]) report) returns(bytes32 identity)
func (_Kms *KmsTransactorSession) AllowlistMAA(report MAAReport) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistMAA(&_Kms.TransactOpts, report)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Kms *KmsTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Kms *KmsSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.Contract.GrantRole(&_Kms.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Kms *KmsTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.Contract.GrantRole(&_Kms.TransactOpts, role, account)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Kms *KmsTransactor) RegisterInstanceDomainName(opts *bind.TransactOpts, domain string) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "registerInstanceDomainName", domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Kms *KmsSession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Kms.Contract.RegisterInstanceDomainName(&_Kms.TransactOpts, domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Kms *KmsTransactorSession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Kms.Contract.RegisterInstanceDomainName(&_Kms.TransactOpts, domain)
}

// RemoveAllowlistedIdentity is a paid mutator transaction binding the contract method 0x322febce.
//
// Solidity: function removeAllowlistedIdentity(bytes32 identity) returns()
func (_Kms *KmsTransactor) RemoveAllowlistedIdentity(opts *bind.TransactOpts, identity [32]byte) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "removeAllowlistedIdentity", identity)
}

// RemoveAllowlistedIdentity is a paid mutator transaction binding the contract method 0x322febce.
//
// Solidity: function removeAllowlistedIdentity(bytes32 identity) returns()
func (_Kms *KmsSession) RemoveAllowlistedIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Kms.Contract.RemoveAllowlistedIdentity(&_Kms.TransactOpts, identity)
}

// RemoveAllowlistedIdentity is a paid mutator transaction binding the contract method 0x322febce.
//
// Solidity: function removeAllowlistedIdentity(bytes32 identity) returns()
func (_Kms *KmsTransactorSession) RemoveAllowlistedIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Kms.Contract.RemoveAllowlistedIdentity(&_Kms.TransactOpts, identity)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Kms *KmsTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Kms *KmsSession) RenounceOwnership() (*types.Transaction, error) {
	return _Kms.Contract.RenounceOwnership(&_Kms.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Kms *KmsTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Kms.Contract.RenounceOwnership(&_Kms.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Kms *KmsTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Kms *KmsSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RenounceRole(&_Kms.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Kms *KmsTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RenounceRole(&_Kms.TransactOpts, role, callerConfirmation)
}

// RequestOnboard is a paid mutator transaction binding the contract method 0x1301b9ff.
//
// Solidity: function requestOnboard((bytes,int256,address,bytes) req) returns(bytes32 reqHash)
func (_Kms *KmsTransactor) RequestOnboard(opts *bind.TransactOpts, req OnboardRequest) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "requestOnboard", req)
}

// RequestOnboard is a paid mutator transaction binding the contract method 0x1301b9ff.
//
// Solidity: function requestOnboard((bytes,int256,address,bytes) req) returns(bytes32 reqHash)
func (_Kms *KmsSession) RequestOnboard(req OnboardRequest) (*types.Transaction, error) {
	return _Kms.Contract.RequestOnboard(&_Kms.TransactOpts, req)
}

// RequestOnboard is a paid mutator transaction binding the contract method 0x1301b9ff.
//
// Solidity: function requestOnboard((bytes,int256,address,bytes) req) returns(bytes32 reqHash)
func (_Kms *KmsTransactorSession) RequestOnboard(req OnboardRequest) (*types.Transaction, error) {
	return _Kms.Contract.RequestOnboard(&_Kms.TransactOpts, req)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Kms *KmsTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Kms *KmsSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RevokeRole(&_Kms.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Kms *KmsTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RevokeRole(&_Kms.TransactOpts, role, account)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Kms *KmsTransactor) SetPKI(opts *bind.TransactOpts, pki AppPKI) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "setPKI", pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Kms *KmsSession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Kms.Contract.SetPKI(&_Kms.TransactOpts, pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Kms *KmsTransactorSession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Kms.Contract.SetPKI(&_Kms.TransactOpts, pki)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Kms *KmsTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Kms *KmsSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Kms.Contract.TransferOwnership(&_Kms.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Kms *KmsTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Kms.Contract.TransferOwnership(&_Kms.TransactOpts, newOwner)
}

// KmsArtifactAddedIterator is returned from FilterArtifactAdded and is used to iterate over the raw logs and unpacked data for ArtifactAdded events raised by the Kms contract.
type KmsArtifactAddedIterator struct {
	Event *KmsArtifactAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsArtifactAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsArtifactAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsArtifactAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsArtifactAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsArtifactAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsArtifactAdded represents a ArtifactAdded event raised by the Kms contract.
type KmsArtifactAdded struct {
	ConfigHash [32]byte
	Adder      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterArtifactAdded is a free log retrieval operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Kms *KmsFilterer) FilterArtifactAdded(opts *bind.FilterOpts) (*KmsArtifactAddedIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return &KmsArtifactAddedIterator{contract: _Kms.contract, event: "ArtifactAdded", logs: logs, sub: sub}, nil
}

// WatchArtifactAdded is a free log subscription operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Kms *KmsFilterer) WatchArtifactAdded(opts *bind.WatchOpts, sink chan<- *KmsArtifactAdded) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsArtifactAdded)
				if err := _Kms.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseArtifactAdded is a log parse operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Kms *KmsFilterer) ParseArtifactAdded(log types.Log) (*KmsArtifactAdded, error) {
	event := new(KmsArtifactAdded)
	if err := _Kms.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsIdentityAllowlistedIterator is returned from FilterIdentityAllowlisted and is used to iterate over the raw logs and unpacked data for IdentityAllowlisted events raised by the Kms contract.
type KmsIdentityAllowlistedIterator struct {
	Event *KmsIdentityAllowlisted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsIdentityAllowlistedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsIdentityAllowlisted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsIdentityAllowlisted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsIdentityAllowlistedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsIdentityAllowlistedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsIdentityAllowlisted represents a IdentityAllowlisted event raised by the Kms contract.
type KmsIdentityAllowlisted struct {
	Identity [32]byte
	Setter   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterIdentityAllowlisted is a free log retrieval operation binding the contract event 0xf1c63c82bb552724847bbe3164e4b33ba29fd3215457e7a41998f59511ff25ca.
//
// Solidity: event IdentityAllowlisted(bytes32 identity, address setter)
func (_Kms *KmsFilterer) FilterIdentityAllowlisted(opts *bind.FilterOpts) (*KmsIdentityAllowlistedIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "IdentityAllowlisted")
	if err != nil {
		return nil, err
	}
	return &KmsIdentityAllowlistedIterator{contract: _Kms.contract, event: "IdentityAllowlisted", logs: logs, sub: sub}, nil
}

// WatchIdentityAllowlisted is a free log subscription operation binding the contract event 0xf1c63c82bb552724847bbe3164e4b33ba29fd3215457e7a41998f59511ff25ca.
//
// Solidity: event IdentityAllowlisted(bytes32 identity, address setter)
func (_Kms *KmsFilterer) WatchIdentityAllowlisted(opts *bind.WatchOpts, sink chan<- *KmsIdentityAllowlisted) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "IdentityAllowlisted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsIdentityAllowlisted)
				if err := _Kms.contract.UnpackLog(event, "IdentityAllowlisted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIdentityAllowlisted is a log parse operation binding the contract event 0xf1c63c82bb552724847bbe3164e4b33ba29fd3215457e7a41998f59511ff25ca.
//
// Solidity: event IdentityAllowlisted(bytes32 identity, address setter)
func (_Kms *KmsFilterer) ParseIdentityAllowlisted(log types.Log) (*KmsIdentityAllowlisted, error) {
	event := new(KmsIdentityAllowlisted)
	if err := _Kms.contract.UnpackLog(event, "IdentityAllowlisted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsInstanceDomainRegisteredIterator is returned from FilterInstanceDomainRegistered and is used to iterate over the raw logs and unpacked data for InstanceDomainRegistered events raised by the Kms contract.
type KmsInstanceDomainRegisteredIterator struct {
	Event *KmsInstanceDomainRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsInstanceDomainRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsInstanceDomainRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsInstanceDomainRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsInstanceDomainRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsInstanceDomainRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsInstanceDomainRegistered represents a InstanceDomainRegistered event raised by the Kms contract.
type KmsInstanceDomainRegistered struct {
	Domain    string
	Registrar common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInstanceDomainRegistered is a free log retrieval operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Kms *KmsFilterer) FilterInstanceDomainRegistered(opts *bind.FilterOpts) (*KmsInstanceDomainRegisteredIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return &KmsInstanceDomainRegisteredIterator{contract: _Kms.contract, event: "InstanceDomainRegistered", logs: logs, sub: sub}, nil
}

// WatchInstanceDomainRegistered is a free log subscription operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Kms *KmsFilterer) WatchInstanceDomainRegistered(opts *bind.WatchOpts, sink chan<- *KmsInstanceDomainRegistered) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsInstanceDomainRegistered)
				if err := _Kms.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstanceDomainRegistered is a log parse operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Kms *KmsFilterer) ParseInstanceDomainRegistered(log types.Log) (*KmsInstanceDomainRegistered, error) {
	event := new(KmsInstanceDomainRegistered)
	if err := _Kms.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Kms contract.
type KmsOwnershipTransferredIterator struct {
	Event *KmsOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsOwnershipTransferred represents a OwnershipTransferred event raised by the Kms contract.
type KmsOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Kms *KmsFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*KmsOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Kms.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &KmsOwnershipTransferredIterator{contract: _Kms.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Kms *KmsFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *KmsOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Kms.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsOwnershipTransferred)
				if err := _Kms.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Kms *KmsFilterer) ParseOwnershipTransferred(log types.Log) (*KmsOwnershipTransferred, error) {
	event := new(KmsOwnershipTransferred)
	if err := _Kms.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsPKIUpdatedIterator is returned from FilterPKIUpdated and is used to iterate over the raw logs and unpacked data for PKIUpdated events raised by the Kms contract.
type KmsPKIUpdatedIterator struct {
	Event *KmsPKIUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsPKIUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsPKIUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsPKIUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsPKIUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsPKIUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsPKIUpdated represents a PKIUpdated event raised by the Kms contract.
type KmsPKIUpdated struct {
	Updater common.Address
	Pki     AppPKI
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPKIUpdated is a free log retrieval operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Kms *KmsFilterer) FilterPKIUpdated(opts *bind.FilterOpts) (*KmsPKIUpdatedIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return &KmsPKIUpdatedIterator{contract: _Kms.contract, event: "PKIUpdated", logs: logs, sub: sub}, nil
}

// WatchPKIUpdated is a free log subscription operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Kms *KmsFilterer) WatchPKIUpdated(opts *bind.WatchOpts, sink chan<- *KmsPKIUpdated) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsPKIUpdated)
				if err := _Kms.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePKIUpdated is a log parse operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Kms *KmsFilterer) ParsePKIUpdated(log types.Log) (*KmsPKIUpdated, error) {
	event := new(KmsPKIUpdated)
	if err := _Kms.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Kms contract.
type KmsRoleAdminChangedIterator struct {
	Event *KmsRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsRoleAdminChanged represents a RoleAdminChanged event raised by the Kms contract.
type KmsRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Kms *KmsFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*KmsRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Kms.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &KmsRoleAdminChangedIterator{contract: _Kms.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Kms *KmsFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *KmsRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Kms.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsRoleAdminChanged)
				if err := _Kms.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Kms *KmsFilterer) ParseRoleAdminChanged(log types.Log) (*KmsRoleAdminChanged, error) {
	event := new(KmsRoleAdminChanged)
	if err := _Kms.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Kms contract.
type KmsRoleGrantedIterator struct {
	Event *KmsRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsRoleGranted represents a RoleGranted event raised by the Kms contract.
type KmsRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*KmsRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Kms.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &KmsRoleGrantedIterator{contract: _Kms.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *KmsRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Kms.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsRoleGranted)
				if err := _Kms.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) ParseRoleGranted(log types.Log) (*KmsRoleGranted, error) {
	event := new(KmsRoleGranted)
	if err := _Kms.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Kms contract.
type KmsRoleRevokedIterator struct {
	Event *KmsRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsRoleRevoked represents a RoleRevoked event raised by the Kms contract.
type KmsRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*KmsRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Kms.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &KmsRoleRevokedIterator{contract: _Kms.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *KmsRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Kms.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsRoleRevoked)
				if err := _Kms.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) ParseRoleRevoked(log types.Log) (*KmsRoleRevoked, error) {
	event := new(KmsRoleRevoked)
	if err := _Kms.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsStorageBackendRemovedIterator is returned from FilterStorageBackendRemoved and is used to iterate over the raw logs and unpacked data for StorageBackendRemoved events raised by the Kms contract.
type KmsStorageBackendRemovedIterator struct {
	Event *KmsStorageBackendRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsStorageBackendRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsStorageBackendRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsStorageBackendRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsStorageBackendRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsStorageBackendRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsStorageBackendRemoved represents a StorageBackendRemoved event raised by the Kms contract.
type KmsStorageBackendRemoved struct {
	Location string
	Remover  common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendRemoved is a free log retrieval operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Kms *KmsFilterer) FilterStorageBackendRemoved(opts *bind.FilterOpts) (*KmsStorageBackendRemovedIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return &KmsStorageBackendRemovedIterator{contract: _Kms.contract, event: "StorageBackendRemoved", logs: logs, sub: sub}, nil
}

// WatchStorageBackendRemoved is a free log subscription operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Kms *KmsFilterer) WatchStorageBackendRemoved(opts *bind.WatchOpts, sink chan<- *KmsStorageBackendRemoved) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsStorageBackendRemoved)
				if err := _Kms.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendRemoved is a log parse operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Kms *KmsFilterer) ParseStorageBackendRemoved(log types.Log) (*KmsStorageBackendRemoved, error) {
	event := new(KmsStorageBackendRemoved)
	if err := _Kms.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsStorageBackendSetIterator is returned from FilterStorageBackendSet and is used to iterate over the raw logs and unpacked data for StorageBackendSet events raised by the Kms contract.
type KmsStorageBackendSetIterator struct {
	Event *KmsStorageBackendSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsStorageBackendSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsStorageBackendSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsStorageBackendSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsStorageBackendSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsStorageBackendSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsStorageBackendSet represents a StorageBackendSet event raised by the Kms contract.
type KmsStorageBackendSet struct {
	Location string
	Setter   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendSet is a free log retrieval operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Kms *KmsFilterer) FilterStorageBackendSet(opts *bind.FilterOpts) (*KmsStorageBackendSetIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return &KmsStorageBackendSetIterator{contract: _Kms.contract, event: "StorageBackendSet", logs: logs, sub: sub}, nil
}

// WatchStorageBackendSet is a free log subscription operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Kms *KmsFilterer) WatchStorageBackendSet(opts *bind.WatchOpts, sink chan<- *KmsStorageBackendSet) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsStorageBackendSet)
				if err := _Kms.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendSet is a log parse operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Kms *KmsFilterer) ParseStorageBackendSet(log types.Log) (*KmsStorageBackendSet, error) {
	event := new(KmsStorageBackendSet)
	if err := _Kms.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
