// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package kms

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AppPKI is an auto generated low-level Go binding around an user-defined struct.
type AppPKI struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}

// DCAPEvent is an auto generated low-level Go binding around an user-defined struct.
type DCAPEvent struct {
	Index        uint32
	EventType    uint32
	EventPayload []byte
	Digest       [32]byte
}

// DCAPReport is an auto generated low-level Go binding around an user-defined struct.
type DCAPReport struct {
	MrTd          []byte
	RTMRs         [4][]byte
	MrOwner       []byte
	MrConfigId    []byte
	MrConfigOwner []byte
}

// MAAReport is an auto generated low-level Go binding around an user-defined struct.
type MAAReport struct {
	PCRs [24][32]byte
}

// OnboardRequest is an auto generated low-level Go binding around an user-defined struct.
type OnboardRequest struct {
	Pubkey      []byte
	Nonce       *big.Int
	Operator    common.Address
	Attestation []byte
}

// KmsMetaData contains all meta data concerning the Kms contract.
var KmsMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DCAPIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structDCAPEvent[]\",\"components\":[{\"name\":\"Index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventType\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"EventPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"Digest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"HashOnboardRequest\",\"inputs\":[{\"name\":\"req\",\"type\":\"tuple\",\"internalType\":\"structOnboardRequest\",\"components\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[{\"name\":\"reqHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"IdentityAllowed\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"InstanceDomainNames\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAAIdentity\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_BYTES_SIZE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PKI\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLE_OPERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowlistDCAP\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structDCAPReport\",\"components\":[{\"name\":\"mrTd\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"RTMRs\",\"type\":\"bytes[4]\",\"internalType\":\"bytes[4]\"},{\"name\":\"mrOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigId\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mrConfigOwner\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowlistIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowlistMAA\",\"inputs\":[{\"name\":\"report\",\"type\":\"tuple\",\"internalType\":\"structMAAReport\",\"components\":[{\"name\":\"PCRs\",\"type\":\"bytes32[24]\",\"internalType\":\"bytes32[24]\"}]}],\"outputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowlistedIdentities\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"app_pki\",\"inputs\":[],\"outputs\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"artifacts\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"fetchOnboardRequest\",\"inputs\":[{\"name\":\"reqHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structOnboardRequest\",\"components\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"m_instanceDomainNames\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"onboardRequests\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerInstanceDomainName\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeAllowlistedIdentity\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"requestOnboard\",\"inputs\":[{\"name\":\"req\",\"type\":\"tuple\",\"internalType\":\"structOnboardRequest\",\"components\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[{\"name\":\"reqHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPKI\",\"inputs\":[{\"name\":\"pki\",\"type\":\"tuple\",\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"storageBackends\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ArtifactAdded\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"adder\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"IdentityAllowlisted\",\"inputs\":[{\"name\":\"identity\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InstanceDomainRegistered\",\"inputs\":[{\"name\":\"domain\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"registrar\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PKIUpdated\",\"inputs\":[{\"name\":\"updater\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pki\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structAppPKI\",\"components\":[{\"name\":\"ca\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"attestation\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendRemoved\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"remover\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StorageBackendSet\",\"inputs\":[{\"name\":\"location\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"setter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]}]",
	Bin: "0x608060405234801562000010575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000085575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007c919062000358565b60405180910390fd5b6200009681620000ed60201b60201c565b506001600281905550620000b35f801b33620001b060201b60201c565b50620000e67faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da733620001b060201b60201c565b5062000373565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f620001c38383620002ab60201b60201c565b620002a15760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506200023d6200030e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050620002a5565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620003408262000315565b9050919050565b620003528162000334565b82525050565b5f6020820190506200036d5f83018462000347565b92915050565b613ae480620003815f395ff3fe608060405234801561000f575f80fd5b50600436106101ee575f3560e01c80639087f2b01161010d578063b5e3be7a116100a0578063da4fddef1161006f578063da4fddef1461061b578063e712f5b214610637578063f2fde38b14610667578063f588d2fc14610683576101ee565b8063b5e3be7a1461057f578063c0f1340b146105af578063c2f38479146105df578063d547741f146105ff576101ee565b8063a63e3a37116100dc578063a63e3a37146104e3578063a9ac54e914610513578063aa539d2614610531578063aaae748e14610561576101ee565b80639087f2b01461044457806391d148541461047757806398a1b397146104a7578063a217fddf146104c5576101ee565b80636511dbe2116101855780637182ee20116101545780637182ee20146103aa57806373fe8cc4146103da578063863c43d4146103f65780638da5cb5b14610426576101ee565b80636511dbe2146103365780636c3e695d1461036657806370c608d614610382578063715018a6146103a0576101ee565b80632f2ff15d116101c15780632f2ff15d146102b2578063322febce146102ce57806336568abe146102ea5780635a69887d14610306576101ee565b806301ffc9a7146101f25780631301b9ff146102225780631619e34514610252578063248a9ca314610282575b5f80fd5b61020c60048036038101906102079190612002565b6106b3565b6040516102199190612047565b60405180910390f35b61023c600480360381019061023791906122de565b61072c565b604051610249919061233d565b60405180910390f35b61026c60048036038101906102679190612380565b610869565b6040516102799190612047565b60405180910390f35b61029c600480360381019061029791906123be565b610900565b6040516102a9919061233d565b60405180910390f35b6102cc60048036038101906102c79190612380565b61091c565b005b6102e860048036038101906102e391906123be565b61093e565b005b61030460048036038101906102ff9190612380565b610969565b005b610320600480360381019061031b9190612776565b6109e4565b60405161032d919061233d565b60405180910390f35b610350600480360381019061034b919061281f565b610d0b565b60405161035d91906128c4565b60405180910390f35b610380600480360381019061037b9190612999565b610db1565b005b61038a610f1e565b6040516103979190612ae3565b60405180910390f35b6103a8610ff2565b005b6103c460048036038101906103bf9190612beb565b611005565b6040516103d1919061233d565b60405180910390f35b6103f460048036038101906103ef9190612cb5565b611027565b005b610410600480360381019061040b9190612beb565b6110c0565b60405161041d919061233d565b60405180910390f35b61042e611146565b60405161043b9190612d0b565b60405180910390f35b61045e600480360381019061045991906123be565b61116e565b60405161046e9493929190612d85565b60405180910390f35b610491600480360381019061048c9190612380565b6112c5565b60405161049e9190612047565b60405180910390f35b6104af611328565b6040516104bc919061233d565b60405180910390f35b6104cd61134c565b6040516104da919061233d565b60405180910390f35b6104fd60048036038101906104f891906123be565b611352565b60405161050a9190612dd6565b60405180910390f35b61051b6113ed565b6040516105289190612e99565b60405180910390f35b61054b6004803603810190610546919061281f565b6115b6565b60405161055891906128c4565b60405180910390f35b61056961165c565b6040516105769190612ec8565b60405180910390f35b610599600480360381019061059491906122de565b611662565b6040516105a6919061233d565b60405180910390f35b6105c960048036038101906105c49190612ee1565b6116a6565b6040516105d6919061233d565b60405180910390f35b6105e76116cc565b6040516105f693929190612f28565b60405180910390f35b61061960048036038101906106149190612380565b611875565b005b610635600480360381019061063091906123be565b611897565b005b610651600480360381019061064c91906123be565b611904565b60405161065e9190612047565b60405180910390f35b610681600480360381019061067c9190612f72565b611921565b005b61069d600480360381019061069891906123be565b6119a5565b6040516106aa9190613022565b60405180910390f35b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610725575061072482611b4e565b5b9050919050565b5f7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da761075781611bb7565b3373ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff16146107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c09061308c565b60405180910390fd5b6107d283611662565b91508260035f8481526020019081526020015f205f820151815f0190816107f991906132a4565b50602082015181600101556040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908161085f91906132a4565b5090505050919050565b5f6108947faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da7836112c5565b6108d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ca906133bd565b60405180910390fd5b60011515600a5f8581526020019081526020015f205f9054906101000a900460ff16151514905092915050565b5f805f8381526020019081526020015f20600101549050919050565b61092582610900565b61092e81611bb7565b6109388383611bcb565b50505050565b610946611cb4565b600a5f8281526020019081526020015f205f6101000a81549060ff021916905550565b610971611d3b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109d5576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109df8282611d42565b505050565b5f6030835f01515114610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390613425565b60405180910390fd5b603083602001515f60048110610a4557610a44613443565b5b60200201515114610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a82906134ba565b60405180910390fd5b60308360200151600160048110610aa557610aa4613443565b5b60200201515114610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae290613522565b60405180910390fd5b60308360200151600260048110610b0557610b04613443565b5b60200201515114610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b429061358a565b60405180910390fd5b60308360200151600360048110610b6557610b64613443565b5b60200201515114610bab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba2906135f2565b60405180910390fd5b603083604001515114610bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bea9061365a565b60405180910390fd5b603083606001515114610c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c32906136c2565b60405180910390fd5b603083608001515114610c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7a9061372a565b60405180910390fd5b3083602001515f60048110610c9b57610c9a613443565b5b60200201518460200151600160048110610cb857610cb7613443565b5b60200201518560200151600260048110610cd557610cd4613443565b5b6020020151604051602001610ced94939291906137c7565b60405160208183030381529060405280519060200120905092915050565b60048181548110610d1a575f80fd5b905f5260205f20015f915090508054610d32906130d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5e906130d7565b8015610da95780601f10610d8057610100808354040283529160200191610da9565b820191905f5260205f20905b815481529060010190602001808311610d8c57829003601f168201915b505050505081565b610db9611cb4565b805f015161500081511115610e03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfa90613852565b60405180910390fd5b816020015161500081511115610e4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4590613852565b60405180910390fd5b826040015161500081511115610e99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9090613852565b60405180910390fd5b8360055f820151815f019081610eaf91906132a4565b506020820151816001019081610ec591906132a4565b506040820151816002019081610edb91906132a4565b509050507f284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb73385604051610f10929190613870565b60405180910390a150505050565b60606004805480602002602001604051908101604052809291908181526020015f905b82821015610fe9578382905f5260205f20018054610f5e906130d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8a906130d7565b8015610fd55780601f10610fac57610100808354040283529160200191610fd5565b820191905f5260205f20905b815481529060010190602001808311610fb857829003601f168201915b505050505081526020019060010190610f41565b50505050905090565b610ffa611cb4565b6110035f611e2b565b565b5f61100e611cb4565b611017826110c0565b905061102281611897565b919050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da761105181611bb7565b600482908060018154018082558091505060019003905f5260205f20015f90919091909150908161108291906138f6565b507f1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa82336040516110b49291906139c5565b60405180910390a15050565b5f30825f01516004601881106110d9576110d8613443565b5b6020020151835f01516009601881106110f5576110f4613443565b5b6020020151845f0151600b6018811061111157611110613443565b5b60200201516040516020016111299493929190613a13565b604051602081830303815290604052805190602001209050919050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6003602052805f5260405f205f91509050805f01805461118d906130d7565b80601f01602080910402602001604051908101604052809291908181526020018280546111b9906130d7565b80156112045780601f106111db57610100808354040283529160200191611204565b820191905f5260205f20905b8154815290600101906020018083116111e757829003601f168201915b505050505090806001015490806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054611244906130d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611270906130d7565b80156112bb5780601f10611292576101008083540402835291602001916112bb565b820191905f5260205f20905b81548152906001019060200180831161129e57829003601f168201915b5050505050905084565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b7faa3edb77f7c8cc9e38e8afe78954f703aeeda7fffe014eeb6e56ea84e62f6da781565b5f801b81565b6009602052805f5260405f205f91509050805461136e906130d7565b80601f016020809104026020016040519081016040528092919081815260200182805461139a906130d7565b80156113e55780601f106113bc576101008083540402835291602001916113e5565b820191905f5260205f20905b8154815290600101906020018083116113c857829003601f168201915b505050505081565b6113f5611f3f565b60056040518060600160405290815f82018054611411906130d7565b80601f016020809104026020016040519081016040528092919081815260200182805461143d906130d7565b80156114885780601f1061145f57610100808354040283529160200191611488565b820191905f5260205f20905b81548152906001019060200180831161146b57829003601f168201915b505050505081526020016001820180546114a1906130d7565b80601f01602080910402602001604051908101604052809291908181526020018280546114cd906130d7565b80156115185780601f106114ef57610100808354040283529160200191611518565b820191905f5260205f20905b8154815290600101906020018083116114fb57829003601f168201915b50505050508152602001600282018054611531906130d7565b80601f016020809104026020016040519081016040528092919081815260200182805461155d906130d7565b80156115a85780601f1061157f576101008083540402835291602001916115a8565b820191905f5260205f20905b81548152906001019060200180831161158b57829003601f168201915b505050505081525050905090565b600881815481106115c5575f80fd5b905f5260205f20015f9150905080546115dd906130d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611609906130d7565b80156116545780601f1061162b57610100808354040283529160200191611654565b820191905f5260205f20905b81548152906001019060200180831161163757829003601f168201915b505050505081565b61500081565b5f815f01518260200151836040015184606001516040516020016116899493929190612d85565b604051602081830303815290604052805190602001209050919050565b5f6116af611cb4565b60606116bb83826109e4565b91506116c682611897565b50919050565b6005805f0180546116dc906130d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611708906130d7565b80156117535780601f1061172a57610100808354040283529160200191611753565b820191905f5260205f20905b81548152906001019060200180831161173657829003601f168201915b505050505090806001018054611768906130d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611794906130d7565b80156117df5780601f106117b6576101008083540402835291602001916117df565b820191905f5260205f20905b8154815290600101906020018083116117c257829003601f168201915b5050505050908060020180546117f4906130d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611820906130d7565b801561186b5780601f106118425761010080835404028352916020019161186b565b820191905f5260205f20905b81548152906001019060200180831161184e57829003601f168201915b5050505050905083565b61187e82610900565b61188781611bb7565b6118918383611d42565b50505050565b61189f611cb4565b6001600a5f8381526020019081526020015f205f6101000a81548160ff0219169083151502179055507ff1c63c82bb552724847bbe3164e4b33ba29fd3215457e7a41998f59511ff25ca81336040516118f9929190613a60565b60405180910390a150565b600a602052805f5260405f205f915054906101000a900460ff1681565b611929611cb4565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611999575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016119909190612d0b565b60405180910390fd5b6119a281611e2b565b50565b6119ad611f60565b60035f8381526020019081526020015f206040518060800160405290815f820180546119d8906130d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611a04906130d7565b8015611a4f5780601f10611a2657610100808354040283529160200191611a4f565b820191905f5260205f20905b815481529060010190602001808311611a3257829003601f168201915b5050505050815260200160018201548152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054611ac7906130d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611af3906130d7565b8015611b3e5780601f10611b1557610100808354040283529160200191611b3e565b820191905f5260205f20905b815481529060010190602001808311611b2157829003601f168201915b5050505050815250509050919050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611bc881611bc3611d3b565b611eee565b50565b5f611bd683836112c5565b611caa5760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611c47611d3b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611cae565b5f90505b92915050565b611cbc611d3b565b73ffffffffffffffffffffffffffffffffffffffff16611cda611146565b73ffffffffffffffffffffffffffffffffffffffff1614611d3957611cfd611d3b565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611d309190612d0b565b60405180910390fd5b565b5f33905090565b5f611d4d83836112c5565b15611e21575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611dbe611d3b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611e25565b5f90505b92915050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611ef882826112c5565b611f3b5780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611f32929190613a87565b60405180910390fd5b5050565b60405180606001604052806060815260200160608152602001606081525090565b6040518060800160405280606081526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611fe181611fad565b8114611feb575f80fd5b50565b5f81359050611ffc81611fd8565b92915050565b5f6020828403121561201757612016611fa5565b5b5f61202484828501611fee565b91505092915050565b5f8115159050919050565b6120418161202d565b82525050565b5f60208201905061205a5f830184612038565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6120aa82612064565b810181811067ffffffffffffffff821117156120c9576120c8612074565b5b80604052505050565b5f6120db611f9c565b90506120e782826120a1565b919050565b5f80fd5b5f80fd5b5f80fd5b5f67ffffffffffffffff82111561211257612111612074565b5b61211b82612064565b9050602081019050919050565b828183375f83830152505050565b5f612148612143846120f8565b6120d2565b905082815260208101848484011115612164576121636120f4565b5b61216f848285612128565b509392505050565b5f82601f83011261218b5761218a6120f0565b5b813561219b848260208601612136565b91505092915050565b5f819050919050565b6121b6816121a4565b81146121c0575f80fd5b50565b5f813590506121d1816121ad565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612200826121d7565b9050919050565b612210816121f6565b811461221a575f80fd5b50565b5f8135905061222b81612207565b92915050565b5f6080828403121561224657612245612060565b5b61225060806120d2565b90505f82013567ffffffffffffffff81111561226f5761226e6120ec565b5b61227b84828501612177565b5f83015250602061228e848285016121c3565b60208301525060406122a28482850161221d565b604083015250606082013567ffffffffffffffff8111156122c6576122c56120ec565b5b6122d284828501612177565b60608301525092915050565b5f602082840312156122f3576122f2611fa5565b5b5f82013567ffffffffffffffff8111156123105761230f611fa9565b5b61231c84828501612231565b91505092915050565b5f819050919050565b61233781612325565b82525050565b5f6020820190506123505f83018461232e565b92915050565b61235f81612325565b8114612369575f80fd5b50565b5f8135905061237a81612356565b92915050565b5f806040838503121561239657612395611fa5565b5b5f6123a38582860161236c565b92505060206123b48582860161221d565b9150509250929050565b5f602082840312156123d3576123d2611fa5565b5b5f6123e08482850161236c565b91505092915050565b5f67ffffffffffffffff82111561240357612402612074565b5b602082029050919050565b5f80fd5b5f61242461241f846123e9565b6120d2565b9050806020840283018581111561243e5761243d61240e565b5b835b8181101561248557803567ffffffffffffffff811115612463576124626120f0565b5b8086016124708982612177565b85526020850194505050602081019050612440565b5050509392505050565b5f82601f8301126124a3576124a26120f0565b5b60046124b0848285612412565b91505092915050565b5f60a082840312156124ce576124cd612060565b5b6124d860a06120d2565b90505f82013567ffffffffffffffff8111156124f7576124f66120ec565b5b61250384828501612177565b5f83015250602082013567ffffffffffffffff811115612526576125256120ec565b5b6125328482850161248f565b602083015250604082013567ffffffffffffffff811115612556576125556120ec565b5b61256284828501612177565b604083015250606082013567ffffffffffffffff811115612586576125856120ec565b5b61259284828501612177565b606083015250608082013567ffffffffffffffff8111156125b6576125b56120ec565b5b6125c284828501612177565b60808301525092915050565b5f67ffffffffffffffff8211156125e8576125e7612074565b5b602082029050602081019050919050565b5f63ffffffff82169050919050565b612611816125f9565b811461261b575f80fd5b50565b5f8135905061262c81612608565b92915050565b5f6080828403121561264757612646612060565b5b61265160806120d2565b90505f6126608482850161261e565b5f8301525060206126738482850161261e565b602083015250604082013567ffffffffffffffff811115612697576126966120ec565b5b6126a384828501612177565b60408301525060606126b78482850161236c565b60608301525092915050565b5f6126d56126d0846125ce565b6120d2565b905080838252602082019050602084028301858111156126f8576126f761240e565b5b835b8181101561273f57803567ffffffffffffffff81111561271d5761271c6120f0565b5b80860161272a8982612632565b855260208501945050506020810190506126fa565b5050509392505050565b5f82601f83011261275d5761275c6120f0565b5b813561276d8482602086016126c3565b91505092915050565b5f806040838503121561278c5761278b611fa5565b5b5f83013567ffffffffffffffff8111156127a9576127a8611fa9565b5b6127b5858286016124b9565b925050602083013567ffffffffffffffff8111156127d6576127d5611fa9565b5b6127e285828601612749565b9150509250929050565b5f819050919050565b6127fe816127ec565b8114612808575f80fd5b50565b5f81359050612819816127f5565b92915050565b5f6020828403121561283457612833611fa5565b5b5f6128418482850161280b565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612881578082015181840152602081019050612866565b5f8484015250505050565b5f6128968261284a565b6128a08185612854565b93506128b0818560208601612864565b6128b981612064565b840191505092915050565b5f6020820190508181035f8301526128dc818461288c565b905092915050565b5f606082840312156128f9576128f8612060565b5b61290360606120d2565b90505f82013567ffffffffffffffff811115612922576129216120ec565b5b61292e84828501612177565b5f83015250602082013567ffffffffffffffff811115612951576129506120ec565b5b61295d84828501612177565b602083015250604082013567ffffffffffffffff811115612981576129806120ec565b5b61298d84828501612177565b60408301525092915050565b5f602082840312156129ae576129ad611fa5565b5b5f82013567ffffffffffffffff8111156129cb576129ca611fa9565b5b6129d7848285016128e4565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f612a238261284a565b612a2d8185612a09565b9350612a3d818560208601612864565b612a4681612064565b840191505092915050565b5f612a5c8383612a19565b905092915050565b5f602082019050919050565b5f612a7a826129e0565b612a8481856129ea565b935083602082028501612a96856129fa565b805f5b85811015612ad15784840389528151612ab28582612a51565b9450612abd83612a64565b925060208a01995050600181019050612a99565b50829750879550505050505092915050565b5f6020820190508181035f830152612afb8184612a70565b905092915050565b5f67ffffffffffffffff821115612b1d57612b1c612074565b5b602082029050919050565b5f612b3a612b3584612b03565b6120d2565b90508060208402830185811115612b5457612b5361240e565b5b835b81811015612b7d5780612b69888261236c565b845260208401935050602081019050612b56565b5050509392505050565b5f82601f830112612b9b57612b9a6120f0565b5b6018612ba8848285612b28565b91505092915050565b5f6103008284031215612bc757612bc6612060565b5b612bd160206120d2565b90505f612be084828501612b87565b5f8301525092915050565b5f6103008284031215612c0157612c00611fa5565b5b5f612c0e84828501612bb1565b91505092915050565b5f67ffffffffffffffff821115612c3157612c30612074565b5b612c3a82612064565b9050602081019050919050565b5f612c59612c5484612c17565b6120d2565b905082815260208101848484011115612c7557612c746120f4565b5b612c80848285612128565b509392505050565b5f82601f830112612c9c57612c9b6120f0565b5b8135612cac848260208601612c47565b91505092915050565b5f60208284031215612cca57612cc9611fa5565b5b5f82013567ffffffffffffffff811115612ce757612ce6611fa9565b5b612cf384828501612c88565b91505092915050565b612d05816121f6565b82525050565b5f602082019050612d1e5f830184612cfc565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f612d4882612d24565b612d528185612d2e565b9350612d62818560208601612864565b612d6b81612064565b840191505092915050565b612d7f816121a4565b82525050565b5f6080820190508181035f830152612d9d8187612d3e565b9050612dac6020830186612d76565b612db96040830185612cfc565b8181036060830152612dcb8184612d3e565b905095945050505050565b5f6020820190508181035f830152612dee8184612d3e565b905092915050565b5f82825260208201905092915050565b5f612e1082612d24565b612e1a8185612df6565b9350612e2a818560208601612864565b612e3381612064565b840191505092915050565b5f606083015f8301518482035f860152612e588282612e06565b91505060208301518482036020860152612e728282612e06565b91505060408301518482036040860152612e8c8282612e06565b9150508091505092915050565b5f6020820190508181035f830152612eb18184612e3e565b905092915050565b612ec2816127ec565b82525050565b5f602082019050612edb5f830184612eb9565b92915050565b5f60208284031215612ef657612ef5611fa5565b5b5f82013567ffffffffffffffff811115612f1357612f12611fa9565b5b612f1f848285016124b9565b91505092915050565b5f6060820190508181035f830152612f408186612d3e565b90508181036020830152612f548185612d3e565b90508181036040830152612f688184612d3e565b9050949350505050565b5f60208284031215612f8757612f86611fa5565b5b5f612f948482850161221d565b91505092915050565b612fa6816121a4565b82525050565b612fb5816121f6565b82525050565b5f608083015f8301518482035f860152612fd58282612e06565b9150506020830151612fea6020860182612f9d565b506040830151612ffd6040860182612fac565b50606083015184820360608601526130158282612e06565b9150508091505092915050565b5f6020820190508181035f83015261303a8184612fbb565b905092915050565b7f6f70657261746f72206d757374206265207468652073656e64657200000000005f82015250565b5f613076601b83612854565b915061308182613042565b602082019050919050565b5f6020820190508181035f8301526130a38161306a565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806130ee57607f821691505b602082108103613101576131006130aa565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026131637fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613128565b61316d8683613128565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6131a86131a361319e846127ec565b613185565b6127ec565b9050919050565b5f819050919050565b6131c18361318e565b6131d56131cd826131af565b848454613134565b825550505050565b5f90565b6131e96131dd565b6131f48184846131b8565b505050565b5b818110156132175761320c5f826131e1565b6001810190506131fa565b5050565b601f82111561325c5761322d81613107565b61323684613119565b81016020851015613245578190505b61325961325185613119565b8301826131f9565b50505b505050565b5f82821c905092915050565b5f61327c5f1984600802613261565b1980831691505092915050565b5f613294838361326d565b9150826002028217905092915050565b6132ad82612d24565b67ffffffffffffffff8111156132c6576132c5612074565b5b6132d082546130d7565b6132db82828561321b565b5f60209050601f83116001811461330c575f84156132fa578287015190505b6133048582613289565b86555061336b565b601f19841661331a86613107565b5f5b828110156133415784890151825560018201915060208501945060208101905061331c565b8683101561335e578489015161335a601f89168261326d565b8355505b6001600288020188555050505b505050505050565b7f4f70657261746f72206e6f7420617574686f72697a65640000000000000000005f82015250565b5f6133a7601783612854565b91506133b282613373565b602082019050919050565b5f6020820190508181035f8301526133d48161339b565b9050919050565b7f696e636f7272656374206d727464206c656e67746800000000000000000000005f82015250565b5f61340f601583612854565b915061341a826133db565b602082019050919050565b5f6020820190508181035f83015261343c81613403565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f696e636f72726563742052544d525b305d206c656e67746800000000000000005f82015250565b5f6134a4601883612854565b91506134af82613470565b602082019050919050565b5f6020820190508181035f8301526134d181613498565b9050919050565b7f696e636f72726563742052544d525b315d206c656e67746800000000000000005f82015250565b5f61350c601883612854565b9150613517826134d8565b602082019050919050565b5f6020820190508181035f83015261353981613500565b9050919050565b7f696e636f72726563742052544d525b325d206c656e67746800000000000000005f82015250565b5f613574601883612854565b915061357f82613540565b602082019050919050565b5f6020820190508181035f8301526135a181613568565b9050919050565b7f696e636f72726563742052544d525b335d206c656e67746800000000000000005f82015250565b5f6135dc601883612854565b91506135e7826135a8565b602082019050919050565b5f6020820190508181035f830152613609816135d0565b9050919050565b7f696e636f7272656374206d724f776e6572206c656e67746800000000000000005f82015250565b5f613644601883612854565b915061364f82613610565b602082019050919050565b5f6020820190508181035f83015261367181613638565b9050919050565b7f696e636f7272656374206d72436f6e6669674964206c656e67746800000000005f82015250565b5f6136ac601b83612854565b91506136b782613678565b602082019050919050565b5f6020820190508181035f8301526136d9816136a0565b9050919050565b7f696e636f7272656374206d72436f6e6669674f776e6572206c656e67746800005f82015250565b5f613714601e83612854565b915061371f826136e0565b602082019050919050565b5f6020820190508181035f83015261374181613708565b9050919050565b5f8160601b9050919050565b5f61375e82613748565b9050919050565b5f61376f82613754565b9050919050565b613787613782826121f6565b613765565b82525050565b5f81905092915050565b5f6137a182612d24565b6137ab818561378d565b93506137bb818560208601612864565b80840191505092915050565b5f6137d28287613776565b6014820191506137e28286613797565b91506137ee8285613797565b91506137fa8284613797565b915081905095945050505050565b7f446174612073697a652065786365656473206c696d69740000000000000000005f82015250565b5f61383c601783612854565b915061384782613808565b602082019050919050565b5f6020820190508181035f83015261386981613830565b9050919050565b5f6040820190506138835f830185612cfc565b81810360208301526138958184612e3e565b90509392505050565b5f819050815f5260205f209050919050565b601f8211156138f1576138c28161389e565b6138cb84613119565b810160208510156138da578190505b6138ee6138e685613119565b8301826131f9565b50505b505050565b6138ff8261284a565b67ffffffffffffffff81111561391857613917612074565b5b61392282546130d7565b61392d8282856138b0565b5f60209050601f83116001811461395e575f841561394c578287015190505b6139568582613289565b8655506139bd565b601f19841661396c8661389e565b5f5b828110156139935784890151825560018201915060208501945060208101905061396e565b868310156139b057848901516139ac601f89168261326d565b8355505b6001600288020188555050505b505050505050565b5f6040820190508181035f8301526139dd818561288c565b90506139ec6020830184612cfc565b9392505050565b5f819050919050565b613a0d613a0882612325565b6139f3565b82525050565b5f613a1e8287613776565b601482019150613a2e82866139fc565b602082019150613a3e82856139fc565b602082019150613a4e82846139fc565b60208201915081905095945050505050565b5f604082019050613a735f83018561232e565b613a806020830184612cfc565b9392505050565b5f604082019050613a9a5f830185612cfc565b613aa7602083018461232e565b939250505056fea2646970667358221220042f0ffa4c4b4e0cf3339da7796bd2438f155d27fb99e49c0eb73c85c4d41ef564736f6c63430008170033",
}

// KmsABI is the input ABI used to generate the binding from.
// Deprecated: Use KmsMetaData.ABI instead.
var KmsABI = KmsMetaData.ABI

// KmsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KmsMetaData.Bin instead.
var KmsBin = KmsMetaData.Bin

// DeployKms deploys a new Ethereum contract, binding an instance of Kms to it.
func DeployKms(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Kms, error) {
	parsed, err := KmsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KmsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Kms{KmsCaller: KmsCaller{contract: contract}, KmsTransactor: KmsTransactor{contract: contract}, KmsFilterer: KmsFilterer{contract: contract}}, nil
}

// Kms is an auto generated Go binding around an Ethereum contract.
type Kms struct {
	KmsCaller     // Read-only binding to the contract
	KmsTransactor // Write-only binding to the contract
	KmsFilterer   // Log filterer for contract events
}

// KmsCaller is an auto generated read-only Go binding around an Ethereum contract.
type KmsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KmsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KmsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KmsSession struct {
	Contract     *Kms              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KmsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KmsCallerSession struct {
	Contract *KmsCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KmsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KmsTransactorSession struct {
	Contract     *KmsTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KmsRaw is an auto generated low-level Go binding around an Ethereum contract.
type KmsRaw struct {
	Contract *Kms // Generic contract binding to access the raw methods on
}

// KmsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KmsCallerRaw struct {
	Contract *KmsCaller // Generic read-only contract binding to access the raw methods on
}

// KmsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KmsTransactorRaw struct {
	Contract *KmsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKms creates a new instance of Kms, bound to a specific deployed contract.
func NewKms(address common.Address, backend bind.ContractBackend) (*Kms, error) {
	contract, err := bindKms(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Kms{KmsCaller: KmsCaller{contract: contract}, KmsTransactor: KmsTransactor{contract: contract}, KmsFilterer: KmsFilterer{contract: contract}}, nil
}

// NewKmsCaller creates a new read-only instance of Kms, bound to a specific deployed contract.
func NewKmsCaller(address common.Address, caller bind.ContractCaller) (*KmsCaller, error) {
	contract, err := bindKms(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KmsCaller{contract: contract}, nil
}

// NewKmsTransactor creates a new write-only instance of Kms, bound to a specific deployed contract.
func NewKmsTransactor(address common.Address, transactor bind.ContractTransactor) (*KmsTransactor, error) {
	contract, err := bindKms(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KmsTransactor{contract: contract}, nil
}

// NewKmsFilterer creates a new log filterer instance of Kms, bound to a specific deployed contract.
func NewKmsFilterer(address common.Address, filterer bind.ContractFilterer) (*KmsFilterer, error) {
	contract, err := bindKms(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KmsFilterer{contract: contract}, nil
}

// bindKms binds a generic wrapper to an already deployed contract.
func bindKms(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KmsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Kms *KmsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Kms.Contract.KmsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Kms *KmsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kms.Contract.KmsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Kms *KmsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Kms.Contract.KmsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Kms *KmsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Kms.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Kms *KmsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kms.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Kms *KmsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Kms.Contract.contract.Transact(opts, method, params...)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Kms *KmsCaller) DCAPIdentity(opts *bind.CallOpts, report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "DCAPIdentity", report, arg1)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Kms *KmsSession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Kms.Contract.DCAPIdentity(&_Kms.CallOpts, report, arg1)
}

// DCAPIdentity is a free data retrieval call binding the contract method 0x5a69887d.
//
// Solidity: function DCAPIdentity((bytes,bytes[4],bytes,bytes,bytes) report, (uint32,uint32,bytes,bytes32)[] ) view returns(bytes32 identity)
func (_Kms *KmsCallerSession) DCAPIdentity(report DCAPReport, arg1 []DCAPEvent) ([32]byte, error) {
	return _Kms.Contract.DCAPIdentity(&_Kms.CallOpts, report, arg1)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Kms *KmsCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Kms *KmsSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Kms.Contract.DEFAULTADMINROLE(&_Kms.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Kms *KmsCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Kms.Contract.DEFAULTADMINROLE(&_Kms.CallOpts)
}

// HashOnboardRequest is a free data retrieval call binding the contract method 0xb5e3be7a.
//
// Solidity: function HashOnboardRequest((bytes,int256,address,bytes) req) pure returns(bytes32 reqHash)
func (_Kms *KmsCaller) HashOnboardRequest(opts *bind.CallOpts, req OnboardRequest) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "HashOnboardRequest", req)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HashOnboardRequest is a free data retrieval call binding the contract method 0xb5e3be7a.
//
// Solidity: function HashOnboardRequest((bytes,int256,address,bytes) req) pure returns(bytes32 reqHash)
func (_Kms *KmsSession) HashOnboardRequest(req OnboardRequest) ([32]byte, error) {
	return _Kms.Contract.HashOnboardRequest(&_Kms.CallOpts, req)
}

// HashOnboardRequest is a free data retrieval call binding the contract method 0xb5e3be7a.
//
// Solidity: function HashOnboardRequest((bytes,int256,address,bytes) req) pure returns(bytes32 reqHash)
func (_Kms *KmsCallerSession) HashOnboardRequest(req OnboardRequest) ([32]byte, error) {
	return _Kms.Contract.HashOnboardRequest(&_Kms.CallOpts, req)
}

// IdentityAllowed is a free data retrieval call binding the contract method 0x1619e345.
//
// Solidity: function IdentityAllowed(bytes32 identity, address operator) view returns(bool)
func (_Kms *KmsCaller) IdentityAllowed(opts *bind.CallOpts, identity [32]byte, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "IdentityAllowed", identity, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IdentityAllowed is a free data retrieval call binding the contract method 0x1619e345.
//
// Solidity: function IdentityAllowed(bytes32 identity, address operator) view returns(bool)
func (_Kms *KmsSession) IdentityAllowed(identity [32]byte, operator common.Address) (bool, error) {
	return _Kms.Contract.IdentityAllowed(&_Kms.CallOpts, identity, operator)
}

// IdentityAllowed is a free data retrieval call binding the contract method 0x1619e345.
//
// Solidity: function IdentityAllowed(bytes32 identity, address operator) view returns(bool)
func (_Kms *KmsCallerSession) IdentityAllowed(identity [32]byte, operator common.Address) (bool, error) {
	return _Kms.Contract.IdentityAllowed(&_Kms.CallOpts, identity, operator)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x70c608d6.
//
// Solidity: function InstanceDomainNames() view returns(string[])
func (_Kms *KmsCaller) InstanceDomainNames(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "InstanceDomainNames")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x70c608d6.
//
// Solidity: function InstanceDomainNames() view returns(string[])
func (_Kms *KmsSession) InstanceDomainNames() ([]string, error) {
	return _Kms.Contract.InstanceDomainNames(&_Kms.CallOpts)
}

// InstanceDomainNames is a free data retrieval call binding the contract method 0x70c608d6.
//
// Solidity: function InstanceDomainNames() view returns(string[])
func (_Kms *KmsCallerSession) InstanceDomainNames() ([]string, error) {
	return _Kms.Contract.InstanceDomainNames(&_Kms.CallOpts)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Kms *KmsCaller) MAAIdentity(opts *bind.CallOpts, report MAAReport) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "MAAIdentity", report)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Kms *KmsSession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Kms.Contract.MAAIdentity(&_Kms.CallOpts, report)
}

// MAAIdentity is a free data retrieval call binding the contract method 0x863c43d4.
//
// Solidity: function MAAIdentity((bytes32[24]) report) view returns(bytes32 identity)
func (_Kms *KmsCallerSession) MAAIdentity(report MAAReport) ([32]byte, error) {
	return _Kms.Contract.MAAIdentity(&_Kms.CallOpts, report)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Kms *KmsCaller) MAXBYTESSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "MAX_BYTES_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Kms *KmsSession) MAXBYTESSIZE() (*big.Int, error) {
	return _Kms.Contract.MAXBYTESSIZE(&_Kms.CallOpts)
}

// MAXBYTESSIZE is a free data retrieval call binding the contract method 0xaaae748e.
//
// Solidity: function MAX_BYTES_SIZE() view returns(uint256)
func (_Kms *KmsCallerSession) MAXBYTESSIZE() (*big.Int, error) {
	return _Kms.Contract.MAXBYTESSIZE(&_Kms.CallOpts)
}

// PKI is a free data retrieval call binding the contract method 0xa9ac54e9.
//
// Solidity: function PKI() view returns((bytes,bytes,bytes))
func (_Kms *KmsCaller) PKI(opts *bind.CallOpts) (AppPKI, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "PKI")

	if err != nil {
		return *new(AppPKI), err
	}

	out0 := *abi.ConvertType(out[0], new(AppPKI)).(*AppPKI)

	return out0, err

}

// PKI is a free data retrieval call binding the contract method 0xa9ac54e9.
//
// Solidity: function PKI() view returns((bytes,bytes,bytes))
func (_Kms *KmsSession) PKI() (AppPKI, error) {
	return _Kms.Contract.PKI(&_Kms.CallOpts)
}

// PKI is a free data retrieval call binding the contract method 0xa9ac54e9.
//
// Solidity: function PKI() view returns((bytes,bytes,bytes))
func (_Kms *KmsCallerSession) PKI() (AppPKI, error) {
	return _Kms.Contract.PKI(&_Kms.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Kms *KmsCaller) ROLEOPERATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "ROLE_OPERATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Kms *KmsSession) ROLEOPERATOR() ([32]byte, error) {
	return _Kms.Contract.ROLEOPERATOR(&_Kms.CallOpts)
}

// ROLEOPERATOR is a free data retrieval call binding the contract method 0x98a1b397.
//
// Solidity: function ROLE_OPERATOR() view returns(bytes32)
func (_Kms *KmsCallerSession) ROLEOPERATOR() ([32]byte, error) {
	return _Kms.Contract.ROLEOPERATOR(&_Kms.CallOpts)
}

// AllowlistedIdentities is a free data retrieval call binding the contract method 0xe712f5b2.
//
// Solidity: function allowlistedIdentities(bytes32 ) view returns(bool)
func (_Kms *KmsCaller) AllowlistedIdentities(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "allowlistedIdentities", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowlistedIdentities is a free data retrieval call binding the contract method 0xe712f5b2.
//
// Solidity: function allowlistedIdentities(bytes32 ) view returns(bool)
func (_Kms *KmsSession) AllowlistedIdentities(arg0 [32]byte) (bool, error) {
	return _Kms.Contract.AllowlistedIdentities(&_Kms.CallOpts, arg0)
}

// AllowlistedIdentities is a free data retrieval call binding the contract method 0xe712f5b2.
//
// Solidity: function allowlistedIdentities(bytes32 ) view returns(bool)
func (_Kms *KmsCallerSession) AllowlistedIdentities(arg0 [32]byte) (bool, error) {
	return _Kms.Contract.AllowlistedIdentities(&_Kms.CallOpts, arg0)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Kms *KmsCaller) AppPki(opts *bind.CallOpts) (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "app_pki")

	outstruct := new(struct {
		Ca          []byte
		Pubkey      []byte
		Attestation []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Ca = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Pubkey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Attestation = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Kms *KmsSession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Kms.Contract.AppPki(&_Kms.CallOpts)
}

// AppPki is a free data retrieval call binding the contract method 0xc2f38479.
//
// Solidity: function app_pki() view returns(bytes ca, bytes pubkey, bytes attestation)
func (_Kms *KmsCallerSession) AppPki() (struct {
	Ca          []byte
	Pubkey      []byte
	Attestation []byte
}, error) {
	return _Kms.Contract.AppPki(&_Kms.CallOpts)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Kms *KmsCaller) Artifacts(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "artifacts", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Kms *KmsSession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Kms.Contract.Artifacts(&_Kms.CallOpts, arg0)
}

// Artifacts is a free data retrieval call binding the contract method 0xa63e3a37.
//
// Solidity: function artifacts(bytes32 ) view returns(bytes)
func (_Kms *KmsCallerSession) Artifacts(arg0 [32]byte) ([]byte, error) {
	return _Kms.Contract.Artifacts(&_Kms.CallOpts, arg0)
}

// FetchOnboardRequest is a free data retrieval call binding the contract method 0xf588d2fc.
//
// Solidity: function fetchOnboardRequest(bytes32 reqHash) view returns((bytes,int256,address,bytes))
func (_Kms *KmsCaller) FetchOnboardRequest(opts *bind.CallOpts, reqHash [32]byte) (OnboardRequest, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "fetchOnboardRequest", reqHash)

	if err != nil {
		return *new(OnboardRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(OnboardRequest)).(*OnboardRequest)

	return out0, err

}

// FetchOnboardRequest is a free data retrieval call binding the contract method 0xf588d2fc.
//
// Solidity: function fetchOnboardRequest(bytes32 reqHash) view returns((bytes,int256,address,bytes))
func (_Kms *KmsSession) FetchOnboardRequest(reqHash [32]byte) (OnboardRequest, error) {
	return _Kms.Contract.FetchOnboardRequest(&_Kms.CallOpts, reqHash)
}

// FetchOnboardRequest is a free data retrieval call binding the contract method 0xf588d2fc.
//
// Solidity: function fetchOnboardRequest(bytes32 reqHash) view returns((bytes,int256,address,bytes))
func (_Kms *KmsCallerSession) FetchOnboardRequest(reqHash [32]byte) (OnboardRequest, error) {
	return _Kms.Contract.FetchOnboardRequest(&_Kms.CallOpts, reqHash)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Kms *KmsCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Kms *KmsSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Kms.Contract.GetRoleAdmin(&_Kms.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Kms *KmsCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Kms.Contract.GetRoleAdmin(&_Kms.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Kms *KmsCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Kms *KmsSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Kms.Contract.HasRole(&_Kms.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Kms *KmsCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Kms.Contract.HasRole(&_Kms.CallOpts, role, account)
}

// MInstanceDomainNames is a free data retrieval call binding the contract method 0x6511dbe2.
//
// Solidity: function m_instanceDomainNames(uint256 ) view returns(string)
func (_Kms *KmsCaller) MInstanceDomainNames(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "m_instanceDomainNames", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MInstanceDomainNames is a free data retrieval call binding the contract method 0x6511dbe2.
//
// Solidity: function m_instanceDomainNames(uint256 ) view returns(string)
func (_Kms *KmsSession) MInstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Kms.Contract.MInstanceDomainNames(&_Kms.CallOpts, arg0)
}

// MInstanceDomainNames is a free data retrieval call binding the contract method 0x6511dbe2.
//
// Solidity: function m_instanceDomainNames(uint256 ) view returns(string)
func (_Kms *KmsCallerSession) MInstanceDomainNames(arg0 *big.Int) (string, error) {
	return _Kms.Contract.MInstanceDomainNames(&_Kms.CallOpts, arg0)
}

// OnboardRequests is a free data retrieval call binding the contract method 0x9087f2b0.
//
// Solidity: function onboardRequests(bytes32 ) view returns(bytes pubkey, int256 nonce, address operator, bytes attestation)
func (_Kms *KmsCaller) OnboardRequests(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Pubkey      []byte
	Nonce       *big.Int
	Operator    common.Address
	Attestation []byte
}, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "onboardRequests", arg0)

	outstruct := new(struct {
		Pubkey      []byte
		Nonce       *big.Int
		Operator    common.Address
		Attestation []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Pubkey = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Nonce = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Operator = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Attestation = *abi.ConvertType(out[3], new([]byte)).(*[]byte)

	return *outstruct, err

}

// OnboardRequests is a free data retrieval call binding the contract method 0x9087f2b0.
//
// Solidity: function onboardRequests(bytes32 ) view returns(bytes pubkey, int256 nonce, address operator, bytes attestation)
func (_Kms *KmsSession) OnboardRequests(arg0 [32]byte) (struct {
	Pubkey      []byte
	Nonce       *big.Int
	Operator    common.Address
	Attestation []byte
}, error) {
	return _Kms.Contract.OnboardRequests(&_Kms.CallOpts, arg0)
}

// OnboardRequests is a free data retrieval call binding the contract method 0x9087f2b0.
//
// Solidity: function onboardRequests(bytes32 ) view returns(bytes pubkey, int256 nonce, address operator, bytes attestation)
func (_Kms *KmsCallerSession) OnboardRequests(arg0 [32]byte) (struct {
	Pubkey      []byte
	Nonce       *big.Int
	Operator    common.Address
	Attestation []byte
}, error) {
	return _Kms.Contract.OnboardRequests(&_Kms.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Kms *KmsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Kms *KmsSession) Owner() (common.Address, error) {
	return _Kms.Contract.Owner(&_Kms.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Kms *KmsCallerSession) Owner() (common.Address, error) {
	return _Kms.Contract.Owner(&_Kms.CallOpts)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Kms *KmsCaller) StorageBackends(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "storageBackends", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Kms *KmsSession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Kms.Contract.StorageBackends(&_Kms.CallOpts, arg0)
}

// StorageBackends is a free data retrieval call binding the contract method 0xaa539d26.
//
// Solidity: function storageBackends(uint256 ) view returns(string)
func (_Kms *KmsCallerSession) StorageBackends(arg0 *big.Int) (string, error) {
	return _Kms.Contract.StorageBackends(&_Kms.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Kms *KmsCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Kms.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Kms *KmsSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Kms.Contract.SupportsInterface(&_Kms.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Kms *KmsCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Kms.Contract.SupportsInterface(&_Kms.CallOpts, interfaceId)
}

// AllowlistDCAP is a paid mutator transaction binding the contract method 0xc0f1340b.
//
// Solidity: function allowlistDCAP((bytes,bytes[4],bytes,bytes,bytes) report) returns(bytes32 identity)
func (_Kms *KmsTransactor) AllowlistDCAP(opts *bind.TransactOpts, report DCAPReport) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "allowlistDCAP", report)
}

// AllowlistDCAP is a paid mutator transaction binding the contract method 0xc0f1340b.
//
// Solidity: function allowlistDCAP((bytes,bytes[4],bytes,bytes,bytes) report) returns(bytes32 identity)
func (_Kms *KmsSession) AllowlistDCAP(report DCAPReport) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistDCAP(&_Kms.TransactOpts, report)
}

// AllowlistDCAP is a paid mutator transaction binding the contract method 0xc0f1340b.
//
// Solidity: function allowlistDCAP((bytes,bytes[4],bytes,bytes,bytes) report) returns(bytes32 identity)
func (_Kms *KmsTransactorSession) AllowlistDCAP(report DCAPReport) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistDCAP(&_Kms.TransactOpts, report)
}

// AllowlistIdentity is a paid mutator transaction binding the contract method 0xda4fddef.
//
// Solidity: function allowlistIdentity(bytes32 identity) returns()
func (_Kms *KmsTransactor) AllowlistIdentity(opts *bind.TransactOpts, identity [32]byte) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "allowlistIdentity", identity)
}

// AllowlistIdentity is a paid mutator transaction binding the contract method 0xda4fddef.
//
// Solidity: function allowlistIdentity(bytes32 identity) returns()
func (_Kms *KmsSession) AllowlistIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistIdentity(&_Kms.TransactOpts, identity)
}

// AllowlistIdentity is a paid mutator transaction binding the contract method 0xda4fddef.
//
// Solidity: function allowlistIdentity(bytes32 identity) returns()
func (_Kms *KmsTransactorSession) AllowlistIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistIdentity(&_Kms.TransactOpts, identity)
}

// AllowlistMAA is a paid mutator transaction binding the contract method 0x7182ee20.
//
// Solidity: function allowlistMAA((bytes32[24]) report) returns(bytes32 identity)
func (_Kms *KmsTransactor) AllowlistMAA(opts *bind.TransactOpts, report MAAReport) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "allowlistMAA", report)
}

// AllowlistMAA is a paid mutator transaction binding the contract method 0x7182ee20.
//
// Solidity: function allowlistMAA((bytes32[24]) report) returns(bytes32 identity)
func (_Kms *KmsSession) AllowlistMAA(report MAAReport) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistMAA(&_Kms.TransactOpts, report)
}

// AllowlistMAA is a paid mutator transaction binding the contract method 0x7182ee20.
//
// Solidity: function allowlistMAA((bytes32[24]) report) returns(bytes32 identity)
func (_Kms *KmsTransactorSession) AllowlistMAA(report MAAReport) (*types.Transaction, error) {
	return _Kms.Contract.AllowlistMAA(&_Kms.TransactOpts, report)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Kms *KmsTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Kms *KmsSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.Contract.GrantRole(&_Kms.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Kms *KmsTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.Contract.GrantRole(&_Kms.TransactOpts, role, account)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Kms *KmsTransactor) RegisterInstanceDomainName(opts *bind.TransactOpts, domain string) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "registerInstanceDomainName", domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Kms *KmsSession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Kms.Contract.RegisterInstanceDomainName(&_Kms.TransactOpts, domain)
}

// RegisterInstanceDomainName is a paid mutator transaction binding the contract method 0x73fe8cc4.
//
// Solidity: function registerInstanceDomainName(string domain) returns()
func (_Kms *KmsTransactorSession) RegisterInstanceDomainName(domain string) (*types.Transaction, error) {
	return _Kms.Contract.RegisterInstanceDomainName(&_Kms.TransactOpts, domain)
}

// RemoveAllowlistedIdentity is a paid mutator transaction binding the contract method 0x322febce.
//
// Solidity: function removeAllowlistedIdentity(bytes32 identity) returns()
func (_Kms *KmsTransactor) RemoveAllowlistedIdentity(opts *bind.TransactOpts, identity [32]byte) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "removeAllowlistedIdentity", identity)
}

// RemoveAllowlistedIdentity is a paid mutator transaction binding the contract method 0x322febce.
//
// Solidity: function removeAllowlistedIdentity(bytes32 identity) returns()
func (_Kms *KmsSession) RemoveAllowlistedIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Kms.Contract.RemoveAllowlistedIdentity(&_Kms.TransactOpts, identity)
}

// RemoveAllowlistedIdentity is a paid mutator transaction binding the contract method 0x322febce.
//
// Solidity: function removeAllowlistedIdentity(bytes32 identity) returns()
func (_Kms *KmsTransactorSession) RemoveAllowlistedIdentity(identity [32]byte) (*types.Transaction, error) {
	return _Kms.Contract.RemoveAllowlistedIdentity(&_Kms.TransactOpts, identity)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Kms *KmsTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Kms *KmsSession) RenounceOwnership() (*types.Transaction, error) {
	return _Kms.Contract.RenounceOwnership(&_Kms.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Kms *KmsTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Kms.Contract.RenounceOwnership(&_Kms.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Kms *KmsTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Kms *KmsSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RenounceRole(&_Kms.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Kms *KmsTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RenounceRole(&_Kms.TransactOpts, role, callerConfirmation)
}

// RequestOnboard is a paid mutator transaction binding the contract method 0x1301b9ff.
//
// Solidity: function requestOnboard((bytes,int256,address,bytes) req) returns(bytes32 reqHash)
func (_Kms *KmsTransactor) RequestOnboard(opts *bind.TransactOpts, req OnboardRequest) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "requestOnboard", req)
}

// RequestOnboard is a paid mutator transaction binding the contract method 0x1301b9ff.
//
// Solidity: function requestOnboard((bytes,int256,address,bytes) req) returns(bytes32 reqHash)
func (_Kms *KmsSession) RequestOnboard(req OnboardRequest) (*types.Transaction, error) {
	return _Kms.Contract.RequestOnboard(&_Kms.TransactOpts, req)
}

// RequestOnboard is a paid mutator transaction binding the contract method 0x1301b9ff.
//
// Solidity: function requestOnboard((bytes,int256,address,bytes) req) returns(bytes32 reqHash)
func (_Kms *KmsTransactorSession) RequestOnboard(req OnboardRequest) (*types.Transaction, error) {
	return _Kms.Contract.RequestOnboard(&_Kms.TransactOpts, req)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Kms *KmsTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Kms *KmsSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RevokeRole(&_Kms.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Kms *KmsTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Kms.Contract.RevokeRole(&_Kms.TransactOpts, role, account)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Kms *KmsTransactor) SetPKI(opts *bind.TransactOpts, pki AppPKI) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "setPKI", pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Kms *KmsSession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Kms.Contract.SetPKI(&_Kms.TransactOpts, pki)
}

// SetPKI is a paid mutator transaction binding the contract method 0x6c3e695d.
//
// Solidity: function setPKI((bytes,bytes,bytes) pki) returns()
func (_Kms *KmsTransactorSession) SetPKI(pki AppPKI) (*types.Transaction, error) {
	return _Kms.Contract.SetPKI(&_Kms.TransactOpts, pki)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Kms *KmsTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Kms.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Kms *KmsSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Kms.Contract.TransferOwnership(&_Kms.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Kms *KmsTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Kms.Contract.TransferOwnership(&_Kms.TransactOpts, newOwner)
}

// KmsArtifactAddedIterator is returned from FilterArtifactAdded and is used to iterate over the raw logs and unpacked data for ArtifactAdded events raised by the Kms contract.
type KmsArtifactAddedIterator struct {
	Event *KmsArtifactAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsArtifactAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsArtifactAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsArtifactAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsArtifactAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsArtifactAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsArtifactAdded represents a ArtifactAdded event raised by the Kms contract.
type KmsArtifactAdded struct {
	ConfigHash [32]byte
	Adder      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterArtifactAdded is a free log retrieval operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Kms *KmsFilterer) FilterArtifactAdded(opts *bind.FilterOpts) (*KmsArtifactAddedIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return &KmsArtifactAddedIterator{contract: _Kms.contract, event: "ArtifactAdded", logs: logs, sub: sub}, nil
}

// WatchArtifactAdded is a free log subscription operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Kms *KmsFilterer) WatchArtifactAdded(opts *bind.WatchOpts, sink chan<- *KmsArtifactAdded) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "ArtifactAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsArtifactAdded)
				if err := _Kms.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseArtifactAdded is a log parse operation binding the contract event 0x0089f1e7da0d286fa2eafc218d8bfefe2896a6950867624e64c6fd7b91cd45d6.
//
// Solidity: event ArtifactAdded(bytes32 configHash, address adder)
func (_Kms *KmsFilterer) ParseArtifactAdded(log types.Log) (*KmsArtifactAdded, error) {
	event := new(KmsArtifactAdded)
	if err := _Kms.contract.UnpackLog(event, "ArtifactAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsIdentityAllowlistedIterator is returned from FilterIdentityAllowlisted and is used to iterate over the raw logs and unpacked data for IdentityAllowlisted events raised by the Kms contract.
type KmsIdentityAllowlistedIterator struct {
	Event *KmsIdentityAllowlisted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsIdentityAllowlistedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsIdentityAllowlisted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsIdentityAllowlisted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsIdentityAllowlistedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsIdentityAllowlistedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsIdentityAllowlisted represents a IdentityAllowlisted event raised by the Kms contract.
type KmsIdentityAllowlisted struct {
	Identity [32]byte
	Setter   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterIdentityAllowlisted is a free log retrieval operation binding the contract event 0xf1c63c82bb552724847bbe3164e4b33ba29fd3215457e7a41998f59511ff25ca.
//
// Solidity: event IdentityAllowlisted(bytes32 identity, address setter)
func (_Kms *KmsFilterer) FilterIdentityAllowlisted(opts *bind.FilterOpts) (*KmsIdentityAllowlistedIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "IdentityAllowlisted")
	if err != nil {
		return nil, err
	}
	return &KmsIdentityAllowlistedIterator{contract: _Kms.contract, event: "IdentityAllowlisted", logs: logs, sub: sub}, nil
}

// WatchIdentityAllowlisted is a free log subscription operation binding the contract event 0xf1c63c82bb552724847bbe3164e4b33ba29fd3215457e7a41998f59511ff25ca.
//
// Solidity: event IdentityAllowlisted(bytes32 identity, address setter)
func (_Kms *KmsFilterer) WatchIdentityAllowlisted(opts *bind.WatchOpts, sink chan<- *KmsIdentityAllowlisted) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "IdentityAllowlisted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsIdentityAllowlisted)
				if err := _Kms.contract.UnpackLog(event, "IdentityAllowlisted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIdentityAllowlisted is a log parse operation binding the contract event 0xf1c63c82bb552724847bbe3164e4b33ba29fd3215457e7a41998f59511ff25ca.
//
// Solidity: event IdentityAllowlisted(bytes32 identity, address setter)
func (_Kms *KmsFilterer) ParseIdentityAllowlisted(log types.Log) (*KmsIdentityAllowlisted, error) {
	event := new(KmsIdentityAllowlisted)
	if err := _Kms.contract.UnpackLog(event, "IdentityAllowlisted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsInstanceDomainRegisteredIterator is returned from FilterInstanceDomainRegistered and is used to iterate over the raw logs and unpacked data for InstanceDomainRegistered events raised by the Kms contract.
type KmsInstanceDomainRegisteredIterator struct {
	Event *KmsInstanceDomainRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsInstanceDomainRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsInstanceDomainRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsInstanceDomainRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsInstanceDomainRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsInstanceDomainRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsInstanceDomainRegistered represents a InstanceDomainRegistered event raised by the Kms contract.
type KmsInstanceDomainRegistered struct {
	Domain    string
	Registrar common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInstanceDomainRegistered is a free log retrieval operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Kms *KmsFilterer) FilterInstanceDomainRegistered(opts *bind.FilterOpts) (*KmsInstanceDomainRegisteredIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return &KmsInstanceDomainRegisteredIterator{contract: _Kms.contract, event: "InstanceDomainRegistered", logs: logs, sub: sub}, nil
}

// WatchInstanceDomainRegistered is a free log subscription operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Kms *KmsFilterer) WatchInstanceDomainRegistered(opts *bind.WatchOpts, sink chan<- *KmsInstanceDomainRegistered) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "InstanceDomainRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsInstanceDomainRegistered)
				if err := _Kms.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstanceDomainRegistered is a log parse operation binding the contract event 0x1cffa1975e8ac674a45ba4538b3fecb27ef432cf4cfa52b4c2a25d1ac6b3e3aa.
//
// Solidity: event InstanceDomainRegistered(string domain, address registrar)
func (_Kms *KmsFilterer) ParseInstanceDomainRegistered(log types.Log) (*KmsInstanceDomainRegistered, error) {
	event := new(KmsInstanceDomainRegistered)
	if err := _Kms.contract.UnpackLog(event, "InstanceDomainRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Kms contract.
type KmsOwnershipTransferredIterator struct {
	Event *KmsOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsOwnershipTransferred represents a OwnershipTransferred event raised by the Kms contract.
type KmsOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Kms *KmsFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*KmsOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Kms.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &KmsOwnershipTransferredIterator{contract: _Kms.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Kms *KmsFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *KmsOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Kms.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsOwnershipTransferred)
				if err := _Kms.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Kms *KmsFilterer) ParseOwnershipTransferred(log types.Log) (*KmsOwnershipTransferred, error) {
	event := new(KmsOwnershipTransferred)
	if err := _Kms.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsPKIUpdatedIterator is returned from FilterPKIUpdated and is used to iterate over the raw logs and unpacked data for PKIUpdated events raised by the Kms contract.
type KmsPKIUpdatedIterator struct {
	Event *KmsPKIUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsPKIUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsPKIUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsPKIUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsPKIUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsPKIUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsPKIUpdated represents a PKIUpdated event raised by the Kms contract.
type KmsPKIUpdated struct {
	Updater common.Address
	Pki     AppPKI
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPKIUpdated is a free log retrieval operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Kms *KmsFilterer) FilterPKIUpdated(opts *bind.FilterOpts) (*KmsPKIUpdatedIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return &KmsPKIUpdatedIterator{contract: _Kms.contract, event: "PKIUpdated", logs: logs, sub: sub}, nil
}

// WatchPKIUpdated is a free log subscription operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Kms *KmsFilterer) WatchPKIUpdated(opts *bind.WatchOpts, sink chan<- *KmsPKIUpdated) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "PKIUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsPKIUpdated)
				if err := _Kms.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePKIUpdated is a log parse operation binding the contract event 0x284bc1ef7d0ba7c60b8f7283abd7cac9396efaf624dd518cd69a9998265bbcb7.
//
// Solidity: event PKIUpdated(address updater, (bytes,bytes,bytes) pki)
func (_Kms *KmsFilterer) ParsePKIUpdated(log types.Log) (*KmsPKIUpdated, error) {
	event := new(KmsPKIUpdated)
	if err := _Kms.contract.UnpackLog(event, "PKIUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Kms contract.
type KmsRoleAdminChangedIterator struct {
	Event *KmsRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsRoleAdminChanged represents a RoleAdminChanged event raised by the Kms contract.
type KmsRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Kms *KmsFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*KmsRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Kms.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &KmsRoleAdminChangedIterator{contract: _Kms.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Kms *KmsFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *KmsRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Kms.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsRoleAdminChanged)
				if err := _Kms.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Kms *KmsFilterer) ParseRoleAdminChanged(log types.Log) (*KmsRoleAdminChanged, error) {
	event := new(KmsRoleAdminChanged)
	if err := _Kms.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Kms contract.
type KmsRoleGrantedIterator struct {
	Event *KmsRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsRoleGranted represents a RoleGranted event raised by the Kms contract.
type KmsRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*KmsRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Kms.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &KmsRoleGrantedIterator{contract: _Kms.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *KmsRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Kms.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsRoleGranted)
				if err := _Kms.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) ParseRoleGranted(log types.Log) (*KmsRoleGranted, error) {
	event := new(KmsRoleGranted)
	if err := _Kms.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Kms contract.
type KmsRoleRevokedIterator struct {
	Event *KmsRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsRoleRevoked represents a RoleRevoked event raised by the Kms contract.
type KmsRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*KmsRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Kms.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &KmsRoleRevokedIterator{contract: _Kms.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *KmsRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Kms.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsRoleRevoked)
				if err := _Kms.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Kms *KmsFilterer) ParseRoleRevoked(log types.Log) (*KmsRoleRevoked, error) {
	event := new(KmsRoleRevoked)
	if err := _Kms.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsStorageBackendRemovedIterator is returned from FilterStorageBackendRemoved and is used to iterate over the raw logs and unpacked data for StorageBackendRemoved events raised by the Kms contract.
type KmsStorageBackendRemovedIterator struct {
	Event *KmsStorageBackendRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsStorageBackendRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsStorageBackendRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsStorageBackendRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsStorageBackendRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsStorageBackendRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsStorageBackendRemoved represents a StorageBackendRemoved event raised by the Kms contract.
type KmsStorageBackendRemoved struct {
	Location string
	Remover  common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendRemoved is a free log retrieval operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Kms *KmsFilterer) FilterStorageBackendRemoved(opts *bind.FilterOpts) (*KmsStorageBackendRemovedIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return &KmsStorageBackendRemovedIterator{contract: _Kms.contract, event: "StorageBackendRemoved", logs: logs, sub: sub}, nil
}

// WatchStorageBackendRemoved is a free log subscription operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Kms *KmsFilterer) WatchStorageBackendRemoved(opts *bind.WatchOpts, sink chan<- *KmsStorageBackendRemoved) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "StorageBackendRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsStorageBackendRemoved)
				if err := _Kms.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendRemoved is a log parse operation binding the contract event 0xf633b6242693f791d1142706b90f2590545fe665e0919e3089a47797f83eea1f.
//
// Solidity: event StorageBackendRemoved(string location, address remover)
func (_Kms *KmsFilterer) ParseStorageBackendRemoved(log types.Log) (*KmsStorageBackendRemoved, error) {
	event := new(KmsStorageBackendRemoved)
	if err := _Kms.contract.UnpackLog(event, "StorageBackendRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsStorageBackendSetIterator is returned from FilterStorageBackendSet and is used to iterate over the raw logs and unpacked data for StorageBackendSet events raised by the Kms contract.
type KmsStorageBackendSetIterator struct {
	Event *KmsStorageBackendSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsStorageBackendSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsStorageBackendSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsStorageBackendSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsStorageBackendSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsStorageBackendSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsStorageBackendSet represents a StorageBackendSet event raised by the Kms contract.
type KmsStorageBackendSet struct {
	Location string
	Setter   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStorageBackendSet is a free log retrieval operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Kms *KmsFilterer) FilterStorageBackendSet(opts *bind.FilterOpts) (*KmsStorageBackendSetIterator, error) {

	logs, sub, err := _Kms.contract.FilterLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return &KmsStorageBackendSetIterator{contract: _Kms.contract, event: "StorageBackendSet", logs: logs, sub: sub}, nil
}

// WatchStorageBackendSet is a free log subscription operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Kms *KmsFilterer) WatchStorageBackendSet(opts *bind.WatchOpts, sink chan<- *KmsStorageBackendSet) (event.Subscription, error) {

	logs, sub, err := _Kms.contract.WatchLogs(opts, "StorageBackendSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsStorageBackendSet)
				if err := _Kms.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorageBackendSet is a log parse operation binding the contract event 0xd0f13741ab421dfd2f943f230044db0169f77baf12de4af5aa8eaee88ba605da.
//
// Solidity: event StorageBackendSet(string location, address setter)
func (_Kms *KmsFilterer) ParseStorageBackendSet(log types.Log) (*KmsStorageBackendSet, error) {
	event := new(KmsStorageBackendSet)
	if err := _Kms.contract.UnpackLog(event, "StorageBackendSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
